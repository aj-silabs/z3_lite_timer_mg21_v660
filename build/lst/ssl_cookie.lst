###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cookie.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW49AE.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cookie.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"ssl_cookie.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\ssl_cookie.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\ssl_cookie.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cookie.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  DTLS cookie callbacks implementation
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           * These session callbacks use a simple chained list
     35           * to store and retrieve the session information.
     36           */
     37          
     38          #if !defined(MBEDTLS_CONFIG_FILE)
     39          #include "mbedtls/config.h"
     40          #else
     41          #include MBEDTLS_CONFIG_FILE
     42          #endif
     43          
     44          #if defined(MBEDTLS_SSL_COOKIE_C)
     45          
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #define mbedtls_calloc    calloc
     50          #define mbedtls_free      free
     51          #endif
     52          
     53          #include "mbedtls/ssl_cookie.h"
     54          #include "mbedtls/ssl_internal.h"
     55          
     56          #include <string.h>
     57          
     58          /* Implementation that should never be optimized out by the compiler */
     59          static void mbedtls_zeroize( void *v, size_t n ) {
     60              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     61          }
     62          
     63          /*
     64           * If DTLS is in use, then at least one of SHA-1, SHA-256, SHA-512 is
     65           * available. Try SHA-256 first, 512 wastes resources since we need to stay
     66           * with max 32 bytes of cookie for DTLS 1.0
     67           */
     68          #if defined(MBEDTLS_SHA256_C)
     69          #define COOKIE_MD           MBEDTLS_MD_SHA224
     70          #define COOKIE_MD_OUTLEN    32
     71          #define COOKIE_HMAC_LEN     28
     72          #elif defined(MBEDTLS_SHA512_C)
     73          #define COOKIE_MD           MBEDTLS_MD_SHA384
     74          #define COOKIE_MD_OUTLEN    48
     75          #define COOKIE_HMAC_LEN     28
     76          #elif defined(MBEDTLS_SHA1_C)
     77          #define COOKIE_MD           MBEDTLS_MD_SHA1
     78          #define COOKIE_MD_OUTLEN    20
     79          #define COOKIE_HMAC_LEN     20
     80          #else
     81          #error "DTLS hello verify needs SHA-1 or SHA-2"
     82          #endif
     83          
     84          /*
     85           * Cookies are formed of a 4-bytes timestamp (or serial number) and
     86           * an HMAC of timestemp and client ID.
     87           */
     88          #define COOKIE_LEN      ( 4 + COOKIE_HMAC_LEN )
     89          
     90          void mbedtls_ssl_cookie_init( mbedtls_ssl_cookie_ctx *ctx )
     91          {
     92              mbedtls_md_init( &ctx->hmac_ctx );
     93          #if !defined(MBEDTLS_HAVE_TIME)
     94              ctx->serial = 0;
     95          #endif
     96              ctx->timeout = MBEDTLS_SSL_COOKIE_TIMEOUT;
     97          
     98          #if defined(MBEDTLS_THREADING_C)
     99              mbedtls_mutex_init( &ctx->mutex );
    100          #endif
    101          }
    102          
    103          void mbedtls_ssl_cookie_set_timeout( mbedtls_ssl_cookie_ctx *ctx, unsigned long delay )
    104          {
    105              ctx->timeout = delay;
    106          }
    107          
    108          void mbedtls_ssl_cookie_free( mbedtls_ssl_cookie_ctx *ctx )
    109          {
    110              mbedtls_md_free( &ctx->hmac_ctx );
    111          
    112          #if defined(MBEDTLS_THREADING_C)
    113              mbedtls_mutex_free( &ctx->mutex );
    114          #endif
    115          
    116              mbedtls_zeroize( ctx, sizeof( mbedtls_ssl_cookie_ctx ) );
    117          }
    118          
    119          int mbedtls_ssl_cookie_setup( mbedtls_ssl_cookie_ctx *ctx,
    120                                int (*f_rng)(void *, unsigned char *, size_t),
    121                                void *p_rng )
    122          {
    123              int ret;
    124              unsigned char key[COOKIE_MD_OUTLEN];
    125          
    126              if( ( ret = f_rng( p_rng, key, sizeof( key ) ) ) != 0 )
    127                  return( ret );
    128          
    129              ret = mbedtls_md_setup( &ctx->hmac_ctx, mbedtls_md_info_from_type( COOKIE_MD ), 1 );
    130              if( ret != 0 )
    131                  return( ret );
    132          
    133              ret = mbedtls_md_hmac_starts( &ctx->hmac_ctx, key, sizeof( key ) );
    134              if( ret != 0 )
    135                  return( ret );
    136          
    137              mbedtls_zeroize( key, sizeof( key ) );
    138          
    139              return( 0 );
    140          }
    141          
    142          /*
    143           * Generate the HMAC part of a cookie
    144           */
    145          static int ssl_cookie_hmac( mbedtls_md_context_t *hmac_ctx,
    146                                      const unsigned char time[4],
    147                                      unsigned char **p, unsigned char *end,
    148                                      const unsigned char *cli_id, size_t cli_id_len )
    149          {
    150              unsigned char hmac_out[COOKIE_MD_OUTLEN];
    151          
    152              if( (size_t)( end - *p ) < COOKIE_HMAC_LEN )
    153                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
    154          
    155              if( mbedtls_md_hmac_reset(  hmac_ctx ) != 0 ||
    156                  mbedtls_md_hmac_update( hmac_ctx, time, 4 ) != 0 ||
    157                  mbedtls_md_hmac_update( hmac_ctx, cli_id, cli_id_len ) != 0 ||
    158                  mbedtls_md_hmac_finish( hmac_ctx, hmac_out ) != 0 )
    159              {
    160                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    161              }
    162          
    163              memcpy( *p, hmac_out, COOKIE_HMAC_LEN );
    164              *p += COOKIE_HMAC_LEN;
    165          
    166              return( 0 );
    167          }
    168          
    169          /*
    170           * Generate cookie for DTLS ClientHello verification
    171           */
    172          int mbedtls_ssl_cookie_write( void *p_ctx,
    173                                unsigned char **p, unsigned char *end,
    174                                const unsigned char *cli_id, size_t cli_id_len )
    175          {
    176              int ret;
    177              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    178              unsigned long t;
    179          
    180              if( ctx == NULL || cli_id == NULL )
    181                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    182          
    183              if( (size_t)( end - *p ) < COOKIE_LEN )
    184                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
    185          
    186          #if defined(MBEDTLS_HAVE_TIME)
    187              t = (unsigned long) mbedtls_time( NULL );
    188          #else
    189              t = ctx->serial++;
    190          #endif
    191          
    192              (*p)[0] = (unsigned char)( t >> 24 );
    193              (*p)[1] = (unsigned char)( t >> 16 );
    194              (*p)[2] = (unsigned char)( t >>  8 );
    195              (*p)[3] = (unsigned char)( t       );
    196              *p += 4;
    197          
    198          #if defined(MBEDTLS_THREADING_C)
    199              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    200                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR + ret );
    201          #endif
    202          
    203              ret = ssl_cookie_hmac( &ctx->hmac_ctx, *p - 4,
    204                                     p, end, cli_id, cli_id_len );
    205          
    206          #if defined(MBEDTLS_THREADING_C)
    207              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    208                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR +
    209                          MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    210          #endif
    211          
    212              return( ret );
    213          }
    214          
    215          /*
    216           * Check a cookie
    217           */
    218          int mbedtls_ssl_cookie_check( void *p_ctx,
    219                                const unsigned char *cookie, size_t cookie_len,
    220                                const unsigned char *cli_id, size_t cli_id_len )
    221          {
    222              unsigned char ref_hmac[COOKIE_HMAC_LEN];
    223              int ret = 0;
    224              unsigned char *p = ref_hmac;
    225              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    226              unsigned long cur_time, cookie_time;
    227          
    228              if( ctx == NULL || cli_id == NULL )
    229                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    230          
    231              if( cookie_len != COOKIE_LEN )
    232                  return( -1 );
    233          
    234          #if defined(MBEDTLS_THREADING_C)
    235              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    236                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR + ret );
    237          #endif
    238          
    239              if( ssl_cookie_hmac( &ctx->hmac_ctx, cookie,
    240                                   &p, p + sizeof( ref_hmac ),
    241                                   cli_id, cli_id_len ) != 0 )
    242                  ret = -1;
    243          
    244          #if defined(MBEDTLS_THREADING_C)
    245              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    246                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR +
    247                          MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    248          #endif
    249          
    250              if( ret != 0 )
    251                  return( ret );
    252          
    253              if( mbedtls_ssl_safer_memcmp( cookie + 4, ref_hmac, sizeof( ref_hmac ) ) != 0 )
    254                  return( -1 );
    255          
    256          #if defined(MBEDTLS_HAVE_TIME)
    257              cur_time = (unsigned long) mbedtls_time( NULL );
    258          #else
    259              cur_time = ctx->serial;
    260          #endif
    261          
    262              cookie_time = ( (unsigned long) cookie[0] << 24 ) |
    263                            ( (unsigned long) cookie[1] << 16 ) |
    264                            ( (unsigned long) cookie[2] <<  8 ) |
    265                            ( (unsigned long) cookie[3]       );
    266          
    267              if( ctx->timeout != 0 && cur_time - cookie_time > ctx->timeout )
    268                  return( -1 );
    269          
    270              return( 0 );
    271          }
    272          #endif /* MBEDTLS_SSL_COOKIE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
