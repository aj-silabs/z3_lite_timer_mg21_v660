###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:18
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md5.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWBAEC.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md5.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"md5.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\md5.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\md5.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md5.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  RFC 1321 compliant MD5 implementation
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           *  The MD5 algorithm was designed by Ron Rivest in 1991.
     35           *
     36           *  http://www.ietf.org/rfc/rfc1321.txt
     37           */
     38          
     39          #if !defined(MBEDTLS_CONFIG_FILE)
     40          #include "mbedtls/config.h"
     41          #else
     42          #include MBEDTLS_CONFIG_FILE
     43          #endif
     44          
     45          #if defined(MBEDTLS_MD5_C)
     46          
     47          #include "mbedtls/md5.h"
     48          
     49          #include <string.h>
     50          
     51          #if defined(MBEDTLS_SELF_TEST)
     52          #if defined(MBEDTLS_PLATFORM_C)
     53          #include "mbedtls/platform.h"
     54          #else
     55          #include <stdio.h>
     56          #define mbedtls_printf printf
     57          #endif /* MBEDTLS_PLATFORM_C */
     58          #endif /* MBEDTLS_SELF_TEST */
     59          
     60          #if !defined(MBEDTLS_MD5_ALT)
     61          
     62          /* Implementation that should never be optimized out by the compiler */
     63          static void mbedtls_zeroize( void *v, size_t n ) {
     64              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     65          }
     66          
     67          /*
     68           * 32-bit integer manipulation macros (little endian)
     69           */
     70          #ifndef GET_UINT32_LE
     71          #define GET_UINT32_LE(n,b,i)                            \
     72          {                                                       \
     73              (n) = ( (uint32_t) (b)[(i)    ]       )             \
     74                  | ( (uint32_t) (b)[(i) + 1] <<  8 )             \
     75                  | ( (uint32_t) (b)[(i) + 2] << 16 )             \
     76                  | ( (uint32_t) (b)[(i) + 3] << 24 );            \
     77          }
     78          #endif
     79          
     80          #ifndef PUT_UINT32_LE
     81          #define PUT_UINT32_LE(n,b,i)                                    \
     82          {                                                               \
     83              (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \
     84              (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \
     85              (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \
     86              (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
     87          }
     88          #endif
     89          
     90          void mbedtls_md5_init( mbedtls_md5_context *ctx )
     91          {
     92              memset( ctx, 0, sizeof( mbedtls_md5_context ) );
     93          }
     94          
     95          void mbedtls_md5_free( mbedtls_md5_context *ctx )
     96          {
     97              if( ctx == NULL )
     98                  return;
     99          
    100              mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
    101          }
    102          
    103          void mbedtls_md5_clone( mbedtls_md5_context *dst,
    104                                  const mbedtls_md5_context *src )
    105          {
    106              *dst = *src;
    107          }
    108          
    109          /*
    110           * MD5 context setup
    111           */
    112          int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
    113          {
    114              ctx->total[0] = 0;
    115              ctx->total[1] = 0;
    116          
    117              ctx->state[0] = 0x67452301;
    118              ctx->state[1] = 0xEFCDAB89;
    119              ctx->state[2] = 0x98BADCFE;
    120              ctx->state[3] = 0x10325476;
    121          
    122              return( 0 );
    123          }
    124          
    125          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    126          void mbedtls_md5_starts( mbedtls_md5_context *ctx )
    127          {
    128              mbedtls_md5_starts_ret( ctx );
    129          }
    130          #endif
    131          
    132          #if !defined(MBEDTLS_MD5_PROCESS_ALT)
    133          int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
    134                                            const unsigned char data[64] )
    135          {
    136              uint32_t X[16], A, B, C, D;
    137          
    138              GET_UINT32_LE( X[ 0], data,  0 );
    139              GET_UINT32_LE( X[ 1], data,  4 );
    140              GET_UINT32_LE( X[ 2], data,  8 );
    141              GET_UINT32_LE( X[ 3], data, 12 );
    142              GET_UINT32_LE( X[ 4], data, 16 );
    143              GET_UINT32_LE( X[ 5], data, 20 );
    144              GET_UINT32_LE( X[ 6], data, 24 );
    145              GET_UINT32_LE( X[ 7], data, 28 );
    146              GET_UINT32_LE( X[ 8], data, 32 );
    147              GET_UINT32_LE( X[ 9], data, 36 );
    148              GET_UINT32_LE( X[10], data, 40 );
    149              GET_UINT32_LE( X[11], data, 44 );
    150              GET_UINT32_LE( X[12], data, 48 );
    151              GET_UINT32_LE( X[13], data, 52 );
    152              GET_UINT32_LE( X[14], data, 56 );
    153              GET_UINT32_LE( X[15], data, 60 );
    154          
    155          #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
    156          
    157          #define P(a,b,c,d,k,s,t)                                \
    158          {                                                       \
    159              a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
    160          }
    161          
    162              A = ctx->state[0];
    163              B = ctx->state[1];
    164              C = ctx->state[2];
    165              D = ctx->state[3];
    166          
    167          #define F(x,y,z) (z ^ (x & (y ^ z)))
    168          
    169              P( A, B, C, D,  0,  7, 0xD76AA478 );
    170              P( D, A, B, C,  1, 12, 0xE8C7B756 );
    171              P( C, D, A, B,  2, 17, 0x242070DB );
    172              P( B, C, D, A,  3, 22, 0xC1BDCEEE );
    173              P( A, B, C, D,  4,  7, 0xF57C0FAF );
    174              P( D, A, B, C,  5, 12, 0x4787C62A );
    175              P( C, D, A, B,  6, 17, 0xA8304613 );
    176              P( B, C, D, A,  7, 22, 0xFD469501 );
    177              P( A, B, C, D,  8,  7, 0x698098D8 );
    178              P( D, A, B, C,  9, 12, 0x8B44F7AF );
    179              P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
    180              P( B, C, D, A, 11, 22, 0x895CD7BE );
    181              P( A, B, C, D, 12,  7, 0x6B901122 );
    182              P( D, A, B, C, 13, 12, 0xFD987193 );
    183              P( C, D, A, B, 14, 17, 0xA679438E );
    184              P( B, C, D, A, 15, 22, 0x49B40821 );
    185          
    186          #undef F
    187          
    188          #define F(x,y,z) (y ^ (z & (x ^ y)))
    189          
    190              P( A, B, C, D,  1,  5, 0xF61E2562 );
    191              P( D, A, B, C,  6,  9, 0xC040B340 );
    192              P( C, D, A, B, 11, 14, 0x265E5A51 );
    193              P( B, C, D, A,  0, 20, 0xE9B6C7AA );
    194              P( A, B, C, D,  5,  5, 0xD62F105D );
    195              P( D, A, B, C, 10,  9, 0x02441453 );
    196              P( C, D, A, B, 15, 14, 0xD8A1E681 );
    197              P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
    198              P( A, B, C, D,  9,  5, 0x21E1CDE6 );
    199              P( D, A, B, C, 14,  9, 0xC33707D6 );
    200              P( C, D, A, B,  3, 14, 0xF4D50D87 );
    201              P( B, C, D, A,  8, 20, 0x455A14ED );
    202              P( A, B, C, D, 13,  5, 0xA9E3E905 );
    203              P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
    204              P( C, D, A, B,  7, 14, 0x676F02D9 );
    205              P( B, C, D, A, 12, 20, 0x8D2A4C8A );
    206          
    207          #undef F
    208          
    209          #define F(x,y,z) (x ^ y ^ z)
    210          
    211              P( A, B, C, D,  5,  4, 0xFFFA3942 );
    212              P( D, A, B, C,  8, 11, 0x8771F681 );
    213              P( C, D, A, B, 11, 16, 0x6D9D6122 );
    214              P( B, C, D, A, 14, 23, 0xFDE5380C );
    215              P( A, B, C, D,  1,  4, 0xA4BEEA44 );
    216              P( D, A, B, C,  4, 11, 0x4BDECFA9 );
    217              P( C, D, A, B,  7, 16, 0xF6BB4B60 );
    218              P( B, C, D, A, 10, 23, 0xBEBFBC70 );
    219              P( A, B, C, D, 13,  4, 0x289B7EC6 );
    220              P( D, A, B, C,  0, 11, 0xEAA127FA );
    221              P( C, D, A, B,  3, 16, 0xD4EF3085 );
    222              P( B, C, D, A,  6, 23, 0x04881D05 );
    223              P( A, B, C, D,  9,  4, 0xD9D4D039 );
    224              P( D, A, B, C, 12, 11, 0xE6DB99E5 );
    225              P( C, D, A, B, 15, 16, 0x1FA27CF8 );
    226              P( B, C, D, A,  2, 23, 0xC4AC5665 );
    227          
    228          #undef F
    229          
    230          #define F(x,y,z) (y ^ (x | ~z))
    231          
    232              P( A, B, C, D,  0,  6, 0xF4292244 );
    233              P( D, A, B, C,  7, 10, 0x432AFF97 );
    234              P( C, D, A, B, 14, 15, 0xAB9423A7 );
    235              P( B, C, D, A,  5, 21, 0xFC93A039 );
    236              P( A, B, C, D, 12,  6, 0x655B59C3 );
    237              P( D, A, B, C,  3, 10, 0x8F0CCC92 );
    238              P( C, D, A, B, 10, 15, 0xFFEFF47D );
    239              P( B, C, D, A,  1, 21, 0x85845DD1 );
    240              P( A, B, C, D,  8,  6, 0x6FA87E4F );
    241              P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
    242              P( C, D, A, B,  6, 15, 0xA3014314 );
    243              P( B, C, D, A, 13, 21, 0x4E0811A1 );
    244              P( A, B, C, D,  4,  6, 0xF7537E82 );
    245              P( D, A, B, C, 11, 10, 0xBD3AF235 );
    246              P( C, D, A, B,  2, 15, 0x2AD7D2BB );
    247              P( B, C, D, A,  9, 21, 0xEB86D391 );
    248          
    249          #undef F
    250          
    251              ctx->state[0] += A;
    252              ctx->state[1] += B;
    253              ctx->state[2] += C;
    254              ctx->state[3] += D;
    255          
    256              return( 0 );
    257          }
    258          
    259          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    260          void mbedtls_md5_process( mbedtls_md5_context *ctx,
    261                                    const unsigned char data[64] )
    262          {
    263              mbedtls_internal_md5_process( ctx, data );
    264          }
    265          #endif
    266          #endif /* !MBEDTLS_MD5_PROCESS_ALT */
    267          
    268          /*
    269           * MD5 process buffer
    270           */
    271          int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
    272                                      const unsigned char *input,
    273                                      size_t ilen )
    274          {
    275              int ret;
    276              size_t fill;
    277              uint32_t left;
    278          
    279              if( ilen == 0 )
    280                  return( 0 );
    281          
    282              left = ctx->total[0] & 0x3F;
    283              fill = 64 - left;
    284          
    285              ctx->total[0] += (uint32_t) ilen;
    286              ctx->total[0] &= 0xFFFFFFFF;
    287          
    288              if( ctx->total[0] < (uint32_t) ilen )
    289                  ctx->total[1]++;
    290          
    291              if( left && ilen >= fill )
    292              {
    293                  memcpy( (void *) (ctx->buffer + left), input, fill );
    294                  if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
    295                      return( ret );
    296          
    297                  input += fill;
    298                  ilen  -= fill;
    299                  left = 0;
    300              }
    301          
    302              while( ilen >= 64 )
    303              {
    304                  if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
    305                      return( ret );
    306          
    307                  input += 64;
    308                  ilen  -= 64;
    309              }
    310          
    311              if( ilen > 0 )
    312              {
    313                  memcpy( (void *) (ctx->buffer + left), input, ilen );
    314              }
    315          
    316              return( 0 );
    317          }
    318          
    319          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    320          void mbedtls_md5_update( mbedtls_md5_context *ctx,
    321                                   const unsigned char *input,
    322                                   size_t ilen )
    323          {
    324              mbedtls_md5_update_ret( ctx, input, ilen );
    325          }
    326          #endif
    327          
    328          /*
    329           * MD5 final digest
    330           */
    331          int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
    332                                      unsigned char output[16] )
    333          {
    334              int ret;
    335              uint32_t used;
    336              uint32_t high, low;
    337          
    338              /*
    339               * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
    340               */
    341              used = ctx->total[0] & 0x3F;
    342          
    343              ctx->buffer[used++] = 0x80;
    344          
    345              if( used <= 56 )
    346              {
    347                  /* Enough room for padding + length in current block */
    348                  memset( ctx->buffer + used, 0, 56 - used );
    349              }
    350              else
    351              {
    352                  /* We'll need an extra block */
    353                  memset( ctx->buffer + used, 0, 64 - used );
    354          
    355                  if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
    356                      return( ret );
    357          
    358                  memset( ctx->buffer, 0, 56 );
    359              }
    360          
    361              /*
    362               * Add message length
    363               */
    364              high = ( ctx->total[0] >> 29 )
    365                   | ( ctx->total[1] <<  3 );
    366              low  = ( ctx->total[0] <<  3 );
    367          
    368              PUT_UINT32_LE( low,  ctx->buffer, 56 );
    369              PUT_UINT32_LE( high, ctx->buffer, 60 );
    370          
    371              if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
    372                  return( ret );
    373          
    374              /*
    375               * Output final state
    376               */
    377              PUT_UINT32_LE( ctx->state[0], output,  0 );
    378              PUT_UINT32_LE( ctx->state[1], output,  4 );
    379              PUT_UINT32_LE( ctx->state[2], output,  8 );
    380              PUT_UINT32_LE( ctx->state[3], output, 12 );
    381          
    382              return( 0 );
    383          }
    384          
    385          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    386          void mbedtls_md5_finish( mbedtls_md5_context *ctx,
    387                                   unsigned char output[16] )
    388          {
    389              mbedtls_md5_finish_ret( ctx, output );
    390          }
    391          #endif
    392          
    393          #endif /* !MBEDTLS_MD5_ALT */
    394          
    395          /*
    396           * output = MD5( input buffer )
    397           */
    398          int mbedtls_md5_ret( const unsigned char *input,
    399                               size_t ilen,
    400                               unsigned char output[16] )
    401          {
    402              int ret;
    403              mbedtls_md5_context ctx;
    404          
    405              mbedtls_md5_init( &ctx );
    406          
    407              if( ( ret = mbedtls_md5_starts_ret( &ctx ) ) != 0 )
    408                  goto exit;
    409          
    410              if( ( ret = mbedtls_md5_update_ret( &ctx, input, ilen ) ) != 0 )
    411                  goto exit;
    412          
    413              if( ( ret = mbedtls_md5_finish_ret( &ctx, output ) ) != 0 )
    414                  goto exit;
    415          
    416          exit:
    417              mbedtls_md5_free( &ctx );
    418          
    419              return( ret );
    420          }
    421          
    422          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    423          void mbedtls_md5( const unsigned char *input,
    424                            size_t ilen,
    425                            unsigned char output[16] )
    426          {
    427              mbedtls_md5_ret( input, ilen, output );
    428          }
    429          #endif
    430          
    431          #if defined(MBEDTLS_SELF_TEST)
    432          /*
    433           * RFC 1321 test vectors
    434           */
    435          static const unsigned char md5_test_buf[7][81] =
    436          {
    437              { "" },
    438              { "a" },
    439              { "abc" },
    440              { "message digest" },
    441              { "abcdefghijklmnopqrstuvwxyz" },
    442              { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    443              { "12345678901234567890123456789012345678901234567890123456789012"
    444                "345678901234567890" }
    445          };
    446          
    447          static const size_t md5_test_buflen[7] =
    448          {
    449              0, 1, 3, 14, 26, 62, 80
    450          };
    451          
    452          static const unsigned char md5_test_sum[7][16] =
    453          {
    454              { 0xD4, 0x1D, 0x8C, 0xD9, 0x8F, 0x00, 0xB2, 0x04,
    455                0xE9, 0x80, 0x09, 0x98, 0xEC, 0xF8, 0x42, 0x7E },
    456              { 0x0C, 0xC1, 0x75, 0xB9, 0xC0, 0xF1, 0xB6, 0xA8,
    457                0x31, 0xC3, 0x99, 0xE2, 0x69, 0x77, 0x26, 0x61 },
    458              { 0x90, 0x01, 0x50, 0x98, 0x3C, 0xD2, 0x4F, 0xB0,
    459                0xD6, 0x96, 0x3F, 0x7D, 0x28, 0xE1, 0x7F, 0x72 },
    460              { 0xF9, 0x6B, 0x69, 0x7D, 0x7C, 0xB7, 0x93, 0x8D,
    461                0x52, 0x5A, 0x2F, 0x31, 0xAA, 0xF1, 0x61, 0xD0 },
    462              { 0xC3, 0xFC, 0xD3, 0xD7, 0x61, 0x92, 0xE4, 0x00,
    463                0x7D, 0xFB, 0x49, 0x6C, 0xCA, 0x67, 0xE1, 0x3B },
    464              { 0xD1, 0x74, 0xAB, 0x98, 0xD2, 0x77, 0xD9, 0xF5,
    465                0xA5, 0x61, 0x1C, 0x2C, 0x9F, 0x41, 0x9D, 0x9F },
    466              { 0x57, 0xED, 0xF4, 0xA2, 0x2B, 0xE3, 0xC9, 0x55,
    467                0xAC, 0x49, 0xDA, 0x2E, 0x21, 0x07, 0xB6, 0x7A }
    468          };
    469          
    470          /*
    471           * Checkup routine
    472           */
    473          int mbedtls_md5_self_test( int verbose )
    474          {
    475              int i, ret = 0;
    476              unsigned char md5sum[16];
    477          
    478              for( i = 0; i < 7; i++ )
    479              {
    480                  if( verbose != 0 )
    481                      mbedtls_printf( "  MD5 test #%d: ", i + 1 );
    482          
    483                  ret = mbedtls_md5_ret( md5_test_buf[i], md5_test_buflen[i], md5sum );
    484                  if( ret != 0 )
    485                      goto fail;
    486          
    487                  if( memcmp( md5sum, md5_test_sum[i], 16 ) != 0 )
    488                  {
    489                      ret = 1;
    490                      goto fail;
    491                  }
    492          
    493                  if( verbose != 0 )
    494                      mbedtls_printf( "passed\n" );
    495              }
    496          
    497              if( verbose != 0 )
    498                  mbedtls_printf( "\n" );
    499          
    500              return( 0 );
    501          
    502          fail:
    503              if( verbose != 0 )
    504                  mbedtls_printf( "failed\n" );
    505          
    506              return( ret );
    507          }
    508          
    509          #endif /* MBEDTLS_SELF_TEST */
    510          
    511          #endif /* MBEDTLS_MD5_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
