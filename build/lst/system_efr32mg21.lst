###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:56
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\Device\SiliconLabs\EFR32MG21\Source\system_efr32mg21.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW527E.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\Device\SiliconLabs\EFR32MG21\Source\system_efr32mg21.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"system_efr32mg21.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\Device\SiliconLabs\EFR32MG21\Source\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\system_efr32mg21.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\system_efr32mg21.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\Device\SiliconLabs\EFR32MG21\Source\system_efr32mg21.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief CMSIS Cortex-M33 system support for EFR32MG21 devices.
      4           * @version 5.8.0
      5           ******************************************************************************
      6           * # License
      7           * <b>Copyright 2019 Silicon Laboratories, Inc. www.silabs.com</b>
      8           ******************************************************************************
      9           *
     10           * SPDX-License-Identifier: Zlib
     11           *
     12           * The licensor of this software is Silicon Laboratories Inc.
     13           *
     14           * This software is provided 'as-is', without any express or implied
     15           * warranty. In no event will the authors be held liable for any damages
     16           * arising from the use of this software.
     17           *
     18           * Permission is granted to anyone to use this software for any purpose,
     19           * including commercial applications, and to alter it and redistribute it
     20           * freely, subject to the following restrictions:
     21           *
     22           * 1. The origin of this software must not be misrepresented; you must not
     23           *    claim that you wrote the original software. If you use this software
     24           *    in a product, an acknowledgment in the product documentation would be
     25           *    appreciated but is not required.
     26           * 2. Altered source versions must be plainly marked as such, and must not be
     27           *    misrepresented as being the original software.
     28           * 3. This notice may not be removed or altered from any source distribution.
     29           *
     30           *****************************************************************************/
     31          
     32          #include <stdint.h>
     33          #include "em_device.h"
     34          
     35          /*******************************************************************************
     36           ******************************   DEFINES   ************************************
     37           ******************************************************************************/
     38          
     39          /* System oscillator frequencies. These frequencies are normally constant */
     40          /* for a target, but they are made configurable in order to allow run-time */
     41          /* handling of different boards. The crystal oscillator clocks can be set */
     42          /* compile time to a non-default value by defining respective nFXO_FREQ */
     43          /* values according to board design. By defining the nFXO_FREQ to 0, */
     44          /* one indicates that the oscillator is not present, in order to save some */
     45          /* SW footprint. */
     46          
     47          #if !defined(FSRCO_FREQ)
     48          /* FSRCO frequency */
     49          #define FSRCO_FREQ    (20000000UL)
     50          #endif
     51          
     52          #if !defined(HFXO_FREQ)
     53          /* HFXO frequency */
     54          #define HFXO_FREQ    (38400000UL)
     55          #endif
     56          
     57          #if !defined(HFRCODPLL_STARTUP_FREQ)
     58          /* HFRCODPLL startup frequency */
     59          #define HFRCODPLL_STARTUP_FREQ    (19000000UL)
     60          #endif
     61          
     62          #if !defined(HFRCODPLL_MAX_FREQ)
     63          /* Maximum HFRCODPLL frequency */
     64          #define HFRCODPLL_MAX_FREQ    (80000000UL)
     65          #endif
     66          
     67          /* CLKIN0 input */
     68          #if !defined(CLKIN0_FREQ)
     69          #define CLKIN0_FREQ    (0UL)
     70          #endif
     71          
     72          #if !defined(LFRCO_MAX_FREQ)
     73          /* LFRCO frequency, tuned to below frequency during manufacturing. */
     74          #define LFRCO_FREQ    (32768UL)
     75          #endif
     76          
     77          #if !defined(ULFRCO_FREQ)
     78          /* ULFRCO frequency */
     79          #define ULFRCO_FREQ    (1000UL)
     80          #endif
     81          
     82          #if !defined(LFXO_FREQ)
     83          /* LFXO frequency */
     84          #define LFXO_FREQ    (LFRCO_FREQ)
     85          #endif
     86          
     87          /*******************************************************************************
     88           **************************   LOCAL VARIABLES   ********************************
     89           ******************************************************************************/
     90          
     91          #if (HFXO_FREQ > 0) && !defined(SYSTEM_NO_STATIC_MEMORY)
     92          /* NOTE: Gecko bootloaders can't have static variable allocation. */
     93          /* System HFXO clock frequency */

   \                                 In section .data, align 4
     94          static uint32_t SystemHFXOClock = HFXO_FREQ;
   \                     SystemHFXOClock:
   \        0x0   0x0249'F000        DC32 38400000
     95          #endif
     96          
     97          #if (LFXO_FREQ > 0) && !defined(SYSTEM_NO_STATIC_MEMORY)
     98          /* System LFXO clock frequency */

   \                                 In section .data, align 4
     99          static uint32_t SystemLFXOClock = LFXO_FREQ;
   \                     SystemLFXOClock:
   \        0x0   0x0000'8000        DC32 32768
    100          #endif
    101          
    102          #if !defined(SYSTEM_NO_STATIC_MEMORY)
    103          /* System HFRCODPLL clock frequency */

   \                                 In section .data, align 4
    104          static uint32_t SystemHFRCODPLLClock = HFRCODPLL_STARTUP_FREQ;
   \                     SystemHFRCODPLLClock:
   \        0x0   0x0121'EAC0        DC32 19000000
    105          #endif
    106          
    107          /*******************************************************************************
    108           **************************   GLOBAL VARIABLES   *******************************
    109           ******************************************************************************/
    110          
    111          #if defined(__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
    112          #if defined(__ICCARM__)    /* IAR requires the __vector_table symbol */
    113          #define __Vectors    __vector_table
    114          #endif
    115          extern uint32_t __Vectors;
    116          #endif
    117          
    118          #if !defined(SYSTEM_NO_STATIC_MEMORY)
    119          
    120          /**
    121           * @brief
    122           *   System System Clock Frequency (Core Clock).
    123           *
    124           * @details
    125           *   Required CMSIS global variable that must be kept up-to-date.
    126           */

   \                                 In section .data, align 4
    127          uint32_t SystemCoreClock = HFRCODPLL_STARTUP_FREQ;
   \                     SystemCoreClock:
   \        0x0   0x0121'EAC0        DC32 19000000
    128          #endif
    129          
    130          /*******************************************************************************
    131           **************************   GLOBAL FUNCTIONS   *******************************
    132           ******************************************************************************/
    133          
    134          /**************************************************************************//**
    135           * @brief
    136           *   Initialize the system.
    137           *
    138           * @details
    139           *   Do required generic HW system init.
    140           *
    141           * @note
    142           *   This function is invoked during system init, before the main() routine
    143           *   and any data has been initialized. For this reason, it cannot do any
    144           *   initialization of variables etc.
    145           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    146          void SystemInit(void)
    147          {
    148          #if defined(__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
    149            SCB->VTOR = (uint32_t) &__Vectors;
   \                     SystemInit: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x....             LDR.N    R1,??DataTable11_1  ;; 0xe000ed08
   \        0x4   0x6008             STR      R0,[R1, #+0]
    150          #endif
    151          
    152          #if defined(UNALIGNED_SUPPORT_DISABLE)
    153            SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
    154          #endif
    155          
    156          #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    157            SCB->CPACR |= ((3U << 10U * 2U)           /* set CP10 Full Access */
    158                           | (3U << 11U * 2U));       /* set CP11 Full Access */
    159          #endif
    160          }
   \        0x6   0x4770             BX       LR               ;; return
    161          
    162          /***************************************************************************//**
    163           * @brief
    164           *   Get the current system clock frequency (SYSCLK).
    165           *
    166           * @details
    167           *   Calculate and get the current core clock frequency based on the current
    168           *   hardware configuration.
    169           *
    170           * @note
    171           *   This is an EFR32MG21 specific function, not part of the
    172           *   CMSIS definition.
    173           *
    174           * @return
    175           *   Current system clock (SYSCLK) frequency in Hz.
    176           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    177          uint32_t SystemSYSCLKGet(void)
    178          {
    179            uint32_t ret = 0U;
    180          
    181            /* Find clock source */
    182            switch (CMU->SYSCLKCTRL & _CMU_SYSCLKCTRL_CLKSEL_MASK) {
   \                     SystemSYSCLKGet: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_2  ;; 0x40008070
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF001 0x0107      AND      R1,R1,#0x7
   \        0x8   0x2901             CMP      R1,#+1
   \        0xA   0xD007             BEQ.N    ??SystemSYSCLKGet_0
   \        0xC   0xD307             BCC.N    ??SystemSYSCLKGet_1
   \        0xE   0x2903             CMP      R1,#+3
   \       0x10   0xD001             BEQ.N    ??SystemSYSCLKGet_2
   \       0x12   0xD204             BCS.N    ??SystemSYSCLKGet_1
    183              case _CMU_SYSCLKCTRL_CLKSEL_HFRCODPLL:
    184                ret = SystemHFRCODPLLClockGet();
   \       0x14   0x....             B.N      ?Subroutine0
    185                break;
    186          
    187          #if (HFXO_FREQ > 0U)
    188              case _CMU_SYSCLKCTRL_CLKSEL_HFXO:
    189          #if defined(SYSTEM_NO_STATIC_MEMORY)
    190                ret = HFXO_FREQ;
    191          #else
    192                ret = SystemHFXOClock;
   \                     ??SystemSYSCLKGet_2: (+1)
   \       0x16   0x....             LDR.N    R1,??DataTable11_3
   \       0x18   0x6808             LDR      R0,[R1, #+0]
    193          #endif
    194                break;
   \       0x1A   0x4770             BX       LR
    195          #endif
    196          
    197          #if (CLKIN0_FREQ > 0U)
    198              case _CMU_SYSCLKCTRL_CLKSEL_CLKIN0:
    199                ret = CLKIN0_FREQ;
    200                break;
    201          #endif
    202          
    203              case _CMU_SYSCLKCTRL_CLKSEL_FSRCO:
    204                ret = FSRCO_FREQ;
   \                     ??SystemSYSCLKGet_0: (+1)
   \       0x1C   0x....             B.N      ?Subroutine1
    205                break;
    206          
    207              default:
    208                /* Unknown clock source. */
    209                while (1) {
   \                     ??SystemSYSCLKGet_1: (+1)
   \       0x1E   0xE7FE             B.N      ??SystemSYSCLKGet_1
    210                }
    211            }
    212            return ret;
    213          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_6
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_7  ;; 0x1312d00
   \        0x2   0x4770             BX       LR
    214          
    215          /***************************************************************************//**
    216           * @brief
    217           *   Get the current system core clock frequency (HCLK).
    218           *
    219           * @details
    220           *   Calculate and get the current core clock frequency based on the current
    221           *   configuration. Assuming that the SystemCoreClock global variable is
    222           *   maintained, the core clock frequency is stored in that variable as well.
    223           *   This function will however calculate the core clock based on actual HW
    224           *   configuration. It will also update the SystemCoreClock global variable.
    225           *
    226           * @note
    227           *   This is a EFR32MG21 specific function, not part of the
    228           *   CMSIS definition.
    229           *
    230           * @return
    231           *   The current core clock (HCLK) frequency in Hz.
    232           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    233          uint32_t SystemHCLKGet(void)
    234          {
   \                     SystemHCLKGet: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    235            uint32_t presc, ret;
    236          
    237            ret = SystemSYSCLKGet();
   \        0x2   0x....'....        BL       SystemSYSCLKGet
    238          
    239            presc = (CMU->SYSCLKCTRL & _CMU_SYSCLKCTRL_HCLKPRESC_MASK)
    240                    >> _CMU_SYSCLKCTRL_HCLKPRESC_SHIFT;
   \        0x6   0x....             LDR.N    R1,??DataTable11_2  ;; 0x40008070
   \        0x8   0x6809             LDR      R1,[R1, #+0]
    241          
    242            ret /= presc + 1U;
    243          
    244          #if !defined(SYSTEM_NO_STATIC_MEMORY)
    245            /* Keep CMSIS system clock variable up-to-date */
    246            SystemCoreClock = ret;
   \        0xA   0x....             LDR.N    R2,??DataTable11_4
   \        0xC   0xF3C1 0x3101      UBFX     R1,R1,#+12,#+2
   \       0x10   0x1C49             ADDS     R1,R1,#+1
   \       0x12   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x16   0x6010             STR      R0,[R2, #+0]
    247          #endif
    248          
    249            return ret;
   \       0x18   0xBD02             POP      {R1,PC}          ;; return
    250          }
    251          
    252          /***************************************************************************//**
    253           * @brief
    254           *   Get the maximum core clock frequency.
    255           *
    256           * @note
    257           *   This is a EFR32MG21 specific function, not part of the
    258           *   CMSIS definition.
    259           *
    260           * @return
    261           *   The maximum core clock frequency in Hz.
    262           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    263          uint32_t SystemMaxCoreClockGet(void)
    264          {
    265            return(HFRCODPLL_MAX_FREQ > HFXO_FREQ \
    266                   ? HFRCODPLL_MAX_FREQ : HFXO_FREQ);
   \                     SystemMaxCoreClockGet: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_5  ;; 0x4c4b400
   \        0x2   0x4770             BX       LR               ;; return
    267          }
    268          
    269          /**************************************************************************//**
    270           * @brief
    271           *   Get high frequency crystal oscillator clock frequency for target system.
    272           *
    273           * @note
    274           *   This is a EFR32MG21 specific function, not part of the
    275           *   CMSIS definition.
    276           *
    277           * @return
    278           *   HFXO frequency in Hz. 0 if the external crystal oscillator is not present.
    279           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    280          uint32_t SystemHFXOClockGet(void)
    281          {
    282            /* The external crystal oscillator is not present if HFXO_FREQ==0 */
    283          #if (HFXO_FREQ > 0U)
    284          #if defined(SYSTEM_NO_STATIC_MEMORY)
    285            return HFXO_FREQ;
    286          #else
    287            return SystemHFXOClock;
   \                     SystemHFXOClockGet: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_3
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    288          #endif
    289          #else
    290            return 0U;
    291          #endif
    292          }
    293          
    294          /**************************************************************************//**
    295           * @brief
    296           *   Set high frequency crystal oscillator clock frequency for target system.
    297           *
    298           * @note
    299           *   This function is mainly provided for being able to handle target systems
    300           *   with different HF crystal oscillator frequencies run-time. If used, it
    301           *   should probably only be used once during system startup.
    302           *
    303           * @note
    304           *   This is a EFR32MG21 specific function, not part of the
    305           *   CMSIS definition.
    306           *
    307           * @param[in] freq
    308           *   HFXO frequency in Hz used for target.
    309           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          void SystemHFXOClockSet(uint32_t freq)
    311          {
    312            /* External crystal oscillator present? */
    313          #if (HFXO_FREQ > 0) && !defined(SYSTEM_NO_STATIC_MEMORY)
    314            SystemHFXOClock = freq;
   \                     SystemHFXOClockSet: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_3
   \        0x2   0x6008             STR      R0,[R1, #+0]
    315          
    316            /* Update core clock frequency if HFXO is used to clock core */
    317            if ((CMU->SYSCLKCTRL & _CMU_SYSCLKCTRL_CLKSEL_MASK)
    318                == _CMU_SYSCLKCTRL_CLKSEL_HFXO) {
   \        0x4   0x....             LDR.N    R0,??DataTable11_2  ;; 0x40008070
   \        0x6   0x6802             LDR      R2,[R0, #+0]
   \        0x8   0xF002 0x0207      AND      R2,R2,#0x7
   \        0xC   0x2A03             CMP      R2,#+3
   \        0xE   0xBF08             IT       EQ 
    319              /* This function will update the global variable */
    320              SystemHCLKGet();
   \       0x10   0x....'....        BEQ.W    SystemHCLKGet
    321            }
    322          #else
    323            (void) freq; /* Unused parameter */
    324          #endif
    325          }
   \       0x14   0x4770             BX       LR               ;; return
    326          
    327          /**************************************************************************//**
    328           * @brief
    329           *   Get current HFRCODPLL frequency.
    330           *
    331           * @note
    332           *   This is a EFR32MG21 specific function, not part of the
    333           *   CMSIS definition.
    334           *
    335           * @return
    336           *   HFRCODPLL frequency in Hz.
    337           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    338          uint32_t SystemHFRCODPLLClockGet(void)
    339          {
    340          #if !defined(SYSTEM_NO_STATIC_MEMORY)
    341            return SystemHFRCODPLLClock;
   \                     SystemHFRCODPLLClockGet: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE ?Subroutine0
   \        0x2                      ;; // Fall through to label ?Subroutine0
    342          #else
    343            uint32_t ret = 0UL;
    344          
    345            /* Get oscillator frequency band */
    346            switch ((HFRCO0->CAL & _HFRCO_CAL_FREQRANGE_MASK)
    347                    >> _HFRCO_CAL_FREQRANGE_SHIFT) {
    348              case 0:
    349                switch (HFRCO0->CAL & _HFRCO_CAL_CLKDIV_MASK) {
    350                  case HFRCO_CAL_CLKDIV_DIV1:
    351                    ret = 4000000UL;
    352                    break;
    353          
    354                  case HFRCO_CAL_CLKDIV_DIV2:
    355                    ret = 2000000UL;
    356                    break;
    357          
    358                  case HFRCO_CAL_CLKDIV_DIV4:
    359                    ret = 1000000UL;
    360                    break;
    361          
    362                  default:
    363                    ret = 0UL;
    364                    break;
    365                }
    366                break;
    367          
    368              case 3:
    369                ret = 7000000UL;
    370                break;
    371          
    372              case 6:
    373                ret = 13000000UL;
    374                break;
    375          
    376              case 7:
    377                ret = 16000000UL;
    378                break;
    379          
    380              case 8:
    381                ret = 19000000UL;
    382                break;
    383          
    384              case 10:
    385                ret = 26000000UL;
    386                break;
    387          
    388              case 11:
    389                ret = 32000000UL;
    390                break;
    391          
    392              case 12:
    393                ret = 38000000UL;
    394                break;
    395          
    396              case 13:
    397                ret = 48000000UL;
    398                break;
    399          
    400              case 14:
    401                ret = 56000000UL;
    402                break;
    403          
    404              case 15:
    405                ret = 64000000UL;
    406                break;
    407          
    408              case 16:
    409                ret = 80000000UL;
    410                break;
    411          
    412              default:
    413                break;
    414            }
    415            return ret;
    416          #endif
    417          }
    418          
    419          /**************************************************************************//**
    420           * @brief
    421           *   Set HFRCODPLL frequency value.
    422           *
    423           * @note
    424           *   This is a EFR32MG21 specific function, not part of the
    425           *   CMSIS definition.
    426           *
    427           * @param[in] freq
    428           *   HFRCODPLL frequency in Hz.
    429           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    430          void SystemHFRCODPLLClockSet(uint32_t freq)
    431          {
    432          #if !defined(SYSTEM_NO_STATIC_MEMORY)
    433            SystemHFRCODPLLClock = freq;
   \                     SystemHFRCODPLLClockSet: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_6
   \        0x2   0x6008             STR      R0,[R1, #+0]
    434          #else
    435            (void) freq; /* Unused parameter */
    436          #endif
    437          }
   \        0x4   0x4770             BX       LR               ;; return
    438          
    439          /**************************************************************************//**
    440           * @brief
    441           *   Get current CLKIN0 frequency.
    442           *
    443           * @note
    444           *   This is a EFR32MG21 specific function, not part of the
    445           *   CMSIS definition.
    446           *
    447           * @return
    448           *   CLKIN0 frequency in Hz.
    449           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    450          uint32_t SystemCLKIN0Get(void)
    451          {
    452            return CLKIN0_FREQ;
   \                     SystemCLKIN0Get: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    453          }
    454          
    455          /**************************************************************************//**
    456           * @brief
    457           *   Get FSRCO frequency.
    458           *
    459           * @note
    460           *   This is a EFR32MG21 specific function, not part of the
    461           *   CMSIS definition.
    462           *
    463           * @return
    464           *   FSRCO frequency in Hz.
    465           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    466          uint32_t SystemFSRCOClockGet(void)
    467          {
    468            return FSRCO_FREQ;
   \                     SystemFSRCOClockGet: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE ?Subroutine1
   \        0x2                      ;; // Fall through to label ?Subroutine1
    469          }
    470          
    471          /**************************************************************************//**
    472           * @brief
    473           *   Get current HFRCOEM23 frequency.
    474           *
    475           * @note
    476           *   This is a EFR32MG21 specific function, not part of the
    477           *   CMSIS definition.
    478           *
    479           * @return
    480           *   HFRCOEM23 frequency in Hz.
    481           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    482          uint32_t SystemHFRCOEM23ClockGet(void)
    483          {
    484            uint32_t ret = 0UL;
    485          
    486            /* Get oscillator frequency band */
    487            switch ((HFRCOEM23->CAL & _HFRCO_CAL_FREQRANGE_MASK)
    488                    >> _HFRCO_CAL_FREQRANGE_SHIFT) {
   \                     SystemHFRCOEM23ClockGet: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_8  ;; 0x4a014008
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x0C12             LSRS     R2,R2,#+16
   \        0x8   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \        0xC   0xD00C             BEQ.N    ??SystemHFRCOEM23ClockGet_0
   \        0xE   0x2A06             CMP      R2,#+6
   \       0x10   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_1
   \       0x12   0x2A07             CMP      R2,#+7
   \       0x14   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_2
   \       0x16   0x2A08             CMP      R2,#+8
   \       0x18   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_3
   \       0x1A   0x2A0A             CMP      R2,#+10
   \       0x1C   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_4
   \       0x1E   0x2A0B             CMP      R2,#+11
   \       0x20   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_5
   \       0x22   0x2A0C             CMP      R2,#+12
   \       0x24   0xD01B             BEQ.N    ??SystemHFRCOEM23ClockGet_6
   \       0x26   0x4770             BX       LR
    489              case 0:
    490                switch (HFRCOEM23->CAL & _HFRCO_CAL_CLKDIV_MASK) {
   \                     ??SystemHFRCOEM23ClockGet_0: (+1)
   \       0x28   0x6809             LDR      R1,[R1, #+0]
   \       0x2A   0xF011 0x7140      ANDS     R1,R1,#0x3000000
   \       0x2E   0xD006             BEQ.N    ??SystemHFRCOEM23ClockGet_7
   \       0x30   0xF1B1 0x7F80      CMP      R1,#+16777216
   \       0x34   0xD005             BEQ.N    ??SystemHFRCOEM23ClockGet_8
   \       0x36   0xF1B1 0x7F00      CMP      R1,#+33554432
   \       0x3A   0xD004             BEQ.N    ??SystemHFRCOEM23ClockGet_9
   \       0x3C   0x4770             BX       LR
    491                  case HFRCO_CAL_CLKDIV_DIV1:
    492                    ret = 4000000UL;
   \                     ??SystemHFRCOEM23ClockGet_7: (+1)
   \       0x3E   0x....             LDR.N    R0,??DataTable11_9  ;; 0x3d0900
    493                    break;
   \       0x40   0x4770             BX       LR
    494          
    495                  case HFRCO_CAL_CLKDIV_DIV2:
    496                    ret = 2000000UL;
   \                     ??SystemHFRCOEM23ClockGet_8: (+1)
   \       0x42   0x....             LDR.N    R0,??DataTable11_10  ;; 0x1e8480
    497                    break;
   \       0x44   0x4770             BX       LR
    498          
    499                  case HFRCO_CAL_CLKDIV_DIV4:
    500                    ret = 1000000UL;
   \                     ??SystemHFRCOEM23ClockGet_9: (+1)
   \       0x46   0x....             LDR.N    R0,??DataTable11_11  ;; 0xf4240
    501                    break;
   \       0x48   0x4770             BX       LR
    502          
    503                  default:
    504                    ret = 0UL;
    505                    break;
    506                }
    507                break;
    508          
    509              case 6:
    510                ret = 13000000UL;
   \                     ??SystemHFRCOEM23ClockGet_1: (+1)
   \       0x4A   0x....             LDR.N    R0,??DataTable11_12  ;; 0xc65d40
    511                break;
   \       0x4C   0x4770             BX       LR
    512          
    513              case 7:
    514                ret = 16000000UL;
   \                     ??SystemHFRCOEM23ClockGet_2: (+1)
   \       0x4E   0x....             LDR.N    R0,??DataTable11_13  ;; 0xf42400
    515                break;
   \       0x50   0x4770             BX       LR
    516          
    517              case 8:
    518                ret = 19000000UL;
   \                     ??SystemHFRCOEM23ClockGet_3: (+1)
   \       0x52   0x....             LDR.N    R0,??DataTable11_14  ;; 0x121eac0
    519                break;
   \       0x54   0x4770             BX       LR
    520          
    521              case 10:
    522                ret = 26000000UL;
   \                     ??SystemHFRCOEM23ClockGet_4: (+1)
   \       0x56   0x....             LDR.N    R0,??DataTable11_15  ;; 0x18cba80
    523                break;
   \       0x58   0x4770             BX       LR
    524          
    525              case 11:
    526                ret = 32000000UL;
   \                     ??SystemHFRCOEM23ClockGet_5: (+1)
   \       0x5A   0x....             LDR.N    R0,??DataTable11_16  ;; 0x1e84800
    527                break;
   \       0x5C   0x4770             BX       LR
    528          
    529              case 12:
    530                ret = 40000000UL;
   \                     ??SystemHFRCOEM23ClockGet_6: (+1)
   \       0x5E   0x....             LDR.N    R0,??DataTable11_17  ;; 0x2625a00
    531                break;
    532          
    533              default:
    534                break;
    535            }
    536            return ret;
   \       0x60   0x4770             BX       LR               ;; return
    537          }
    538          /**************************************************************************//**
    539           * @brief
    540           *   Get low frequency RC oscillator clock frequency for target system.
    541           *
    542           * @note
    543           *   This is a EFR32MG21 specific function, not part of the
    544           *   CMSIS definition.
    545           *
    546           * @return
    547           *   LFRCO frequency in Hz.
    548           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    549          uint32_t SystemLFRCOClockGet(void)
    550          {
    551            return LFRCO_FREQ;
   \                     SystemLFRCOClockGet: (+1)
   \        0x0   0xF44F 0x4000      MOV      R0,#+32768
   \        0x4   0x4770             BX       LR               ;; return
    552          }
    553          
    554          /**************************************************************************//**
    555           * @brief
    556           *   Get ultra low frequency RC oscillator clock frequency for target system.
    557           *
    558           * @note
    559           *   This is a EFR32MG21 specific function, not part of the
    560           *   CMSIS definition.
    561           *
    562           * @return
    563           *   ULFRCO frequency in Hz.
    564           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    565          uint32_t SystemULFRCOClockGet(void)
    566          {
    567            /* The ULFRCO frequency is not tuned, and can be very inaccurate */
    568            return ULFRCO_FREQ;
   \                     SystemULFRCOClockGet: (+1)
   \        0x0   0xF44F 0x707A      MOV      R0,#+1000
   \        0x4   0x4770             BX       LR               ;; return
    569          }
    570          
    571          /**************************************************************************//**
    572           * @brief
    573           *   Get low frequency crystal oscillator clock frequency for target system.
    574           *
    575           * @note
    576           *   This is a EFR32MG21 specific function, not part of the
    577           *   CMSIS definition.
    578           *
    579           * @return
    580           *   LFXO frequency in Hz.
    581           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    582          uint32_t SystemLFXOClockGet(void)
    583          {
    584            /* External crystal present? */
    585          #if (LFXO_FREQ > 0U)
    586          #if defined(SYSTEM_NO_STATIC_MEMORY)
    587            return LFXO_FREQ;
    588          #else
    589            return SystemLFXOClock;
   \                     SystemLFXOClockGet: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_18
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    590          #endif
    591          #else
    592            return 0U;
    593          #endif
    594          }
    595          
    596          /**************************************************************************//**
    597           * @brief
    598           *   Set low frequency crystal oscillator clock frequency for target system.
    599           *
    600           * @note
    601           *   This function is mainly provided for being able to handle target systems
    602           *   with different HF crystal oscillator frequencies run-time. If used, it
    603           *   should probably only be used once during system startup.
    604           *
    605           * @note
    606           *   This is a EFR32MG21 specific function, not part of the
    607           *   CMSIS definition.
    608           *
    609           * @param[in] freq
    610           *   LFXO frequency in Hz used for target.
    611           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    612          void SystemLFXOClockSet(uint32_t freq)
    613          {
    614            /* External crystal oscillator present? */
    615          #if (LFXO_FREQ > 0U) && !defined(SYSTEM_NO_STATIC_MEMORY)
    616            SystemLFXOClock = freq;
   \                     SystemLFXOClockSet: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_18
   \        0x2   0x6008             STR      R0,[R1, #+0]
    617          #else
    618            (void) freq; /* Unused parameter */
    619          #endif
    620          }
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     __vector_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0xE000'ED08        DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x4000'8070        DC32     0x40008070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     SystemHFXOClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x04C4'B400        DC32     0x4c4b400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x....'....        DC32     SystemHFRCODPLLClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \        0x0   0x0131'2D00        DC32     0x1312d00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \        0x0   0x4A01'4008        DC32     0x4a014008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \        0x0   0x001E'8480        DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \        0x0   0x00C6'5D40        DC32     0xc65d40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \        0x0   0x00F4'2400        DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \        0x0   0x0121'EAC0        DC32     0x121eac0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \        0x0   0x018C'BA80        DC32     0x18cba80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \        0x0   0x01E8'4800        DC32     0x1e84800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \        0x0   0x0262'5A00        DC32     0x2625a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \        0x0   0x....'....        DC32     SystemLFXOClock

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCLKIN0Get
       0   SystemFSRCOClockGet
       8   SystemHCLKGet
         8   -> SystemSYSCLKGet
       0   SystemHFRCODPLLClockGet
       0   SystemHFRCODPLLClockSet
       0   SystemHFRCOEM23ClockGet
       0   SystemHFXOClockGet
       0   SystemHFXOClockSet
         0   -> SystemHCLKGet
       0   SystemInit
       0   SystemLFRCOClockGet
       0   SystemLFXOClockGet
       0   SystemLFXOClockSet
       0   SystemMaxCoreClockGet
       0   SystemSYSCLKGet
       0   SystemULFRCOClockGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       6  ?Subroutine0
       4  ?Subroutine1
       4  SystemCLKIN0Get
       4  SystemCoreClock
       2  SystemFSRCOClockGet
      26  SystemHCLKGet
       4  SystemHFRCODPLLClock
       2  SystemHFRCODPLLClockGet
       6  SystemHFRCODPLLClockSet
      98  SystemHFRCOEM23ClockGet
       4  SystemHFXOClock
       6  SystemHFXOClockGet
      22  SystemHFXOClockSet
       8  SystemInit
       6  SystemLFRCOClockGet
       4  SystemLFXOClock
       6  SystemLFXOClockGet
       6  SystemLFXOClockSet
       4  SystemMaxCoreClockGet
      32  SystemSYSCLKGet
       6  SystemULFRCOClockGet

 
  16 bytes in section .data
 320 bytes in section .text
 
 320 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
