###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:20:03
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\version_features.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW6B73.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\version_features.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"version_features.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\version_features.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\version_features.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\version_features.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  Version feature information
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          
     34          #if !defined(MBEDTLS_CONFIG_FILE)
     35          #include "mbedtls/config.h"
     36          #else
     37          #include MBEDTLS_CONFIG_FILE
     38          #endif
     39          
     40          #if defined(MBEDTLS_VERSION_C)
     41          
     42          #include "mbedtls/version.h"
     43          
     44          #include <string.h>
     45          
     46          static const char *features[] = {
     47          #if defined(MBEDTLS_VERSION_FEATURES)
     48          #if defined(MBEDTLS_HAVE_ASM)
     49              "MBEDTLS_HAVE_ASM",
     50          #endif /* MBEDTLS_HAVE_ASM */
     51          #if defined(MBEDTLS_NO_UDBL_DIVISION)
     52              "MBEDTLS_NO_UDBL_DIVISION",
     53          #endif /* MBEDTLS_NO_UDBL_DIVISION */
     54          #if defined(MBEDTLS_HAVE_SSE2)
     55              "MBEDTLS_HAVE_SSE2",
     56          #endif /* MBEDTLS_HAVE_SSE2 */
     57          #if defined(MBEDTLS_HAVE_TIME)
     58              "MBEDTLS_HAVE_TIME",
     59          #endif /* MBEDTLS_HAVE_TIME */
     60          #if defined(MBEDTLS_HAVE_TIME_DATE)
     61              "MBEDTLS_HAVE_TIME_DATE",
     62          #endif /* MBEDTLS_HAVE_TIME_DATE */
     63          #if defined(MBEDTLS_PLATFORM_MEMORY)
     64              "MBEDTLS_PLATFORM_MEMORY",
     65          #endif /* MBEDTLS_PLATFORM_MEMORY */
     66          #if defined(MBEDTLS_PLATFORM_NO_STD_FUNCTIONS)
     67              "MBEDTLS_PLATFORM_NO_STD_FUNCTIONS",
     68          #endif /* MBEDTLS_PLATFORM_NO_STD_FUNCTIONS */
     69          #if defined(MBEDTLS_PLATFORM_EXIT_ALT)
     70              "MBEDTLS_PLATFORM_EXIT_ALT",
     71          #endif /* MBEDTLS_PLATFORM_EXIT_ALT */
     72          #if defined(MBEDTLS_PLATFORM_TIME_ALT)
     73              "MBEDTLS_PLATFORM_TIME_ALT",
     74          #endif /* MBEDTLS_PLATFORM_TIME_ALT */
     75          #if defined(MBEDTLS_PLATFORM_FPRINTF_ALT)
     76              "MBEDTLS_PLATFORM_FPRINTF_ALT",
     77          #endif /* MBEDTLS_PLATFORM_FPRINTF_ALT */
     78          #if defined(MBEDTLS_PLATFORM_PRINTF_ALT)
     79              "MBEDTLS_PLATFORM_PRINTF_ALT",
     80          #endif /* MBEDTLS_PLATFORM_PRINTF_ALT */
     81          #if defined(MBEDTLS_PLATFORM_SNPRINTF_ALT)
     82              "MBEDTLS_PLATFORM_SNPRINTF_ALT",
     83          #endif /* MBEDTLS_PLATFORM_SNPRINTF_ALT */
     84          #if defined(MBEDTLS_PLATFORM_NV_SEED_ALT)
     85              "MBEDTLS_PLATFORM_NV_SEED_ALT",
     86          #endif /* MBEDTLS_PLATFORM_NV_SEED_ALT */
     87          #if defined(MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT)
     88              "MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT",
     89          #endif /* MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT */
     90          #if defined(MBEDTLS_DEPRECATED_WARNING)
     91              "MBEDTLS_DEPRECATED_WARNING",
     92          #endif /* MBEDTLS_DEPRECATED_WARNING */
     93          #if defined(MBEDTLS_DEPRECATED_REMOVED)
     94              "MBEDTLS_DEPRECATED_REMOVED",
     95          #endif /* MBEDTLS_DEPRECATED_REMOVED */
     96          #if defined(MBEDTLS_TIMING_ALT)
     97              "MBEDTLS_TIMING_ALT",
     98          #endif /* MBEDTLS_TIMING_ALT */
     99          #if defined(MBEDTLS_AES_ALT)
    100              "MBEDTLS_AES_ALT",
    101          #endif /* MBEDTLS_AES_ALT */
    102          #if defined(MBEDTLS_ARC4_ALT)
    103              "MBEDTLS_ARC4_ALT",
    104          #endif /* MBEDTLS_ARC4_ALT */
    105          #if defined(MBEDTLS_BLOWFISH_ALT)
    106              "MBEDTLS_BLOWFISH_ALT",
    107          #endif /* MBEDTLS_BLOWFISH_ALT */
    108          #if defined(MBEDTLS_CAMELLIA_ALT)
    109              "MBEDTLS_CAMELLIA_ALT",
    110          #endif /* MBEDTLS_CAMELLIA_ALT */
    111          #if defined(MBEDTLS_CCM_ALT)
    112              "MBEDTLS_CCM_ALT",
    113          #endif /* MBEDTLS_CCM_ALT */
    114          #if defined(MBEDTLS_CMAC_ALT)
    115              "MBEDTLS_CMAC_ALT",
    116          #endif /* MBEDTLS_CMAC_ALT */
    117          #if defined(MBEDTLS_DES_ALT)
    118              "MBEDTLS_DES_ALT",
    119          #endif /* MBEDTLS_DES_ALT */
    120          #if defined(MBEDTLS_DHM_ALT)
    121              "MBEDTLS_DHM_ALT",
    122          #endif /* MBEDTLS_DHM_ALT */
    123          #if defined(MBEDTLS_ECJPAKE_ALT)
    124              "MBEDTLS_ECJPAKE_ALT",
    125          #endif /* MBEDTLS_ECJPAKE_ALT */
    126          #if defined(MBEDTLS_GCM_ALT)
    127              "MBEDTLS_GCM_ALT",
    128          #endif /* MBEDTLS_GCM_ALT */
    129          #if defined(MBEDTLS_MD2_ALT)
    130              "MBEDTLS_MD2_ALT",
    131          #endif /* MBEDTLS_MD2_ALT */
    132          #if defined(MBEDTLS_MD4_ALT)
    133              "MBEDTLS_MD4_ALT",
    134          #endif /* MBEDTLS_MD4_ALT */
    135          #if defined(MBEDTLS_MD5_ALT)
    136              "MBEDTLS_MD5_ALT",
    137          #endif /* MBEDTLS_MD5_ALT */
    138          #if defined(MBEDTLS_RIPEMD160_ALT)
    139              "MBEDTLS_RIPEMD160_ALT",
    140          #endif /* MBEDTLS_RIPEMD160_ALT */
    141          #if defined(MBEDTLS_RSA_ALT)
    142              "MBEDTLS_RSA_ALT",
    143          #endif /* MBEDTLS_RSA_ALT */
    144          #if defined(MBEDTLS_SHA1_ALT)
    145              "MBEDTLS_SHA1_ALT",
    146          #endif /* MBEDTLS_SHA1_ALT */
    147          #if defined(MBEDTLS_SHA256_ALT)
    148              "MBEDTLS_SHA256_ALT",
    149          #endif /* MBEDTLS_SHA256_ALT */
    150          #if defined(MBEDTLS_SHA512_ALT)
    151              "MBEDTLS_SHA512_ALT",
    152          #endif /* MBEDTLS_SHA512_ALT */
    153          #if defined(MBEDTLS_XTEA_ALT)
    154              "MBEDTLS_XTEA_ALT",
    155          #endif /* MBEDTLS_XTEA_ALT */
    156          #if defined(MBEDTLS_ECP_ALT)
    157              "MBEDTLS_ECP_ALT",
    158          #endif /* MBEDTLS_ECP_ALT */
    159          #if defined(MBEDTLS_MD2_PROCESS_ALT)
    160              "MBEDTLS_MD2_PROCESS_ALT",
    161          #endif /* MBEDTLS_MD2_PROCESS_ALT */
    162          #if defined(MBEDTLS_MD4_PROCESS_ALT)
    163              "MBEDTLS_MD4_PROCESS_ALT",
    164          #endif /* MBEDTLS_MD4_PROCESS_ALT */
    165          #if defined(MBEDTLS_MD5_PROCESS_ALT)
    166              "MBEDTLS_MD5_PROCESS_ALT",
    167          #endif /* MBEDTLS_MD5_PROCESS_ALT */
    168          #if defined(MBEDTLS_RIPEMD160_PROCESS_ALT)
    169              "MBEDTLS_RIPEMD160_PROCESS_ALT",
    170          #endif /* MBEDTLS_RIPEMD160_PROCESS_ALT */
    171          #if defined(MBEDTLS_SHA1_PROCESS_ALT)
    172              "MBEDTLS_SHA1_PROCESS_ALT",
    173          #endif /* MBEDTLS_SHA1_PROCESS_ALT */
    174          #if defined(MBEDTLS_SHA256_PROCESS_ALT)
    175              "MBEDTLS_SHA256_PROCESS_ALT",
    176          #endif /* MBEDTLS_SHA256_PROCESS_ALT */
    177          #if defined(MBEDTLS_SHA512_PROCESS_ALT)
    178              "MBEDTLS_SHA512_PROCESS_ALT",
    179          #endif /* MBEDTLS_SHA512_PROCESS_ALT */
    180          #if defined(MBEDTLS_DES_SETKEY_ALT)
    181              "MBEDTLS_DES_SETKEY_ALT",
    182          #endif /* MBEDTLS_DES_SETKEY_ALT */
    183          #if defined(MBEDTLS_DES_CRYPT_ECB_ALT)
    184              "MBEDTLS_DES_CRYPT_ECB_ALT",
    185          #endif /* MBEDTLS_DES_CRYPT_ECB_ALT */
    186          #if defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
    187              "MBEDTLS_DES3_CRYPT_ECB_ALT",
    188          #endif /* MBEDTLS_DES3_CRYPT_ECB_ALT */
    189          #if defined(MBEDTLS_AES_SETKEY_ENC_ALT)
    190              "MBEDTLS_AES_SETKEY_ENC_ALT",
    191          #endif /* MBEDTLS_AES_SETKEY_ENC_ALT */
    192          #if defined(MBEDTLS_AES_SETKEY_DEC_ALT)
    193              "MBEDTLS_AES_SETKEY_DEC_ALT",
    194          #endif /* MBEDTLS_AES_SETKEY_DEC_ALT */
    195          #if defined(MBEDTLS_AES_ENCRYPT_ALT)
    196              "MBEDTLS_AES_ENCRYPT_ALT",
    197          #endif /* MBEDTLS_AES_ENCRYPT_ALT */
    198          #if defined(MBEDTLS_AES_DECRYPT_ALT)
    199              "MBEDTLS_AES_DECRYPT_ALT",
    200          #endif /* MBEDTLS_AES_DECRYPT_ALT */
    201          #if defined(MBEDTLS_ECDH_GEN_PUBLIC_ALT)
    202              "MBEDTLS_ECDH_GEN_PUBLIC_ALT",
    203          #endif /* MBEDTLS_ECDH_GEN_PUBLIC_ALT */
    204          #if defined(MBEDTLS_ECDH_COMPUTE_SHARED_ALT)
    205              "MBEDTLS_ECDH_COMPUTE_SHARED_ALT",
    206          #endif /* MBEDTLS_ECDH_COMPUTE_SHARED_ALT */
    207          #if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    208              "MBEDTLS_ECDSA_VERIFY_ALT",
    209          #endif /* MBEDTLS_ECDSA_VERIFY_ALT */
    210          #if defined(MBEDTLS_ECDSA_SIGN_ALT)
    211              "MBEDTLS_ECDSA_SIGN_ALT",
    212          #endif /* MBEDTLS_ECDSA_SIGN_ALT */
    213          #if defined(MBEDTLS_ECDSA_GENKEY_ALT)
    214              "MBEDTLS_ECDSA_GENKEY_ALT",
    215          #endif /* MBEDTLS_ECDSA_GENKEY_ALT */
    216          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
    217              "MBEDTLS_ECP_INTERNAL_ALT",
    218          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
    219          #if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    220              "MBEDTLS_ECP_RANDOMIZE_JAC_ALT",
    221          #endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */
    222          #if defined(MBEDTLS_ECP_ADD_MIXED_ALT)
    223              "MBEDTLS_ECP_ADD_MIXED_ALT",
    224          #endif /* MBEDTLS_ECP_ADD_MIXED_ALT */
    225          #if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    226              "MBEDTLS_ECP_DOUBLE_JAC_ALT",
    227          #endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */
    228          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    229              "MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT",
    230          #endif /* MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT */
    231          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    232              "MBEDTLS_ECP_NORMALIZE_JAC_ALT",
    233          #endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */
    234          #if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    235              "MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT",
    236          #endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */
    237          #if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    238              "MBEDTLS_ECP_RANDOMIZE_MXZ_ALT",
    239          #endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */
    240          #if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    241              "MBEDTLS_ECP_NORMALIZE_MXZ_ALT",
    242          #endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */
    243          #if defined(MBEDTLS_TEST_NULL_ENTROPY)
    244              "MBEDTLS_TEST_NULL_ENTROPY",
    245          #endif /* MBEDTLS_TEST_NULL_ENTROPY */
    246          #if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)
    247              "MBEDTLS_ENTROPY_HARDWARE_ALT",
    248          #endif /* MBEDTLS_ENTROPY_HARDWARE_ALT */
    249          #if defined(MBEDTLS_AES_ROM_TABLES)
    250              "MBEDTLS_AES_ROM_TABLES",
    251          #endif /* MBEDTLS_AES_ROM_TABLES */
    252          #if defined(MBEDTLS_CAMELLIA_SMALL_MEMORY)
    253              "MBEDTLS_CAMELLIA_SMALL_MEMORY",
    254          #endif /* MBEDTLS_CAMELLIA_SMALL_MEMORY */
    255          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    256              "MBEDTLS_CIPHER_MODE_CBC",
    257          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    258          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    259              "MBEDTLS_CIPHER_MODE_CFB",
    260          #endif /* MBEDTLS_CIPHER_MODE_CFB */
    261          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    262              "MBEDTLS_CIPHER_MODE_CTR",
    263          #endif /* MBEDTLS_CIPHER_MODE_CTR */
    264          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    265              "MBEDTLS_CIPHER_NULL_CIPHER",
    266          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
    267          #if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    268              "MBEDTLS_CIPHER_PADDING_PKCS7",
    269          #endif /* MBEDTLS_CIPHER_PADDING_PKCS7 */
    270          #if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    271              "MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS",
    272          #endif /* MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS */
    273          #if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    274              "MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN",
    275          #endif /* MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN */
    276          #if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    277              "MBEDTLS_CIPHER_PADDING_ZEROS",
    278          #endif /* MBEDTLS_CIPHER_PADDING_ZEROS */
    279          #if defined(MBEDTLS_ENABLE_WEAK_CIPHERSUITES)
    280              "MBEDTLS_ENABLE_WEAK_CIPHERSUITES",
    281          #endif /* MBEDTLS_ENABLE_WEAK_CIPHERSUITES */
    282          #if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
    283              "MBEDTLS_REMOVE_ARC4_CIPHERSUITES",
    284          #endif /* MBEDTLS_REMOVE_ARC4_CIPHERSUITES */
    285          #if defined(MBEDTLS_REMOVE_3DES_CIPHERSUITES)
    286              "MBEDTLS_REMOVE_3DES_CIPHERSUITES",
    287          #endif /* MBEDTLS_REMOVE_3DES_CIPHERSUITES */
    288          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    289              "MBEDTLS_ECP_DP_SECP192R1_ENABLED",
    290          #endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */
    291          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    292              "MBEDTLS_ECP_DP_SECP224R1_ENABLED",
    293          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */
    294          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    295              "MBEDTLS_ECP_DP_SECP256R1_ENABLED",
    296          #endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */
    297          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    298              "MBEDTLS_ECP_DP_SECP384R1_ENABLED",
    299          #endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */
    300          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    301              "MBEDTLS_ECP_DP_SECP521R1_ENABLED",
    302          #endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */
    303          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    304              "MBEDTLS_ECP_DP_SECP192K1_ENABLED",
    305          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */
    306          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    307              "MBEDTLS_ECP_DP_SECP224K1_ENABLED",
    308          #endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */
    309          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    310              "MBEDTLS_ECP_DP_SECP256K1_ENABLED",
    311          #endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */
    312          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    313              "MBEDTLS_ECP_DP_BP256R1_ENABLED",
    314          #endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */
    315          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    316              "MBEDTLS_ECP_DP_BP384R1_ENABLED",
    317          #endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */
    318          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    319              "MBEDTLS_ECP_DP_BP512R1_ENABLED",
    320          #endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */
    321          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    322              "MBEDTLS_ECP_DP_CURVE25519_ENABLED",
    323          #endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
    324          #if defined(MBEDTLS_ECP_NIST_OPTIM)
    325              "MBEDTLS_ECP_NIST_OPTIM",
    326          #endif /* MBEDTLS_ECP_NIST_OPTIM */
    327          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    328              "MBEDTLS_ECDSA_DETERMINISTIC",
    329          #endif /* MBEDTLS_ECDSA_DETERMINISTIC */
    330          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    331              "MBEDTLS_KEY_EXCHANGE_PSK_ENABLED",
    332          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
    333          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
    334              "MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED",
    335          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
    336          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
    337              "MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED",
    338          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
    339          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    340              "MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED",
    341          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
    342          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    343              "MBEDTLS_KEY_EXCHANGE_RSA_ENABLED",
    344          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
    345          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
    346              "MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED",
    347          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
    348          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)
    349              "MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED",
    350          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */
    351          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    352              "MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED",
    353          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
    354          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    355              "MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED",
    356          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
    357          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)
    358              "MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED",
    359          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */
    360          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    361              "MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED",
    362          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    363          #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
    364              "MBEDTLS_PK_PARSE_EC_EXTENDED",
    365          #endif /* MBEDTLS_PK_PARSE_EC_EXTENDED */
    366          #if defined(MBEDTLS_ERROR_STRERROR_DUMMY)
    367              "MBEDTLS_ERROR_STRERROR_DUMMY",
    368          #endif /* MBEDTLS_ERROR_STRERROR_DUMMY */
    369          #if defined(MBEDTLS_GENPRIME)
    370              "MBEDTLS_GENPRIME",
    371          #endif /* MBEDTLS_GENPRIME */
    372          #if defined(MBEDTLS_FS_IO)
    373              "MBEDTLS_FS_IO",
    374          #endif /* MBEDTLS_FS_IO */
    375          #if defined(MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES)
    376              "MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES",
    377          #endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
    378          #if defined(MBEDTLS_NO_PLATFORM_ENTROPY)
    379              "MBEDTLS_NO_PLATFORM_ENTROPY",
    380          #endif /* MBEDTLS_NO_PLATFORM_ENTROPY */
    381          #if defined(MBEDTLS_ENTROPY_FORCE_SHA256)
    382              "MBEDTLS_ENTROPY_FORCE_SHA256",
    383          #endif /* MBEDTLS_ENTROPY_FORCE_SHA256 */
    384          #if defined(MBEDTLS_ENTROPY_NV_SEED)
    385              "MBEDTLS_ENTROPY_NV_SEED",
    386          #endif /* MBEDTLS_ENTROPY_NV_SEED */
    387          #if defined(MBEDTLS_MEMORY_DEBUG)
    388              "MBEDTLS_MEMORY_DEBUG",
    389          #endif /* MBEDTLS_MEMORY_DEBUG */
    390          #if defined(MBEDTLS_MEMORY_BACKTRACE)
    391              "MBEDTLS_MEMORY_BACKTRACE",
    392          #endif /* MBEDTLS_MEMORY_BACKTRACE */
    393          #if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)
    394              "MBEDTLS_PK_RSA_ALT_SUPPORT",
    395          #endif /* MBEDTLS_PK_RSA_ALT_SUPPORT */
    396          #if defined(MBEDTLS_PKCS1_V15)
    397              "MBEDTLS_PKCS1_V15",
    398          #endif /* MBEDTLS_PKCS1_V15 */
    399          #if defined(MBEDTLS_PKCS1_V21)
    400              "MBEDTLS_PKCS1_V21",
    401          #endif /* MBEDTLS_PKCS1_V21 */
    402          #if defined(MBEDTLS_RSA_NO_CRT)
    403              "MBEDTLS_RSA_NO_CRT",
    404          #endif /* MBEDTLS_RSA_NO_CRT */
    405          #if defined(MBEDTLS_SELF_TEST)
    406              "MBEDTLS_SELF_TEST",
    407          #endif /* MBEDTLS_SELF_TEST */
    408          #if defined(MBEDTLS_SHA256_SMALLER)
    409              "MBEDTLS_SHA256_SMALLER",
    410          #endif /* MBEDTLS_SHA256_SMALLER */
    411          #if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
    412              "MBEDTLS_SSL_ALL_ALERT_MESSAGES",
    413          #endif /* MBEDTLS_SSL_ALL_ALERT_MESSAGES */
    414          #if defined(MBEDTLS_SSL_DEBUG_ALL)
    415              "MBEDTLS_SSL_DEBUG_ALL",
    416          #endif /* MBEDTLS_SSL_DEBUG_ALL */
    417          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
    418              "MBEDTLS_SSL_ENCRYPT_THEN_MAC",
    419          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
    420          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
    421              "MBEDTLS_SSL_EXTENDED_MASTER_SECRET",
    422          #endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */
    423          #if defined(MBEDTLS_SSL_FALLBACK_SCSV)
    424              "MBEDTLS_SSL_FALLBACK_SCSV",
    425          #endif /* MBEDTLS_SSL_FALLBACK_SCSV */
    426          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
    427              "MBEDTLS_SSL_HW_RECORD_ACCEL",
    428          #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    429          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
    430              "MBEDTLS_SSL_CBC_RECORD_SPLITTING",
    431          #endif /* MBEDTLS_SSL_CBC_RECORD_SPLITTING */
    432          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    433              "MBEDTLS_SSL_RENEGOTIATION",
    434          #endif /* MBEDTLS_SSL_RENEGOTIATION */
    435          #if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)
    436              "MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO",
    437          #endif /* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */
    438          #if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)
    439              "MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE",
    440          #endif /* MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE */
    441          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    442              "MBEDTLS_SSL_MAX_FRAGMENT_LENGTH",
    443          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    444          #if defined(MBEDTLS_SSL_PROTO_SSL3)
    445              "MBEDTLS_SSL_PROTO_SSL3",
    446          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
    447          #if defined(MBEDTLS_SSL_PROTO_TLS1)
    448              "MBEDTLS_SSL_PROTO_TLS1",
    449          #endif /* MBEDTLS_SSL_PROTO_TLS1 */
    450          #if defined(MBEDTLS_SSL_PROTO_TLS1_1)
    451              "MBEDTLS_SSL_PROTO_TLS1_1",
    452          #endif /* MBEDTLS_SSL_PROTO_TLS1_1 */
    453          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    454              "MBEDTLS_SSL_PROTO_TLS1_2",
    455          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    456          #if defined(MBEDTLS_SSL_PROTO_DTLS)
    457              "MBEDTLS_SSL_PROTO_DTLS",
    458          #endif /* MBEDTLS_SSL_PROTO_DTLS */
    459          #if defined(MBEDTLS_SSL_ALPN)
    460              "MBEDTLS_SSL_ALPN",
    461          #endif /* MBEDTLS_SSL_ALPN */
    462          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
    463              "MBEDTLS_SSL_DTLS_ANTI_REPLAY",
    464          #endif /* MBEDTLS_SSL_DTLS_ANTI_REPLAY */
    465          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)
    466              "MBEDTLS_SSL_DTLS_HELLO_VERIFY",
    467          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */
    468          #if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE)
    469              "MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE",
    470          #endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE */
    471          #if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
    472              "MBEDTLS_SSL_DTLS_BADMAC_LIMIT",
    473          #endif /* MBEDTLS_SSL_DTLS_BADMAC_LIMIT */
    474          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
    475              "MBEDTLS_SSL_SESSION_TICKETS",
    476          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
    477          #if defined(MBEDTLS_SSL_EXPORT_KEYS)
    478              "MBEDTLS_SSL_EXPORT_KEYS",
    479          #endif /* MBEDTLS_SSL_EXPORT_KEYS */
    480          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    481              "MBEDTLS_SSL_SERVER_NAME_INDICATION",
    482          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
    483          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
    484              "MBEDTLS_SSL_TRUNCATED_HMAC",
    485          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
    486          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT)
    487              "MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT",
    488          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT */
    489          #if defined(MBEDTLS_THREADING_ALT)
    490              "MBEDTLS_THREADING_ALT",
    491          #endif /* MBEDTLS_THREADING_ALT */
    492          #if defined(MBEDTLS_THREADING_PTHREAD)
    493              "MBEDTLS_THREADING_PTHREAD",
    494          #endif /* MBEDTLS_THREADING_PTHREAD */
    495          #if defined(MBEDTLS_VERSION_FEATURES)
    496              "MBEDTLS_VERSION_FEATURES",
    497          #endif /* MBEDTLS_VERSION_FEATURES */
    498          #if defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    499              "MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3",
    500          #endif /* MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3 */
    501          #if defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
    502              "MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION",
    503          #endif /* MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION */
    504          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    505              "MBEDTLS_X509_CHECK_KEY_USAGE",
    506          #endif /* MBEDTLS_X509_CHECK_KEY_USAGE */
    507          #if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
    508              "MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE",
    509          #endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
    510          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    511              "MBEDTLS_X509_RSASSA_PSS_SUPPORT",
    512          #endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    513          #if defined(MBEDTLS_ZLIB_SUPPORT)
    514              "MBEDTLS_ZLIB_SUPPORT",
    515          #endif /* MBEDTLS_ZLIB_SUPPORT */
    516          #if defined(MBEDTLS_AESNI_C)
    517              "MBEDTLS_AESNI_C",
    518          #endif /* MBEDTLS_AESNI_C */
    519          #if defined(MBEDTLS_AES_C)
    520              "MBEDTLS_AES_C",
    521          #endif /* MBEDTLS_AES_C */
    522          #if defined(MBEDTLS_ARC4_C)
    523              "MBEDTLS_ARC4_C",
    524          #endif /* MBEDTLS_ARC4_C */
    525          #if defined(MBEDTLS_ASN1_PARSE_C)
    526              "MBEDTLS_ASN1_PARSE_C",
    527          #endif /* MBEDTLS_ASN1_PARSE_C */
    528          #if defined(MBEDTLS_ASN1_WRITE_C)
    529              "MBEDTLS_ASN1_WRITE_C",
    530          #endif /* MBEDTLS_ASN1_WRITE_C */
    531          #if defined(MBEDTLS_BASE64_C)
    532              "MBEDTLS_BASE64_C",
    533          #endif /* MBEDTLS_BASE64_C */
    534          #if defined(MBEDTLS_BIGNUM_C)
    535              "MBEDTLS_BIGNUM_C",
    536          #endif /* MBEDTLS_BIGNUM_C */
    537          #if defined(MBEDTLS_BLOWFISH_C)
    538              "MBEDTLS_BLOWFISH_C",
    539          #endif /* MBEDTLS_BLOWFISH_C */
    540          #if defined(MBEDTLS_CAMELLIA_C)
    541              "MBEDTLS_CAMELLIA_C",
    542          #endif /* MBEDTLS_CAMELLIA_C */
    543          #if defined(MBEDTLS_CCM_C)
    544              "MBEDTLS_CCM_C",
    545          #endif /* MBEDTLS_CCM_C */
    546          #if defined(MBEDTLS_CERTS_C)
    547              "MBEDTLS_CERTS_C",
    548          #endif /* MBEDTLS_CERTS_C */
    549          #if defined(MBEDTLS_CIPHER_C)
    550              "MBEDTLS_CIPHER_C",
    551          #endif /* MBEDTLS_CIPHER_C */
    552          #if defined(MBEDTLS_CMAC_C)
    553              "MBEDTLS_CMAC_C",
    554          #endif /* MBEDTLS_CMAC_C */
    555          #if defined(MBEDTLS_CTR_DRBG_C)
    556              "MBEDTLS_CTR_DRBG_C",
    557          #endif /* MBEDTLS_CTR_DRBG_C */
    558          #if defined(MBEDTLS_DEBUG_C)
    559              "MBEDTLS_DEBUG_C",
    560          #endif /* MBEDTLS_DEBUG_C */
    561          #if defined(MBEDTLS_DES_C)
    562              "MBEDTLS_DES_C",
    563          #endif /* MBEDTLS_DES_C */
    564          #if defined(MBEDTLS_DHM_C)
    565              "MBEDTLS_DHM_C",
    566          #endif /* MBEDTLS_DHM_C */
    567          #if defined(MBEDTLS_ECDH_C)
    568              "MBEDTLS_ECDH_C",
    569          #endif /* MBEDTLS_ECDH_C */
    570          #if defined(MBEDTLS_ECDSA_C)
    571              "MBEDTLS_ECDSA_C",
    572          #endif /* MBEDTLS_ECDSA_C */
    573          #if defined(MBEDTLS_ECJPAKE_C)
    574              "MBEDTLS_ECJPAKE_C",
    575          #endif /* MBEDTLS_ECJPAKE_C */
    576          #if defined(MBEDTLS_ECP_C)
    577              "MBEDTLS_ECP_C",
    578          #endif /* MBEDTLS_ECP_C */
    579          #if defined(MBEDTLS_ENTROPY_C)
    580              "MBEDTLS_ENTROPY_C",
    581          #endif /* MBEDTLS_ENTROPY_C */
    582          #if defined(MBEDTLS_ERROR_C)
    583              "MBEDTLS_ERROR_C",
    584          #endif /* MBEDTLS_ERROR_C */
    585          #if defined(MBEDTLS_GCM_C)
    586              "MBEDTLS_GCM_C",
    587          #endif /* MBEDTLS_GCM_C */
    588          #if defined(MBEDTLS_HAVEGE_C)
    589              "MBEDTLS_HAVEGE_C",
    590          #endif /* MBEDTLS_HAVEGE_C */
    591          #if defined(MBEDTLS_HMAC_DRBG_C)
    592              "MBEDTLS_HMAC_DRBG_C",
    593          #endif /* MBEDTLS_HMAC_DRBG_C */
    594          #if defined(MBEDTLS_MD_C)
    595              "MBEDTLS_MD_C",
    596          #endif /* MBEDTLS_MD_C */
    597          #if defined(MBEDTLS_MD2_C)
    598              "MBEDTLS_MD2_C",
    599          #endif /* MBEDTLS_MD2_C */
    600          #if defined(MBEDTLS_MD4_C)
    601              "MBEDTLS_MD4_C",
    602          #endif /* MBEDTLS_MD4_C */
    603          #if defined(MBEDTLS_MD5_C)
    604              "MBEDTLS_MD5_C",
    605          #endif /* MBEDTLS_MD5_C */
    606          #if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
    607              "MBEDTLS_MEMORY_BUFFER_ALLOC_C",
    608          #endif /* MBEDTLS_MEMORY_BUFFER_ALLOC_C */
    609          #if defined(MBEDTLS_NET_C)
    610              "MBEDTLS_NET_C",
    611          #endif /* MBEDTLS_NET_C */
    612          #if defined(MBEDTLS_OID_C)
    613              "MBEDTLS_OID_C",
    614          #endif /* MBEDTLS_OID_C */
    615          #if defined(MBEDTLS_PADLOCK_C)
    616              "MBEDTLS_PADLOCK_C",
    617          #endif /* MBEDTLS_PADLOCK_C */
    618          #if defined(MBEDTLS_PEM_PARSE_C)
    619              "MBEDTLS_PEM_PARSE_C",
    620          #endif /* MBEDTLS_PEM_PARSE_C */
    621          #if defined(MBEDTLS_PEM_WRITE_C)
    622              "MBEDTLS_PEM_WRITE_C",
    623          #endif /* MBEDTLS_PEM_WRITE_C */
    624          #if defined(MBEDTLS_PK_C)
    625              "MBEDTLS_PK_C",
    626          #endif /* MBEDTLS_PK_C */
    627          #if defined(MBEDTLS_PK_PARSE_C)
    628              "MBEDTLS_PK_PARSE_C",
    629          #endif /* MBEDTLS_PK_PARSE_C */
    630          #if defined(MBEDTLS_PK_WRITE_C)
    631              "MBEDTLS_PK_WRITE_C",
    632          #endif /* MBEDTLS_PK_WRITE_C */
    633          #if defined(MBEDTLS_PKCS5_C)
    634              "MBEDTLS_PKCS5_C",
    635          #endif /* MBEDTLS_PKCS5_C */
    636          #if defined(MBEDTLS_PKCS11_C)
    637              "MBEDTLS_PKCS11_C",
    638          #endif /* MBEDTLS_PKCS11_C */
    639          #if defined(MBEDTLS_PKCS12_C)
    640              "MBEDTLS_PKCS12_C",
    641          #endif /* MBEDTLS_PKCS12_C */
    642          #if defined(MBEDTLS_PLATFORM_C)
    643              "MBEDTLS_PLATFORM_C",
    644          #endif /* MBEDTLS_PLATFORM_C */
    645          #if defined(MBEDTLS_RIPEMD160_C)
    646              "MBEDTLS_RIPEMD160_C",
    647          #endif /* MBEDTLS_RIPEMD160_C */
    648          #if defined(MBEDTLS_RSA_C)
    649              "MBEDTLS_RSA_C",
    650          #endif /* MBEDTLS_RSA_C */
    651          #if defined(MBEDTLS_SHA1_C)
    652              "MBEDTLS_SHA1_C",
    653          #endif /* MBEDTLS_SHA1_C */
    654          #if defined(MBEDTLS_SHA256_C)
    655              "MBEDTLS_SHA256_C",
    656          #endif /* MBEDTLS_SHA256_C */
    657          #if defined(MBEDTLS_SHA512_C)
    658              "MBEDTLS_SHA512_C",
    659          #endif /* MBEDTLS_SHA512_C */
    660          #if defined(MBEDTLS_SSL_CACHE_C)
    661              "MBEDTLS_SSL_CACHE_C",
    662          #endif /* MBEDTLS_SSL_CACHE_C */
    663          #if defined(MBEDTLS_SSL_COOKIE_C)
    664              "MBEDTLS_SSL_COOKIE_C",
    665          #endif /* MBEDTLS_SSL_COOKIE_C */
    666          #if defined(MBEDTLS_SSL_TICKET_C)
    667              "MBEDTLS_SSL_TICKET_C",
    668          #endif /* MBEDTLS_SSL_TICKET_C */
    669          #if defined(MBEDTLS_SSL_CLI_C)
    670              "MBEDTLS_SSL_CLI_C",
    671          #endif /* MBEDTLS_SSL_CLI_C */
    672          #if defined(MBEDTLS_SSL_SRV_C)
    673              "MBEDTLS_SSL_SRV_C",
    674          #endif /* MBEDTLS_SSL_SRV_C */
    675          #if defined(MBEDTLS_SSL_TLS_C)
    676              "MBEDTLS_SSL_TLS_C",
    677          #endif /* MBEDTLS_SSL_TLS_C */
    678          #if defined(MBEDTLS_THREADING_C)
    679              "MBEDTLS_THREADING_C",
    680          #endif /* MBEDTLS_THREADING_C */
    681          #if defined(MBEDTLS_TIMING_C)
    682              "MBEDTLS_TIMING_C",
    683          #endif /* MBEDTLS_TIMING_C */
    684          #if defined(MBEDTLS_VERSION_C)
    685              "MBEDTLS_VERSION_C",
    686          #endif /* MBEDTLS_VERSION_C */
    687          #if defined(MBEDTLS_X509_USE_C)
    688              "MBEDTLS_X509_USE_C",
    689          #endif /* MBEDTLS_X509_USE_C */
    690          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    691              "MBEDTLS_X509_CRT_PARSE_C",
    692          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    693          #if defined(MBEDTLS_X509_CRL_PARSE_C)
    694              "MBEDTLS_X509_CRL_PARSE_C",
    695          #endif /* MBEDTLS_X509_CRL_PARSE_C */
    696          #if defined(MBEDTLS_X509_CSR_PARSE_C)
    697              "MBEDTLS_X509_CSR_PARSE_C",
    698          #endif /* MBEDTLS_X509_CSR_PARSE_C */
    699          #if defined(MBEDTLS_X509_CREATE_C)
    700              "MBEDTLS_X509_CREATE_C",
    701          #endif /* MBEDTLS_X509_CREATE_C */
    702          #if defined(MBEDTLS_X509_CRT_WRITE_C)
    703              "MBEDTLS_X509_CRT_WRITE_C",
    704          #endif /* MBEDTLS_X509_CRT_WRITE_C */
    705          #if defined(MBEDTLS_X509_CSR_WRITE_C)
    706              "MBEDTLS_X509_CSR_WRITE_C",
    707          #endif /* MBEDTLS_X509_CSR_WRITE_C */
    708          #if defined(MBEDTLS_XTEA_C)
    709              "MBEDTLS_XTEA_C",
    710          #endif /* MBEDTLS_XTEA_C */
    711          #endif /* MBEDTLS_VERSION_FEATURES */
    712              NULL
    713          };
    714          
    715          int mbedtls_version_check_feature( const char *feature )
    716          {
    717              const char **idx = features;
    718          
    719              if( *idx == NULL )
    720                  return( -2 );
    721          
    722              if( feature == NULL )
    723                  return( -1 );
    724          
    725              while( *idx != NULL )
    726              {
    727                  if( !strcmp( *idx, feature ) )
    728                      return( 0 );
    729                  idx++;
    730              }
    731              return( -1 );
    732          }
    733          
    734          #endif /* MBEDTLS_VERSION_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
