###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:29
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\oid.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWE83D.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\oid.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"oid.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\oid.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\oid.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\oid.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /**
     14           * \file oid.c
     15           *
     16           * \brief Object Identifier (OID) database
     17           *
     18           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     19           *  SPDX-License-Identifier: Apache-2.0
     20           *
     21           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     22           *  not use this file except in compliance with the License.
     23           *  You may obtain a copy of the License at
     24           *
     25           *  http://www.apache.org/licenses/LICENSE-2.0
     26           *
     27           *  Unless required by applicable law or agreed to in writing, software
     28           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     29           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     30           *  See the License for the specific language governing permissions and
     31           *  limitations under the License.
     32           *
     33           *  This file is part of mbed TLS (https://tls.mbed.org)
     34           */
     35          
     36          #if !defined(MBEDTLS_CONFIG_FILE)
     37          #include "mbedtls/config.h"
     38          #else
     39          #include MBEDTLS_CONFIG_FILE
     40          #endif
     41          
     42          #if defined(MBEDTLS_OID_C)
     43          
     44          #include "mbedtls/oid.h"
     45          #include "mbedtls/rsa.h"
     46          
     47          #include <stdio.h>
     48          #include <string.h>
     49          
     50          #if defined(MBEDTLS_PLATFORM_C)
     51          #include "mbedtls/platform.h"
     52          #else
     53          #define mbedtls_snprintf snprintf
     54          #endif
     55          
     56          #if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
     57          #include "mbedtls/x509.h"
     58          #endif
     59          
     60          /*
     61           * Macro to automatically add the size of #define'd OIDs
     62           */
     63          #define ADD_LEN(s)      s, MBEDTLS_OID_SIZE(s)
     64          
     65          /*
     66           * Macro to generate an internal function for oid_XXX_from_asn1() (used by
     67           * the other functions)
     68           */
     69          #define FN_OID_TYPED_FROM_ASN1( TYPE_T, NAME, LIST )                        \
     70          static const TYPE_T * oid_ ## NAME ## _from_asn1( const mbedtls_asn1_buf *oid )     \
     71          {                                                                           \
     72              const TYPE_T *p = LIST;                                                 \
     73              const mbedtls_oid_descriptor_t *cur = (const mbedtls_oid_descriptor_t *) p;             \
     74              if( p == NULL || oid == NULL ) return( NULL );                          \
     75              while( cur->asn1 != NULL ) {                                            \
     76                  if( cur->asn1_len == oid->len &&                                    \
     77                      memcmp( cur->asn1, oid->p, oid->len ) == 0 ) {                  \
     78                      return( p );                                                    \
     79                  }                                                                   \
     80                  p++;                                                                \
     81                  cur = (const mbedtls_oid_descriptor_t *) p;                                 \
     82              }                                                                       \
     83              return( NULL );                                                         \
     84          }
     85          
     86          /*
     87           * Macro to generate a function for retrieving a single attribute from the
     88           * descriptor of an mbedtls_oid_descriptor_t wrapper.
     89           */
     90          #define FN_OID_GET_DESCRIPTOR_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \
     91          int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \
     92          {                                                                       \
     93              const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \
     94              if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \
     95              *ATTR1 = data->descriptor.ATTR1;                                    \
     96              return( 0 );                                                        \
     97          }
     98          
     99          /*
    100           * Macro to generate a function for retrieving a single attribute from an
    101           * mbedtls_oid_descriptor_t wrapper.
    102           */
    103          #define FN_OID_GET_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \
    104          int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \
    105          {                                                                       \
    106              const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \
    107              if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \
    108              *ATTR1 = data->ATTR1;                                               \
    109              return( 0 );                                                        \
    110          }
    111          
    112          /*
    113           * Macro to generate a function for retrieving two attributes from an
    114           * mbedtls_oid_descriptor_t wrapper.
    115           */
    116          #define FN_OID_GET_ATTR2(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1,     \
    117                                   ATTR2_TYPE, ATTR2)                                 \
    118          int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1, ATTR2_TYPE * ATTR2 )  \
    119          {                                                                           \
    120              const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );            \
    121              if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );                \
    122              *ATTR1 = data->ATTR1;                                                   \
    123              *ATTR2 = data->ATTR2;                                                   \
    124              return( 0 );                                                            \
    125          }
    126          
    127          /*
    128           * Macro to generate a function for retrieving the OID based on a single
    129           * attribute from a mbedtls_oid_descriptor_t wrapper.
    130           */
    131          #define FN_OID_GET_OID_BY_ATTR1(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1)   \
    132          int FN_NAME( ATTR1_TYPE ATTR1, const char **oid, size_t *olen )             \
    133          {                                                                           \
    134              const TYPE_T *cur = LIST;                                               \
    135              while( cur->descriptor.asn1 != NULL ) {                                 \
    136                  if( cur->ATTR1 == ATTR1 ) {                                         \
    137                      *oid = cur->descriptor.asn1;                                    \
    138                      *olen = cur->descriptor.asn1_len;                               \
    139                      return( 0 );                                                    \
    140                  }                                                                   \
    141                  cur++;                                                              \
    142              }                                                                       \
    143              return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \
    144          }
    145          
    146          /*
    147           * Macro to generate a function for retrieving the OID based on two
    148           * attributes from a mbedtls_oid_descriptor_t wrapper.
    149           */
    150          #define FN_OID_GET_OID_BY_ATTR2(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1,   \
    151                                          ATTR2_TYPE, ATTR2)                          \
    152          int FN_NAME( ATTR1_TYPE ATTR1, ATTR2_TYPE ATTR2, const char **oid ,         \
    153                       size_t *olen )                                                 \
    154          {                                                                           \
    155              const TYPE_T *cur = LIST;                                               \
    156              while( cur->descriptor.asn1 != NULL ) {                                 \
    157                  if( cur->ATTR1 == ATTR1 && cur->ATTR2 == ATTR2 ) {                  \
    158                      *oid = cur->descriptor.asn1;                                    \
    159                      *olen = cur->descriptor.asn1_len;                               \
    160                      return( 0 );                                                    \
    161                  }                                                                   \
    162                  cur++;                                                              \
    163              }                                                                       \
    164              return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \
    165          }
    166          
    167          #if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
    168          /*
    169           * For X520 attribute types
    170           */
    171          typedef struct {
    172              mbedtls_oid_descriptor_t    descriptor;
    173              const char          *short_name;
    174          } oid_x520_attr_t;
    175          
    176          static const oid_x520_attr_t oid_x520_attr_type[] =
    177          {
    178              {
    179                  { ADD_LEN( MBEDTLS_OID_AT_CN ),          "id-at-commonName",               "Common Name" },
    180                  "CN",
    181              },
    182              {
    183                  { ADD_LEN( MBEDTLS_OID_AT_COUNTRY ),     "id-at-countryName",              "Country" },
    184                  "C",
    185              },
    186              {
    187                  { ADD_LEN( MBEDTLS_OID_AT_LOCALITY ),    "id-at-locality",                 "Locality" },
    188                  "L",
    189              },
    190              {
    191                  { ADD_LEN( MBEDTLS_OID_AT_STATE ),       "id-at-state",                    "State" },
    192                  "ST",
    193              },
    194              {
    195                  { ADD_LEN( MBEDTLS_OID_AT_ORGANIZATION ),"id-at-organizationName",         "Organization" },
    196                  "O",
    197              },
    198              {
    199                  { ADD_LEN( MBEDTLS_OID_AT_ORG_UNIT ),    "id-at-organizationalUnitName",   "Org Unit" },
    200                  "OU",
    201              },
    202              {
    203                  { ADD_LEN( MBEDTLS_OID_PKCS9_EMAIL ),    "emailAddress",                   "E-mail address" },
    204                  "emailAddress",
    205              },
    206              {
    207                  { ADD_LEN( MBEDTLS_OID_AT_SERIAL_NUMBER ),"id-at-serialNumber",            "Serial number" },
    208                  "serialNumber",
    209              },
    210              {
    211                  { ADD_LEN( MBEDTLS_OID_AT_POSTAL_ADDRESS ),"id-at-postalAddress",          "Postal address" },
    212                  "postalAddress",
    213              },
    214              {
    215                  { ADD_LEN( MBEDTLS_OID_AT_POSTAL_CODE ), "id-at-postalCode",               "Postal code" },
    216                  "postalCode",
    217              },
    218              {
    219                  { ADD_LEN( MBEDTLS_OID_AT_SUR_NAME ),    "id-at-surName",                  "Surname" },
    220                  "SN",
    221              },
    222              {
    223                  { ADD_LEN( MBEDTLS_OID_AT_GIVEN_NAME ),  "id-at-givenName",                "Given name" },
    224                  "GN",
    225              },
    226              {
    227                  { ADD_LEN( MBEDTLS_OID_AT_INITIALS ),    "id-at-initials",                 "Initials" },
    228                  "initials",
    229              },
    230              {
    231                  { ADD_LEN( MBEDTLS_OID_AT_GENERATION_QUALIFIER ), "id-at-generationQualifier", "Generation qualifier" },
    232                  "generationQualifier",
    233              },
    234              {
    235                  { ADD_LEN( MBEDTLS_OID_AT_TITLE ),       "id-at-title",                    "Title" },
    236                  "title",
    237              },
    238              {
    239                  { ADD_LEN( MBEDTLS_OID_AT_DN_QUALIFIER ),"id-at-dnQualifier",              "Distinguished Name qualifier" },
    240                  "dnQualifier",
    241              },
    242              {
    243                  { ADD_LEN( MBEDTLS_OID_AT_PSEUDONYM ),   "id-at-pseudonym",                "Pseudonym" },
    244                  "pseudonym",
    245              },
    246              {
    247                  { ADD_LEN( MBEDTLS_OID_DOMAIN_COMPONENT ), "id-domainComponent",           "Domain component" },
    248                  "DC",
    249              },
    250              {
    251                  { ADD_LEN( MBEDTLS_OID_AT_UNIQUE_IDENTIFIER ), "id-at-uniqueIdentifier",    "Unique Identifier" },
    252                  "uniqueIdentifier",
    253              },
    254              {
    255                  { NULL, 0, NULL, NULL },
    256                  NULL,
    257              }
    258          };
    259          
    260          FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
    261          FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
    262          
    263          /*
    264           * For X509 extensions
    265           */
    266          typedef struct {
    267              mbedtls_oid_descriptor_t    descriptor;
    268              int                 ext_type;
    269          } oid_x509_ext_t;
    270          
    271          static const oid_x509_ext_t oid_x509_ext[] =
    272          {
    273              {
    274                  { ADD_LEN( MBEDTLS_OID_BASIC_CONSTRAINTS ),    "id-ce-basicConstraints",   "Basic Constraints" },
    275                  MBEDTLS_X509_EXT_BASIC_CONSTRAINTS,
    276              },
    277              {
    278                  { ADD_LEN( MBEDTLS_OID_KEY_USAGE ),            "id-ce-keyUsage",           "Key Usage" },
    279                  MBEDTLS_X509_EXT_KEY_USAGE,
    280              },
    281              {
    282                  { ADD_LEN( MBEDTLS_OID_EXTENDED_KEY_USAGE ),   "id-ce-extKeyUsage",        "Extended Key Usage" },
    283                  MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE,
    284              },
    285              {
    286                  { ADD_LEN( MBEDTLS_OID_SUBJECT_ALT_NAME ),     "id-ce-subjectAltName",     "Subject Alt Name" },
    287                  MBEDTLS_X509_EXT_SUBJECT_ALT_NAME,
    288              },
    289              {
    290                  { ADD_LEN( MBEDTLS_OID_NS_CERT_TYPE ),         "id-netscape-certtype",     "Netscape Certificate Type" },
    291                  MBEDTLS_X509_EXT_NS_CERT_TYPE,
    292              },
    293              {
    294                  { NULL, 0, NULL, NULL },
    295                  0,
    296              },
    297          };
    298          
    299          FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
    300          FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
    301          
    302          static const mbedtls_oid_descriptor_t oid_ext_key_usage[] =
    303          {
    304              { ADD_LEN( MBEDTLS_OID_SERVER_AUTH ),      "id-kp-serverAuth",      "TLS Web Server Authentication" },
    305              { ADD_LEN( MBEDTLS_OID_CLIENT_AUTH ),      "id-kp-clientAuth",      "TLS Web Client Authentication" },
    306              { ADD_LEN( MBEDTLS_OID_CODE_SIGNING ),     "id-kp-codeSigning",     "Code Signing" },
    307              { ADD_LEN( MBEDTLS_OID_EMAIL_PROTECTION ), "id-kp-emailProtection", "E-mail Protection" },
    308              { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    309              { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    310              { NULL, 0, NULL, NULL },
    311          };
    312          
    313          FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
    314          FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
    315          #endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
    316          
    317          #if defined(MBEDTLS_MD_C)
    318          /*
    319           * For SignatureAlgorithmIdentifier
    320           */
    321          typedef struct {
    322              mbedtls_oid_descriptor_t    descriptor;
    323              mbedtls_md_type_t           md_alg;
    324              mbedtls_pk_type_t           pk_alg;
    325          } oid_sig_alg_t;
    326          
    327          static const oid_sig_alg_t oid_sig_alg[] =
    328          {
    329          #if defined(MBEDTLS_RSA_C)
    330          #if defined(MBEDTLS_MD2_C)
    331              {
    332                  { ADD_LEN( MBEDTLS_OID_PKCS1_MD2 ),        "md2WithRSAEncryption",     "RSA with MD2" },
    333                  MBEDTLS_MD_MD2,      MBEDTLS_PK_RSA,
    334              },
    335          #endif /* MBEDTLS_MD2_C */
    336          #if defined(MBEDTLS_MD4_C)
    337              {
    338                  { ADD_LEN( MBEDTLS_OID_PKCS1_MD4 ),        "md4WithRSAEncryption",     "RSA with MD4" },
    339                  MBEDTLS_MD_MD4,      MBEDTLS_PK_RSA,
    340              },
    341          #endif /* MBEDTLS_MD4_C */
    342          #if defined(MBEDTLS_MD5_C)
    343              {
    344                  { ADD_LEN( MBEDTLS_OID_PKCS1_MD5 ),        "md5WithRSAEncryption",     "RSA with MD5" },
    345                  MBEDTLS_MD_MD5,      MBEDTLS_PK_RSA,
    346              },
    347          #endif /* MBEDTLS_MD5_C */
    348          #if defined(MBEDTLS_SHA1_C)
    349              {
    350                  { ADD_LEN( MBEDTLS_OID_PKCS1_SHA1 ),       "sha-1WithRSAEncryption",   "RSA with SHA1" },
    351                  MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,
    352              },
    353          #endif /* MBEDTLS_SHA1_C */
    354          #if defined(MBEDTLS_SHA256_C)
    355              {
    356                  { ADD_LEN( MBEDTLS_OID_PKCS1_SHA224 ),     "sha224WithRSAEncryption",  "RSA with SHA-224" },
    357                  MBEDTLS_MD_SHA224,   MBEDTLS_PK_RSA,
    358              },
    359              {
    360                  { ADD_LEN( MBEDTLS_OID_PKCS1_SHA256 ),     "sha256WithRSAEncryption",  "RSA with SHA-256" },
    361                  MBEDTLS_MD_SHA256,   MBEDTLS_PK_RSA,
    362              },
    363          #endif /* MBEDTLS_SHA256_C */
    364          #if defined(MBEDTLS_SHA512_C)
    365              {
    366                  { ADD_LEN( MBEDTLS_OID_PKCS1_SHA384 ),     "sha384WithRSAEncryption",  "RSA with SHA-384" },
    367                  MBEDTLS_MD_SHA384,   MBEDTLS_PK_RSA,
    368              },
    369              {
    370                  { ADD_LEN( MBEDTLS_OID_PKCS1_SHA512 ),     "sha512WithRSAEncryption",  "RSA with SHA-512" },
    371                  MBEDTLS_MD_SHA512,   MBEDTLS_PK_RSA,
    372              },
    373          #endif /* MBEDTLS_SHA512_C */
    374          #if defined(MBEDTLS_SHA1_C)
    375              {
    376                  { ADD_LEN( MBEDTLS_OID_RSA_SHA_OBS ),      "sha-1WithRSAEncryption",   "RSA with SHA1" },
    377                  MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,
    378              },
    379          #endif /* MBEDTLS_SHA1_C */
    380          #endif /* MBEDTLS_RSA_C */
    381          #if defined(MBEDTLS_ECDSA_C)
    382          #if defined(MBEDTLS_SHA1_C)
    383              {
    384                  { ADD_LEN( MBEDTLS_OID_ECDSA_SHA1 ),       "ecdsa-with-SHA1",      "ECDSA with SHA1" },
    385                  MBEDTLS_MD_SHA1,     MBEDTLS_PK_ECDSA,
    386              },
    387          #endif /* MBEDTLS_SHA1_C */
    388          #if defined(MBEDTLS_SHA256_C)
    389              {
    390                  { ADD_LEN( MBEDTLS_OID_ECDSA_SHA224 ),     "ecdsa-with-SHA224",    "ECDSA with SHA224" },
    391                  MBEDTLS_MD_SHA224,   MBEDTLS_PK_ECDSA,
    392              },
    393              {
    394                  { ADD_LEN( MBEDTLS_OID_ECDSA_SHA256 ),     "ecdsa-with-SHA256",    "ECDSA with SHA256" },
    395                  MBEDTLS_MD_SHA256,   MBEDTLS_PK_ECDSA,
    396              },
    397          #endif /* MBEDTLS_SHA256_C */
    398          #if defined(MBEDTLS_SHA512_C)
    399              {
    400                  { ADD_LEN( MBEDTLS_OID_ECDSA_SHA384 ),     "ecdsa-with-SHA384",    "ECDSA with SHA384" },
    401                  MBEDTLS_MD_SHA384,   MBEDTLS_PK_ECDSA,
    402              },
    403              {
    404                  { ADD_LEN( MBEDTLS_OID_ECDSA_SHA512 ),     "ecdsa-with-SHA512",    "ECDSA with SHA512" },
    405                  MBEDTLS_MD_SHA512,   MBEDTLS_PK_ECDSA,
    406              },
    407          #endif /* MBEDTLS_SHA512_C */
    408          #endif /* MBEDTLS_ECDSA_C */
    409          #if defined(MBEDTLS_RSA_C)
    410              {
    411                  { ADD_LEN( MBEDTLS_OID_RSASSA_PSS ),        "RSASSA-PSS",           "RSASSA-PSS" },
    412                  MBEDTLS_MD_NONE,     MBEDTLS_PK_RSASSA_PSS,
    413              },
    414          #endif /* MBEDTLS_RSA_C */
    415              {
    416                  { NULL, 0, NULL, NULL },
    417                  MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    418              },
    419          };
    420          
    421          FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
    422          FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
    423          FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
    424          FN_OID_GET_OID_BY_ATTR2(mbedtls_oid_get_oid_by_sig_alg, oid_sig_alg_t, oid_sig_alg, mbedtls_pk_type_t, pk_alg, mbedtls_md_type_t, md_alg)
    425          #endif /* MBEDTLS_MD_C */
    426          
    427          /*
    428           * For PublicKeyInfo (PKCS1, RFC 5480)
    429           */
    430          typedef struct {
    431              mbedtls_oid_descriptor_t    descriptor;
    432              mbedtls_pk_type_t           pk_alg;
    433          } oid_pk_alg_t;
    434          
    435          static const oid_pk_alg_t oid_pk_alg[] =
    436          {
    437              {
    438                  { ADD_LEN( MBEDTLS_OID_PKCS1_RSA ),      "rsaEncryption",   "RSA" },
    439                  MBEDTLS_PK_RSA,
    440              },
    441              {
    442                  { ADD_LEN( MBEDTLS_OID_EC_ALG_UNRESTRICTED ),  "id-ecPublicKey",   "Generic EC key" },
    443                  MBEDTLS_PK_ECKEY,
    444              },
    445              {
    446                  { ADD_LEN( MBEDTLS_OID_EC_ALG_ECDH ),          "id-ecDH",          "EC key for ECDH" },
    447                  MBEDTLS_PK_ECKEY_DH,
    448              },
    449              {
    450                  { NULL, 0, NULL, NULL },
    451                  MBEDTLS_PK_NONE,
    452              },
    453          };
    454          
    455          FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
    456          FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
    457          FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_pk_alg, oid_pk_alg_t, oid_pk_alg, mbedtls_pk_type_t, pk_alg)
    458          
    459          #if defined(MBEDTLS_ECP_C)
    460          /*
    461           * For namedCurve (RFC 5480)
    462           */
    463          typedef struct {
    464              mbedtls_oid_descriptor_t    descriptor;
    465              mbedtls_ecp_group_id        grp_id;
    466          } oid_ecp_grp_t;
    467          
    468          static const oid_ecp_grp_t oid_ecp_grp[] =
    469          {
    470          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    471              {
    472                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192R1 ), "secp192r1",    "secp192r1" },
    473                  MBEDTLS_ECP_DP_SECP192R1,
    474              },
    475          #endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */
    476          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    477              {
    478                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224R1 ), "secp224r1",    "secp224r1" },
    479                  MBEDTLS_ECP_DP_SECP224R1,
    480              },
    481          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */
    482          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    483              {
    484                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256R1 ), "secp256r1",    "secp256r1" },
    485                  MBEDTLS_ECP_DP_SECP256R1,
    486              },
    487          #endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */
    488          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    489              {
    490                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP384R1 ), "secp384r1",    "secp384r1" },
    491                  MBEDTLS_ECP_DP_SECP384R1,
    492              },
    493          #endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */
    494          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    495              {
    496                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP521R1 ), "secp521r1",    "secp521r1" },
    497                  MBEDTLS_ECP_DP_SECP521R1,
    498              },
    499          #endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */
    500          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    501              {
    502                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192K1 ), "secp192k1",    "secp192k1" },
    503                  MBEDTLS_ECP_DP_SECP192K1,
    504              },
    505          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */
    506          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    507              {
    508                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224K1 ), "secp224k1",    "secp224k1" },
    509                  MBEDTLS_ECP_DP_SECP224K1,
    510              },
    511          #endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */
    512          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    513              {
    514                  { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256K1 ), "secp256k1",    "secp256k1" },
    515                  MBEDTLS_ECP_DP_SECP256K1,
    516              },
    517          #endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */
    518          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    519              {
    520                  { ADD_LEN( MBEDTLS_OID_EC_GRP_BP256R1 ),   "brainpoolP256r1","brainpool256r1" },
    521                  MBEDTLS_ECP_DP_BP256R1,
    522              },
    523          #endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */
    524          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    525              {
    526                  { ADD_LEN( MBEDTLS_OID_EC_GRP_BP384R1 ),   "brainpoolP384r1","brainpool384r1" },
    527                  MBEDTLS_ECP_DP_BP384R1,
    528              },
    529          #endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */
    530          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    531              {
    532                  { ADD_LEN( MBEDTLS_OID_EC_GRP_BP512R1 ),   "brainpoolP512r1","brainpool512r1" },
    533                  MBEDTLS_ECP_DP_BP512R1,
    534              },
    535          #endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */
    536              {
    537                  { NULL, 0, NULL, NULL },
    538                  MBEDTLS_ECP_DP_NONE,
    539              },
    540          };
    541          
    542          FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
    543          FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
    544          FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)
    545          #endif /* MBEDTLS_ECP_C */
    546          
    547          #if defined(MBEDTLS_CIPHER_C)
    548          /*
    549           * For PKCS#5 PBES2 encryption algorithm
    550           */
    551          typedef struct {
    552              mbedtls_oid_descriptor_t    descriptor;
    553              mbedtls_cipher_type_t       cipher_alg;
    554          } oid_cipher_alg_t;
    555          
    556          static const oid_cipher_alg_t oid_cipher_alg[] =
    557          {
    558              {
    559                  { ADD_LEN( MBEDTLS_OID_DES_CBC ),              "desCBC",       "DES-CBC" },
    560                  MBEDTLS_CIPHER_DES_CBC,
    561              },
    562              {
    563                  { ADD_LEN( MBEDTLS_OID_DES_EDE3_CBC ),         "des-ede3-cbc", "DES-EDE3-CBC" },
    564                  MBEDTLS_CIPHER_DES_EDE3_CBC,
    565              },
    566              {
    567                  { NULL, 0, NULL, NULL },
    568                  MBEDTLS_CIPHER_NONE,
    569              },
    570          };
    571          
    572          FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
    573          FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
    574          #endif /* MBEDTLS_CIPHER_C */
    575          
    576          #if defined(MBEDTLS_MD_C)
    577          /*
    578           * For digestAlgorithm
    579           */
    580          typedef struct {
    581              mbedtls_oid_descriptor_t    descriptor;
    582              mbedtls_md_type_t           md_alg;
    583          } oid_md_alg_t;
    584          
    585          static const oid_md_alg_t oid_md_alg[] =
    586          {
    587          #if defined(MBEDTLS_MD2_C)
    588              {
    589                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD2 ),       "id-md2",       "MD2" },
    590                  MBEDTLS_MD_MD2,
    591              },
    592          #endif /* MBEDTLS_MD2_C */
    593          #if defined(MBEDTLS_MD4_C)
    594              {
    595                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD4 ),       "id-md4",       "MD4" },
    596                  MBEDTLS_MD_MD4,
    597              },
    598          #endif /* MBEDTLS_MD4_C */
    599          #if defined(MBEDTLS_MD5_C)
    600              {
    601                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD5 ),       "id-md5",       "MD5" },
    602                  MBEDTLS_MD_MD5,
    603              },
    604          #endif /* MBEDTLS_MD5_C */
    605          #if defined(MBEDTLS_SHA1_C)
    606              {
    607                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA1 ),      "id-sha1",      "SHA-1" },
    608                  MBEDTLS_MD_SHA1,
    609              },
    610          #endif /* MBEDTLS_SHA1_C */
    611          #if defined(MBEDTLS_SHA256_C)
    612              {
    613                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA224 ),    "id-sha224",    "SHA-224" },
    614                  MBEDTLS_MD_SHA224,
    615              },
    616              {
    617                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA256 ),    "id-sha256",    "SHA-256" },
    618                  MBEDTLS_MD_SHA256,
    619              },
    620          #endif /* MBEDTLS_SHA256_C */
    621          #if defined(MBEDTLS_SHA512_C)
    622              {
    623                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA384 ),    "id-sha384",    "SHA-384" },
    624                  MBEDTLS_MD_SHA384,
    625              },
    626              {
    627                  { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA512 ),    "id-sha512",    "SHA-512" },
    628                  MBEDTLS_MD_SHA512,
    629              },
    630          #endif /* MBEDTLS_SHA512_C */
    631              {
    632                  { NULL, 0, NULL, NULL },
    633                  MBEDTLS_MD_NONE,
    634              },
    635          };
    636          
    637          FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
    638          FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
    639          FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
    640          
    641          /*
    642           * For HMAC digestAlgorithm
    643           */
    644          typedef struct {
    645              mbedtls_oid_descriptor_t    descriptor;
    646              mbedtls_md_type_t           md_hmac;
    647          } oid_md_hmac_t;
    648          
    649          static const oid_md_hmac_t oid_md_hmac[] =
    650          {
    651          #if defined(MBEDTLS_SHA1_C)
    652              {
    653                  { ADD_LEN( MBEDTLS_OID_HMAC_SHA1 ),      "hmacSHA1",      "HMAC-SHA-1" },
    654                  MBEDTLS_MD_SHA1,
    655              },
    656          #endif /* MBEDTLS_SHA1_C */
    657          #if defined(MBEDTLS_SHA256_C)
    658              {
    659                  { ADD_LEN( MBEDTLS_OID_HMAC_SHA224 ),    "hmacSHA224",    "HMAC-SHA-224" },
    660                  MBEDTLS_MD_SHA224,
    661              },
    662              {
    663                  { ADD_LEN( MBEDTLS_OID_HMAC_SHA256 ),    "hmacSHA256",    "HMAC-SHA-256" },
    664                  MBEDTLS_MD_SHA256,
    665              },
    666          #endif /* MBEDTLS_SHA256_C */
    667          #if defined(MBEDTLS_SHA512_C)
    668              {
    669                  { ADD_LEN( MBEDTLS_OID_HMAC_SHA384 ),    "hmacSHA384",    "HMAC-SHA-384" },
    670                  MBEDTLS_MD_SHA384,
    671              },
    672              {
    673                  { ADD_LEN( MBEDTLS_OID_HMAC_SHA512 ),    "hmacSHA512",    "HMAC-SHA-512" },
    674                  MBEDTLS_MD_SHA512,
    675              },
    676          #endif /* MBEDTLS_SHA512_C */
    677              {
    678                  { NULL, 0, NULL, NULL },
    679                  MBEDTLS_MD_NONE,
    680              },
    681          };
    682          
    683          FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
    684          FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
    685          #endif /* MBEDTLS_MD_C */
    686          
    687          #if defined(MBEDTLS_PKCS12_C)
    688          /*
    689           * For PKCS#12 PBEs
    690           */
    691          typedef struct {
    692              mbedtls_oid_descriptor_t    descriptor;
    693              mbedtls_md_type_t           md_alg;
    694              mbedtls_cipher_type_t       cipher_alg;
    695          } oid_pkcs12_pbe_alg_t;
    696          
    697          static const oid_pkcs12_pbe_alg_t oid_pkcs12_pbe_alg[] =
    698          {
    699              {
    700                  { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC ), "pbeWithSHAAnd3-KeyTripleDES-CBC", "PBE with SHA1 and 3-Key 3DES" },
    701                  MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE3_CBC,
    702              },
    703              {
    704                  { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC ), "pbeWithSHAAnd2-KeyTripleDES-CBC", "PBE with SHA1 and 2-Key 3DES" },
    705                  MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE_CBC,
    706              },
    707              {
    708                  { NULL, 0, NULL, NULL },
    709                  MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    710              },
    711          };
    712          
    713          FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
    714          FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
    715          #endif /* MBEDTLS_PKCS12_C */
    716          
    717          #define OID_SAFE_SNPRINTF                               \
    718              do {                                                \
    719                  if( ret < 0 || (size_t) ret >= n )              \
    720                      return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );    \
    721                                                                  \
    722                  n -= (size_t) ret;                              \
    723                  p += (size_t) ret;                              \
    724              } while( 0 )
    725          
    726          /* Return the x.y.z.... style numeric string for the given OID */
    727          int mbedtls_oid_get_numeric_string( char *buf, size_t size,
    728                                      const mbedtls_asn1_buf *oid )
    729          {
    730              int ret;
    731              size_t i, n;
    732              unsigned int value;
    733              char *p;
    734          
    735              p = buf;
    736              n = size;
    737          
    738              /* First byte contains first two dots */
    739              if( oid->len > 0 )
    740              {
    741                  ret = mbedtls_snprintf( p, n, "%d.%d", oid->p[0] / 40, oid->p[0] % 40 );
    742                  OID_SAFE_SNPRINTF;
    743              }
    744          
    745              value = 0;
    746              for( i = 1; i < oid->len; i++ )
    747              {
    748                  /* Prevent overflow in value. */
    749                  if( ( ( value << 7 ) >> 7 ) != value )
    750                      return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );
    751          
    752                  value <<= 7;
    753                  value += oid->p[i] & 0x7F;
    754          
    755                  if( !( oid->p[i] & 0x80 ) )
    756                  {
    757                      /* Last byte */
    758                      ret = mbedtls_snprintf( p, n, ".%d", value );
    759                      OID_SAFE_SNPRINTF;
    760                      value = 0;
    761                  }
    762              }
    763          
    764              return( (int) ( size - n ) );
    765          }
    766          
    767          #endif /* MBEDTLS_OID_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
