###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:20:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\cli\zcl-cli.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW7987.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\cli\zcl-cli.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"zcl-cli.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0
#        -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\cli\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\zcl-cli.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\zcl-cli.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\cli\zcl-cli.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief CLI commands for sending various messages.
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          // common include file
     19          #include "app/framework/util/common.h"
     20          
     21          #include "app/framework/util/af-main.h"
     22          #include "app/framework/util/attribute-storage.h"
     23          #include "app/framework/util/service-discovery.h"
     24          
     25          #include "app/util/serial/command-interpreter2.h"
     26          #include "app/framework/cli/security-cli.h"
     27          
     28          #include "app/util/common/library.h"
     29          
     30          #ifdef EZSP_HOST
     31          // the EM260 host needs to include the config file
     32            #include "app/framework/util/config.h"
     33          #endif
     34          
     35          //------------------------------------------------------------------------------
     36          // Globals
     37          
     38          // EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH is set in config.h
     39          #define APP_ZCL_BUFFER_SIZE EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH
     40          
     41          // The command-interpreter doesn't handle individual arguments longer than
     42          // 255 bytes (since it is uses a 1-byte max-length value
     43          #define APP_ZCL_BUFFER_SIZE_CLI \
     44            (APP_ZCL_BUFFER_SIZE > 255    \
     45             ? 255                        \
     46             : APP_ZCL_BUFFER_SIZE)
     47          

   \                                 In section .bss, align 4
     48          uint8_t appZclBuffer[APP_ZCL_BUFFER_SIZE];
   \                     appZclBuffer:
   \        0x0                      DS8 84

   \                                 In section .bss, align 2
     49          uint16_t appZclBufferLen;
   \                     appZclBufferLen:
   \        0x0                      DS8 2

   \                                 In section .bss, align 1
     50          bool zclCmdIsBuilt = false;
   \                     zclCmdIsBuilt:
   \        0x0                      DS8 1
     51          

   \                                 In section .bss, align 2
     52          uint16_t mfgSpecificId = EMBER_AF_NULL_MANUFACTURER_CODE;
   \                     mfgSpecificId:
   \        0x0                      DS8 2

   \                                 In section .bss, align 1
     53          uint8_t disableDefaultResponse = 0;
   \                     disableDefaultResponse:
   \        0x0                      DS8 1

   \                                 In section .bss, align 4
     54          EmberApsFrame globalApsFrame;
   \                     globalApsFrame:
   \        0x0                      DS8 12
     55          

   \                                 In section .bss, align 1
     56          static bool useNextSequence = false;
   \                     useNextSequence:
   \        0x0                      DS8 1
     57          
     58          // a variable containing the number of messages sent from the CLI since the
     59          // last reset
     60          
     61          #ifdef EMBER_AF_ENABLE_STATISTICS
     62          uint32_t haZclCliNumPktsSent = 0;
     63          #endif
     64          
     65          // flag to keep track of the fact that we just sent a read attr for time and
     66          // we should set our time to the result of the read attr response
     67          extern bool emAfSyncingTime;
     68          
     69          // The direction of global commands, changeable via the "zcl global direction"
     70          // command.  By default, send from client to server, which is how the CLI always
     71          // functioned in the past.

   \                                 In section .bss, align 1
     72          static uint8_t zclGlobalDirection = ZCL_FRAME_CONTROL_CLIENT_TO_SERVER;
   \                     zclGlobalDirection:
   \        0x0                      DS8 1
     73          

   \                                 In section .bss, align 1
     74          static bool useMulticastBinding = false;
   \                     useMulticastBinding:
   \        0x0                      DS8 1
     75          
     76          // ******************************************************
     77          // zcl command functions
     78          // ******************************************************
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void emAfApsFrameEndpointSetup(uint8_t srcEndpoint,
     81                                         uint8_t dstEndpoint)
     82          {
   \                     emAfApsFrameEndpointSetup: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x460C             MOV      R4,R1
     83            globalApsFrame.sourceEndpoint = (srcEndpoint == 0
     84                                             ? emberAfPrimaryEndpointForCurrentNetworkIndex()
     85                                             : srcEndpoint);
   \        0x4   0x0001             MOVS     R1,R0
   \        0x6   0xBF08             IT       EQ 
   \        0x8   0x....'....        BLEQ     emberAfPrimaryEndpointForCurrentNetworkIndex
   \        0xC   0x....'....        LDR.W    R1,??DataTable35
   \       0x10   0x7108             STRB     R0,[R1, #+4]
     86            globalApsFrame.destinationEndpoint = dstEndpoint;
   \       0x12   0x714C             STRB     R4,[R1, #+5]
     87          }
   \       0x14   0xBD10             POP      {R4,PC}          ;; return
     88          
     89          // used by zclBufferSetup and emAfCliRawCommand

   \                                 In section .text, align 2, keep-with-next
     90          void emAfApsFrameClusterIdSetup(uint16_t clusterId)
     91          {
     92            // setup the global options and cluster ID
     93            // send command will setup profile ID and endpoints.
     94            globalApsFrame.options = EMBER_AF_DEFAULT_APS_OPTIONS;
   \                     emAfApsFrameClusterIdSetup: (+1)
   \        0x0   0x....'....        LDR.W    R1,??DataTable35
   \        0x4   0xF44F 0x528A      MOV      R2,#+4416
   \        0x8   0x80CA             STRH     R2,[R1, #+6]
     95            globalApsFrame.clusterId = clusterId;
   \        0xA   0x8048             STRH     R0,[R1, #+2]
     96          }
   \        0xC   0x4770             BX       LR               ;; return
     97          
     98          // used by zclCommand and emAfCliRawCommand

   \                                 In section .text, align 2, keep-with-next
     99          void cliBufferPrint(void)
    100          {
   \                     cliBufferPrint: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    101            uint8_t cmdIndex = (appZclBuffer[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) ? 4 : 2;
   \        0x2   0x....'....        LDR.W    R4,??DataTable35_1
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
    102            zclCmdIsBuilt = true;
   \        0x8   0x....'....        LDR.W    R2,??DataTable35_2
    103            emberAfGuaranteedPrintln("Msg: clus 0x%2x, cmd 0x%x, len %d",
    104                                     globalApsFrame.clusterId,
    105                                     appZclBuffer[cmdIndex],
    106                                     appZclBufferLen);
   \        0xC   0x....'....        LDR.W    R6,??DataTable35_3
   \       0x10   0x0741             LSLS     R1,R0,#+29
   \       0x12   0x....'....        LDR.W    R7,??DataTable35
   \       0x16   0xF64F 0x75FF      MOVW     R5,#+65535
   \       0x1A   0xBF4C             ITE      MI 
   \       0x1C   0x2004             MOVMI    R0,#+4
   \       0x1E   0x2002             MOVPL    R0,#+2
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x7011             STRB     R1,[R2, #+0]
   \       0x24   0x8831             LDRH     R1,[R6, #+0]
   \       0x26   0x887A             LDRH     R2,[R7, #+2]
   \       0x28   0x9100             STR      R1,[SP, #+0]
   \       0x2A   0x5C23             LDRB     R3,[R4, R0]
   \       0x2C   0x....'....        LDR.W    R1,??DataTable35_4
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       emberAfPrintln
    107            emberAfGuaranteedPrint("buffer: ", appZclBufferLen);
   \       0x36   0x8832             LDRH     R2,[R6, #+0]
   \       0x38   0x....'....        LDR.W    R1,??DataTable35_5
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       emberAfPrint
    108            emberAfGuaranteedPrintBuffer(appZclBuffer, appZclBufferLen, true);
   \       0x42   0x8832             LDRH     R2,[R6, #+0]
   \       0x44   0x2301             MOVS     R3,#+1
   \       0x46   0x4621             MOV      R1,R4
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       emberAfPrintBuffer
    109            emberAfGuaranteedPrintln("");
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        LDR.W    R1,??DataTable35_6
   \       0x54   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \       0x58   0x....'....        B.W      emberAfPrintln
    110          }
    111          
    112          // for sending raw (user defined) ZCL messages
    113          // raw <cluster> <data bytes>
    114          // note: limited to 0xff bytes in length
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void emAfCliRawCommand(void)
    117          {
   \                     emAfCliRawCommand: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    118            uint8_t seqNumIndex;
    119            uint8_t length;
    120            emAfApsFrameClusterIdSetup((uint16_t)emberUnsignedCommandArgument(0));
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_14: (+1)
   \        0x6   0xB280             UXTH     R0,R0
   \        0x8   0x....'....        BL       emAfApsFrameClusterIdSetup
    121            emberCopyStringArgument(1, appZclBuffer, APP_ZCL_BUFFER_SIZE_CLI, false);
   \        0xC   0x....'....        LDR.W    R4,??DataTable35_1
   \       0x10   0x2300             MOVS     R3,#+0
   \       0x12   0x2252             MOVS     R2,#+82
   \       0x14   0x4621             MOV      R1,R4
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x....'....        BL       emberCopyStringArgument
    122            seqNumIndex = (appZclBuffer[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) ? 3 : 1;
   \       0x1C   0x7820             LDRB     R0,[R4, #+0]
   \       0x1E   0x0741             LSLS     R1,R0,#+29
    123            if (useNextSequence) {
   \       0x20   0x....'....        LDR.W    R1,??DataTable35_7
   \       0x24   0x7808             LDRB     R0,[R1, #+0]
   \       0x26   0xBF4C             ITE      MI 
   \       0x28   0x2503             MOVMI    R5,#+3
   \       0x2A   0x2501             MOVPL    R5,#+1
   \       0x2C   0xB110             CBZ.N    R0,??emAfCliRawCommand_0
    124              appZclBuffer[seqNumIndex] = emberAfNextSequence();
   \       0x2E   0x....'....        BL       emberAfNextSequence
   \       0x32   0x5560             STRB     R0,[R4, R5]
    125            }
    126            emberStringCommandArgument(1, &length);
   \                     ??emAfCliRawCommand_0: (+1)
   \       0x34   0x4669             MOV      R1,SP
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0x....'....        BL       emberStringCommandArgument
    127            appZclBufferLen = length;
   \       0x3C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x40   0x....'....        LDR.W    R1,??DataTable35_3
   \       0x44   0x8008             STRH     R0,[R1, #+0]
    128            cliBufferPrint();
   \       0x46   0x....'....        BL       cliBufferPrint
    129          }
   \       0x4A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \                     ??Subroutine6_0: (+1)
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....'....        B.W      emberUnsignedCommandArgument
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void zclBufferSetup(uint8_t frameType, uint16_t clusterId, uint8_t commandId)
    132          {
   \                     zclBufferSetup: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    133            uint8_t index = 0;
    134            emAfApsFrameClusterIdSetup(clusterId);
   \        0x6   0x4608             MOV      R0,R1
   \        0x8   0x....'....        BL       emAfApsFrameClusterIdSetup
    135            appZclBuffer[index++] = (frameType
    136                                     | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    137                                     | (mfgSpecificId != EMBER_AF_NULL_MANUFACTURER_CODE
    138                                        ? ZCL_MANUFACTURER_SPECIFIC_MASK
    139                                        : 0)
    140                                     | (disableDefaultResponse
    141                                        ? ZCL_DISABLE_DEFAULT_RESPONSE_MASK
    142                                        : 0));
   \        0xC   0x....'....        LDR.W    R0,??DataTable35_8
   \       0x10   0x8800             LDRH     R0,[R0, #+0]
   \       0x12   0x2601             MOVS     R6,#+1
   \       0x14   0x....'....        LDR.W    R3,??DataTable35_9
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0x7819             LDRB     R1,[R3, #+0]
   \       0x1C   0xBF14             ITE      NE 
   \       0x1E   0x2204             MOVNE    R2,#+4
   \       0x20   0x2200             MOVEQ    R2,#+0
   \       0x22   0xB101             CBZ.N    R1,??zclBufferSetup_0
   \       0x24   0x2110             MOVS     R1,#+16
   \                     ??zclBufferSetup_0: (+1)
   \       0x26   0x4314             ORRS     R4,R2,R4
   \       0x28   0x....'....        LDR.W    R7,??DataTable35_1
   \       0x2C   0x430C             ORRS     R4,R1,R4
   \       0x2E   0x703C             STRB     R4,[R7, #+0]
    143            if (mfgSpecificId != EMBER_AF_NULL_MANUFACTURER_CODE) {
   \       0x30   0xB118             CBZ.N    R0,??zclBufferSetup_1
    144              appZclBuffer[index++] = (uint8_t)mfgSpecificId;
   \       0x32   0x7078             STRB     R0,[R7, #+1]
    145              appZclBuffer[index++] = (uint8_t)(mfgSpecificId >> 8);
   \       0x34   0x0A00             LSRS     R0,R0,#+8
   \       0x36   0x70B8             STRB     R0,[R7, #+2]
   \       0x38   0x2603             MOVS     R6,#+3
    146            }
    147            appZclBuffer[index++] = emberAfNextSequence();
   \                     ??zclBufferSetup_1: (+1)
   \       0x3A   0x....'....        BL       emberAfNextSequence
   \       0x3E   0x55B8             STRB     R0,[R7, R6]
   \       0x40   0x1C76             ADDS     R6,R6,#+1
    148            appZclBuffer[index++] = commandId;
   \       0x42   0xB2F0             UXTB     R0,R6
    149            appZclBufferLen = index;
   \       0x44   0x1C76             ADDS     R6,R6,#+1
   \       0x46   0x543D             STRB     R5,[R7, R0]
   \       0x48   0xB2F6             UXTB     R6,R6
   \       0x4A   0x....'....        LDR.W    R1,??DataTable35_3
   \       0x4E   0x800E             STRH     R6,[R1, #+0]
    150          }
   \       0x50   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void zclBufferAddByte(uint8_t byte)
    153          {
    154            appZclBuffer[appZclBufferLen] = byte;
   \                     zclBufferAddByte: (+1)
   \        0x0   0x....'....        LDR.W    R1,??DataTable35_3
   \        0x4   0x880A             LDRH     R2,[R1, #+0]
   \        0x6   0x....'....        LDR.W    R3,??DataTable35_1
   \        0xA   0x5498             STRB     R0,[R3, R2]
    155            appZclBufferLen += 1;
   \        0xC   0x1C52             ADDS     R2,R2,#+1
   \        0xE   0x800A             STRH     R2,[R1, #+0]
    156          }
   \       0x10   0x4770             BX       LR               ;; return
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void zclBufferAddWord(uint16_t word)
    159          {
   \                     zclBufferAddWord: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    160            zclBufferAddByte(LOW_BYTE(word));
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x....'....        BL       zclBufferAddByte
    161            zclBufferAddByte(HIGH_BYTE(word));
   \        0xA   0x0A20             LSRS     R0,R4,#+8
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....             B.N      zclBufferAddByte
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void zclBufferAddInt32(uint32_t value)
    165          {
   \                     zclBufferAddInt32: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
    166            uint8_t i;
    167            for (i = 0; i < 4; i++) {
   \        0x4   0x2404             MOVS     R4,#+4
    168              zclBufferAddByte(LOW_BYTE(value));
   \                     ??zclBufferAddInt32_0: (+1)
   \        0x6   0xB2E8             UXTB     R0,R5
   \        0x8   0x....'....        BL       zclBufferAddByte
    169              value = value >> 8;
   \        0xC   0x0A2D             LSRS     R5,R5,#+8
    170            }
   \        0xE   0x1E64             SUBS     R4,R4,#+1
   \       0x10   0xD1F9             BNE.N    ??zclBufferAddInt32_0
    171          }
   \       0x12   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void zclBufferAddBuffer(const uint8_t *buffer, uint8_t length)
    174          {
   \                     zclBufferAddBuffer: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    175            MEMMOVE(appZclBuffer + appZclBufferLen, buffer, length);
   \        0x2   0x....'....        LDR.W    R5,??DataTable35_3
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4601             MOV      R1,R0
   \        0xA   0x8828             LDRH     R0,[R5, #+0]
   \        0xC   0x....'....        LDR.W    R3,??DataTable35_1
   \       0x10   0x4622             MOV      R2,R4
   \       0x12   0x4418             ADD      R0,R3,R0
   \       0x14   0x....'....        BL       halCommonMemMove
    176            appZclBufferLen += length;
   \       0x18   0x8829             LDRH     R1,[R5, #+0]
   \       0x1A   0x1864             ADDS     R4,R4,R1
   \       0x1C   0x802C             STRH     R4,[R5, #+0]
    177          }
   \       0x1E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    178          
    179          // Made non-to remove warnings

   \                                 In section .text, align 2, keep-with-next
    180          void zclBufferAddString(const uint8_t *buffer)
    181          {
   \                     zclBufferAddString: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    182            zclBufferAddBuffer(buffer, emberAfStringLength(buffer) + 1);
   \        0x4   0x....'....        BL       emberAfStringLength
   \        0x8   0x1C40             ADDS     R0,R0,#+1
   \        0xA   0xB2C1             UXTB     R1,R0
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0xE8BD 0x4010      POP      {R4,LR}
   \       0x12   0x....             B.N      zclBufferAddBuffer
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          void zclBufferAddByteFromArgument(uint8_t index)
    186          {
   \                     zclBufferAddByteFromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    187            zclBufferAddByte((uint8_t)emberUnsignedCommandArgument(index));
   \        0x2   0x....'....        BL       emberUnsignedCommandArgument
   \        0x6   0x....             B.N      ?Subroutine0
    188          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0xE8BD 0x4002      POP      {R1,LR}
   \        0x6   0x....             B.N      zclBufferAddByte
    189          

   \                                 In section .text, align 2, keep-with-next
    190          void zclBufferAddInt8sFromArgument(uint8_t index)
    191          {
   \                     zclBufferAddInt8sFromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    192            zclBufferAddByte((uint8_t)((int8_t)emberSignedCommandArgument(index)));
   \        0x2   0x....'....        BL       emberSignedCommandArgument
   \        0x6                      REQUIRE ?Subroutine0
   \        0x6                      ;; // Fall through to label ?Subroutine0
    193          }
    194          

   \                                 In section .text, align 2, keep-with-next
    195          void zclBufferAddInt16sFromArgument(uint8_t index)
    196          {
   \                     zclBufferAddInt16sFromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    197            zclBufferAddWord((uint16_t)((int16_t)emberSignedCommandArgument(index)));
   \        0x2   0x....'....        BL       emberSignedCommandArgument
   \        0x6   0x....             B.N      ?Subroutine1
    198          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0xB280             UXTH     R0,R0
   \        0x2   0xE8BD 0x4002      POP      {R1,LR}
   \        0x6   0x....             B.N      zclBufferAddWord
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void zclBufferAddInt32sFromArgument(uint8_t index)
    201          {
   \                     zclBufferAddInt32sFromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    202            zclBufferAddInt32((uint32_t)((int32_t)emberSignedCommandArgument(index)));
   \        0x2   0x....'....        BL       emberSignedCommandArgument
   \        0x6   0x....             B.N      ?Subroutine2
    203          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0xE8BD 0x4002      POP      {R1,LR}
   \        0x4   0x....             B.N      zclBufferAddInt32
    204          

   \                                 In section .text, align 2, keep-with-next
    205          void zclBufferAddWordFromArgument(uint8_t index)
    206          {
   \                     zclBufferAddWordFromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    207            zclBufferAddWord((uint16_t)emberUnsignedCommandArgument(index));
   \        0x2   0x....'....        BL       emberUnsignedCommandArgument
   \        0x6                      REQUIRE ?Subroutine1
   \        0x6                      ;; // Fall through to label ?Subroutine1
    208          }
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void zclBufferAddInt32FromArgument(uint8_t index)
    211          {
   \                     zclBufferAddInt32FromArgument: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    212            zclBufferAddInt32(emberUnsignedCommandArgument(index));
   \        0x2   0x....'....        BL       emberUnsignedCommandArgument
   \        0x6                      REQUIRE ?Subroutine2
   \        0x6                      ;; // Fall through to label ?Subroutine2
    213          }
    214          
    215          // Writes the length and contents of the string found at argIndex
    216          // into the zcl buffer.

   \                                 In section .text, align 2, keep-with-next
    217          void zclBufferAddLengthAndStringFromArgument(uint8_t argIndex)
    218          {
   \                     zclBufferAddLengthAndStringFromArgument: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    219            // We protect against copying outside of the appZclBuffer
    220            // by passing the maximum length of the buffer, or a maximum
    221            // value of an uint8_t.
    222            uint16_t maxLength = APP_ZCL_BUFFER_SIZE - (appZclBufferLen + 1);
   \        0x2   0x....'....        LDR.W    R4,??DataTable35_3
   \        0x6   0x8821             LDRH     R1,[R4, #+0]
    223            if (maxLength > MAX_INT8U_VALUE) {
    224              maxLength = MAX_INT8U_VALUE;
    225            }
    226            uint8_t length = emberCopyStringArgument(argIndex,
    227                                                     appZclBuffer + appZclBufferLen + 1,
    228                                                     maxLength,
    229                                                     false);
   \        0x8   0x....'....        LDR.W    R5,??DataTable35_1
   \        0xC   0xB240             SXTB     R0,R0
   \        0xE   0xF1C1 0x0251      RSB      R2,R1,#+81
   \       0x12   0xB293             UXTH     R3,R2
   \       0x14   0xF5B3 0x7F80      CMP      R3,#+256
   \       0x18   0xBFA8             IT       GE 
   \       0x1A   0x22FF             MOVGE    R2,#+255
   \       0x1C   0x186E             ADDS     R6,R5,R1
   \       0x1E   0x2300             MOVS     R3,#+0
   \       0x20   0xB2D2             UXTB     R2,R2
   \       0x22   0x1C71             ADDS     R1,R6,#+1
   \       0x24   0x....'....        BL       emberCopyStringArgument
    230            appZclBuffer[appZclBufferLen] = length;
   \       0x28   0x8821             LDRH     R1,[R4, #+0]
   \       0x2A   0x5468             STRB     R0,[R5, R1]
    231            appZclBufferLen += length + 1;
   \       0x2C   0x1C40             ADDS     R0,R0,#+1
   \       0x2E   0x1840             ADDS     R0,R0,R1
   \       0x30   0x8020             STRH     R0,[R4, #+0]
    232          }
   \       0x32   0xBD70             POP      {R4-R6,PC}       ;; return
    233          
    234          // This function fully formats the zcl buffer given all the necessary data.
    235          // The format string describes how the subsequent arguments are to be
    236          // written into the zcl buffer.  The format characters are the same as
    237          // those used by the command interpreter, namely:
    238          // 'u'   A one-byte unsigned value.
    239          // 'v'   A two-byte unsigned value encoded low byte first.
    240          // 'w'   A four-byte unsigned value encoded from low to high byte.
    241          // 'b'   A sequence of unsigned bytes.  The first supplied value is a
    242          //       pointer to the data and the second value is the number of bytes.
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void makeZclBuffer(uint8_t frameControl,
    245                             uint16_t clusterId,
    246                             uint8_t commandId,
    247                             char *format,
    248                             ...)
    249          {
   \                     makeZclBuffer: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x461C             MOV      R4,R3
    250            uint8_t i = 0;
   \        0x6   0x2500             MOVS     R5,#+0
    251            va_list argPointer = { 0 };
    252            zclBufferSetup(frameControl, clusterId, commandId);
   \        0x8   0x....'....        BL       zclBufferSetup
    253            va_start(argPointer, format);
   \        0xC   0xAF08             ADD      R7,SP,#+32
   \        0xE   0x....'....        LDR.W    R9,??DataTable35_10
   \       0x12   0xE013             B.N      ??makeZclBuffer_0
    254          
    255            while (format[i] != 0) {
    256              char command = format[i];
    257              switch (command) {
    258                case 'u':
    259                  zclBufferAddByte(va_arg(argPointer, int));
    260                  break;
    261                case 'v':
    262                  zclBufferAddWord(va_arg(argPointer, int));
    263                  break;
    264                case 'w':
    265                  zclBufferAddInt32(va_arg(argPointer, int));
    266                  break;
    267                case 'b': {
    268                  uint8_t *contents = va_arg(argPointer, uint8_t *);
    269                  uint8_t count = va_arg(argPointer, int);
    270                  zclBufferAddByte(count);
    271                  zclBufferAddBuffer(contents, count);
    272                  break;
    273                }
    274                default:
    275                  assert(false);
   \                     ??makeZclBuffer_1: (+1)
   \       0x14   0xF240 0x1113      MOVW     R1,#+275
   \       0x18   0x4648             MOV      R0,R9
   \       0x1A   0x....'....        BL       halInternalAssertFailed
   \       0x1E   0xE00B             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_3: (+1)
   \       0x20   0xF8D7 0x8000      LDR      R8,[R7, #+0]
   \       0x24   0x1D38             ADDS     R0,R7,#+4
   \       0x26   0x6806             LDR      R6,[R0, #+0]
   \       0x28   0x1D07             ADDS     R7,R0,#+4
   \       0x2A   0xB2F0             UXTB     R0,R6
   \       0x2C   0x....'....        BL       zclBufferAddByte
   \       0x30   0xB2F1             UXTB     R1,R6
   \       0x32   0x4640             MOV      R0,R8
   \       0x34   0x....'....        BL       zclBufferAddBuffer
    276              }
    277              i += 1;
   \                     ??makeZclBuffer_2: (+1)
   \       0x38   0x1C6D             ADDS     R5,R5,#+1
   \       0x3A   0xB2ED             UXTB     R5,R5
   \                     ??makeZclBuffer_0: (+1)
   \       0x3C   0x5D60             LDRB     R0,[R4, R5]
   \       0x3E   0xB1C8             CBZ.N    R0,??makeZclBuffer_4
   \       0x40   0x2862             CMP      R0,#+98
   \       0x42   0xD0ED             BEQ.N    ??makeZclBuffer_3
   \       0x44   0x2875             CMP      R0,#+117
   \       0x46   0xD004             BEQ.N    ??makeZclBuffer_5
   \       0x48   0x2876             CMP      R0,#+118
   \       0x4A   0xD008             BEQ.N    ??makeZclBuffer_6
   \       0x4C   0x2877             CMP      R0,#+119
   \       0x4E   0xD00C             BEQ.N    ??makeZclBuffer_7
   \       0x50   0xE7E0             B.N      ??makeZclBuffer_1
   \                     ??makeZclBuffer_5: (+1)
   \       0x52   0xF857 0x0B04      LDR      R0,[R7], #+4
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x....'....        BL       zclBufferAddByte
   \       0x5C   0xE7EC             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_6: (+1)
   \       0x5E   0xF857 0x0B04      LDR      R0,[R7], #+4
   \       0x62   0xB280             UXTH     R0,R0
   \       0x64   0x....'....        BL       zclBufferAddWord
   \       0x68   0xE7E6             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_7: (+1)
   \       0x6A   0xF857 0x0B04      LDR      R0,[R7], #+4
   \       0x6E   0x....'....        BL       zclBufferAddInt32
   \       0x72   0xE7E1             B.N      ??makeZclBuffer_2
    278            }
    279          
    280            va_end(argPointer);
    281            cliBufferPrint();
   \                     ??makeZclBuffer_4: (+1)
   \       0x74   0x....'....        BL       cliBufferPrint
    282          }
   \       0x78   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    283          
    284          // Handles any zcl command where the argument list of the
    285          // command is simply appended to the zcl buffer.  Handles argument types
    286          // 'u', 'v', 'w', 's', 'r', 'q', and 'b'.  String arguments are written with
    287          // a length byte first.
    288          // Because this is constructing the zcl message, we ignore the
    289          // special characters of ! and ? when processing the type string.

   \                                 In section .text, align 2, keep-with-next
    290          void zclSimpleCommand(uint8_t frameControl,
    291                                uint16_t clusterId,
    292                                uint8_t commandId)
    293          {
   \                     zclSimpleCommand: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4690             MOV      R8,R2
    294            uint8_t argumentIndex;
    295            uint8_t typeIndex = 0;
    296            uint8_t count = emberCommandArgumentCount();
   \        0xA   0x....'....        BL       emberCommandArgumentCount
   \        0xE   0x4605             MOV      R5,R0
    297            uint8_t type;
    298          
    299            zclBufferSetup(frameControl, clusterId, commandId);
   \       0x10   0x4642             MOV      R2,R8
   \       0x12   0x4639             MOV      R1,R7
   \       0x14   0x4630             MOV      R0,R6
   \       0x16   0x2400             MOVS     R4,#+0
   \       0x18   0x....'....        BL       zclBufferSetup
    300            for (argumentIndex = 0; argumentIndex < count; argumentIndex++) {
   \       0x1C   0x2600             MOVS     R6,#+0
   \       0x1E   0xE005             B.N      ??zclSimpleCommand_0
    301              type = emberCurrentCommand->argumentTypes[typeIndex];
    302              if (typeIndex + 1 < count
    303                  && emberCurrentCommand->argumentTypes[typeIndex + 1] != '*') {
    304                typeIndex++;
    305              }
    306          
    307              switch (type) {
    308                case 'u':
    309                  zclBufferAddByteFromArgument(argumentIndex);
    310                  break;
    311                case 'v':
    312                  zclBufferAddWordFromArgument(argumentIndex);
    313                  break;
    314                case 'w':
    315                  zclBufferAddInt32FromArgument(argumentIndex);
    316                  break;
    317                case 's':
    318                  zclBufferAddInt8sFromArgument(argumentIndex);
    319                  break;
    320                case 'r':
    321                  zclBufferAddInt16sFromArgument(argumentIndex);
    322                  break;
    323                case 'q':
    324                  zclBufferAddInt32sFromArgument(argumentIndex);
    325                  break;
    326                case 'b':
    327                  zclBufferAddLengthAndStringFromArgument(argumentIndex);
    328                  break;
    329                case '*':
    330                  break;
    331                case '!':
    332                  // Delimiter for subsets of optional arguments, does not itself represent an argument.
    333                  argumentIndex--;
   \                     ??zclSimpleCommand_1: (+1)
   \       0x20   0x1E76             SUBS     R6,R6,#+1
    334                  break;
   \       0x22   0xE002             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_3: (+1)
   \       0x24   0xB2F0             UXTB     R0,R6
   \       0x26   0x....'....        BL       zclBufferAddLengthAndStringFromArgument
   \                     ??zclSimpleCommand_2: (+1)
   \       0x2A   0x1C76             ADDS     R6,R6,#+1
   \                     ??zclSimpleCommand_0: (+1)
   \       0x2C   0xB2F0             UXTB     R0,R6
   \       0x2E   0x42A8             CMP      R0,R5
   \       0x30   0xDA40             BGE.N    ??zclSimpleCommand_4
   \       0x32   0x....'....        LDR.W    R0,??DataTable35_11
   \       0x36   0x6801             LDR      R1,[R0, #+0]
   \       0x38   0x1C62             ADDS     R2,R4,#+1
   \       0x3A   0x42AA             CMP      R2,R5
   \       0x3C   0x6888             LDR      R0,[R1, #+8]
   \       0x3E   0x5D01             LDRB     R1,[R0, R4]
   \       0x40   0xDA05             BGE.N    ??zclSimpleCommand_5
   \       0x42   0x4420             ADD      R0,R0,R4
   \       0x44   0x7840             LDRB     R0,[R0, #+1]
   \       0x46   0x282A             CMP      R0,#+42
   \       0x48   0xBF1C             ITT      NE 
   \       0x4A   0x1C64             ADDNE    R4,R4,#+1
   \       0x4C   0xB2E4             UXTBNE   R4,R4
   \                     ??zclSimpleCommand_5: (+1)
   \       0x4E   0x2921             CMP      R1,#+33
   \       0x50   0xD0E6             BEQ.N    ??zclSimpleCommand_1
   \       0x52   0x292A             CMP      R1,#+42
   \       0x54   0xD0E9             BEQ.N    ??zclSimpleCommand_2
   \       0x56   0x2962             CMP      R1,#+98
   \       0x58   0xD0E4             BEQ.N    ??zclSimpleCommand_3
   \       0x5A   0x2971             CMP      R1,#+113
   \       0x5C   0xD026             BEQ.N    ??zclSimpleCommand_6
   \       0x5E   0x2972             CMP      R1,#+114
   \       0x60   0xD01D             BEQ.N    ??zclSimpleCommand_7
   \       0x62   0x2973             CMP      R1,#+115
   \       0x64   0xD014             BEQ.N    ??zclSimpleCommand_8
   \       0x66   0x2975             CMP      R1,#+117
   \       0x68   0xD004             BEQ.N    ??zclSimpleCommand_9
   \       0x6A   0x2976             CMP      R1,#+118
   \       0x6C   0xD006             BEQ.N    ??zclSimpleCommand_10
   \       0x6E   0x2977             CMP      R1,#+119
   \       0x70   0xD008             BEQ.N    ??zclSimpleCommand_11
   \       0x72   0xE01F             B.N      ??zclSimpleCommand_4
   \                     ??zclSimpleCommand_9: (+1)
   \       0x74   0xB2F0             UXTB     R0,R6
   \       0x76   0x....'....        BL       zclBufferAddByteFromArgument
   \       0x7A   0xE7D6             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_10: (+1)
   \       0x7C   0xB2F0             UXTB     R0,R6
   \       0x7E   0x....'....        BL       zclBufferAddWordFromArgument
   \       0x82   0xE7D2             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_11: (+1)
   \       0x84   0xB2F0             UXTB     R0,R6
   \       0x86   0x....'....        BL       emberUnsignedCommandArgument
   \                     ??zclSimpleCommand_12: (+1)
   \       0x8A   0x....'....        BL       zclBufferAddInt32
   \       0x8E   0xE7CC             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_8: (+1)
   \       0x90   0xB2F0             UXTB     R0,R6
   \       0x92   0x....'....        BL       emberSignedCommandArgument
   \       0x96   0xB2C0             UXTB     R0,R0
   \       0x98   0x....'....        BL       zclBufferAddByte
   \       0x9C   0xE7C5             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_7: (+1)
   \       0x9E   0xB2F0             UXTB     R0,R6
   \       0xA0   0x....'....        BL       emberSignedCommandArgument
   \       0xA4   0xB280             UXTH     R0,R0
   \       0xA6   0x....'....        BL       zclBufferAddWord
   \       0xAA   0xE7BE             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_6: (+1)
   \       0xAC   0xB2F0             UXTB     R0,R6
   \       0xAE   0x....'....        BL       emberSignedCommandArgument
   \       0xB2   0xE7EA             B.N      ??zclSimpleCommand_12
    335                case '?':
    336                //lint -fallthrough
    337                case 0:
    338                //lint -fallthrough
    339                default:
    340                  goto kickout;
    341              }
    342            }
    343          
    344            kickout:
    345            cliBufferPrint();
   \                     ??zclSimpleCommand_4: (+1)
   \       0xB4   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \       0xB8   0x....             B.N      cliBufferPrint
    346          }
    347          

   \                                 In section .text, align 2, keep-with-next
    348          void zclGlobalSetup(uint8_t commandId)
    349          {
   \                     zclGlobalSetup: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x....'....        BL       ?Subroutine6
    350            uint16_t clusterId = (uint16_t)emberUnsignedCommandArgument(0);
    351            zclBufferSetup(ZCL_GLOBAL_COMMAND | zclGlobalDirection,
    352                           clusterId,
    353                           commandId);
   \                     ??CrossCallReturnLabel_16: (+1)
   \        0x6   0x....'....        BL       ?Subroutine16
    354            zclBufferAddWordFromArgument(1);  // attr id
   \                     ??CrossCallReturnLabel_55: (+1)
   \        0xA   0x....'....        BL       ?Subroutine9
    355            if (commandId != ZCL_READ_ATTRIBUTES_COMMAND_ID) {
   \                     ??CrossCallReturnLabel_29: (+1)
   \        0xE   0xB11C             CBZ.N    R4,??zclGlobalSetup_0
    356              zclBufferAddByteFromArgument(2);
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0xE8BD 0x4010      POP      {R4,LR}
   \       0x16   0x....             B.N      zclBufferAddByteFromArgument
    357            }
    358          }
   \                     ??zclGlobalSetup_0: (+1)
   \       0x18   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x....             B.N      zclBufferAddWordFromArgument

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16: (+1)
   \        0x0   0xB281             UXTH     R1,R0
   \        0x2   0x....'....        LDR.W    R3,??DataTable35_12
   \        0x6   0x7818             LDRB     R0,[R3, #+0]
   \        0x8   0x4622             MOV      R2,R4
   \        0xA   0x....             B.N      zclBufferSetup
    359          
    360          // zcl global direction <direction:1>

   \                                 In section .text, align 2, keep-with-next
    361          void zclGlobalDirectionCommand(void)
    362          {
   \                     zclGlobalDirectionCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    363            zclGlobalDirection = ((((uint8_t)emberUnsignedCommandArgument(0))
    364                                   == ZCL_DIRECTION_CLIENT_TO_SERVER)
    365                                  ? ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    366                                  : ZCL_FRAME_CONTROL_SERVER_TO_CLIENT);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_13: (+1)
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0xB100             CBZ.N    R0,??zclGlobalDirectionCommand_0
   \        0xA   0x2008             MOVS     R0,#+8
   \                     ??zclGlobalDirectionCommand_0: (+1)
   \        0xC   0x....'....        LDR.W    R1,??DataTable35_12
   \       0x10   0x7008             STRB     R0,[R1, #+0]
    367          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return
    368          
    369          // zcl global read <cluster:2> <attribute:2>

   \                                 In section .text, align 2, keep-with-next
    370          void zclGlobalReadCommand(void)
    371          {
   \                     zclGlobalReadCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    372            zclGlobalSetup(ZCL_READ_ATTRIBUTES_COMMAND_ID);
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             B.N      ?Subroutine3
    373            cliBufferPrint();
    374          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x....'....        BL       zclGlobalSetup
   \        0x4                      REQUIRE ??Subroutine20_0
   \        0x4                      ;; // Fall through to label ??Subroutine20_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine20_0: (+1)
   \        0x0   0xE8BD 0x4001      POP      {R0,LR}
   \        0x4   0x....             B.N      cliBufferPrint
    375          
    376          // zcl global write <cluster:2> <attrID:2> <type:1> <data>
    377          // zcl global uwrite <cluster:2> <attrID:2> <type:1> <data>
    378          // zcl global nwrite <cluster:2> <attrID:2> <type:1> <data>

   \                                 In section .text, align 2, keep-with-next
    379          void zclGlobalWriteCommand(void)
    380          {
   \                     zclGlobalWriteCommand: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    381            uint8_t type = (uint8_t)emberUnsignedCommandArgument(2);
   \        0x2   0x....'....        BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_42: (+1)
   \        0x6   0x4604             MOV      R4,R0
    382            uint8_t commandChar = emberCurrentCommand->name[0];
   \        0x8   0x....'....        LDR.W    R1,??DataTable35_11
   \        0xC   0x6808             LDR      R0,[R1, #+0]
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x7810             LDRB     R0,[R2, #+0]
    383            uint8_t commandId = (commandChar == 'u'
    384                                 ? ZCL_WRITE_ATTRIBUTES_UNDIVIDED_COMMAND_ID
    385                                 : (commandChar == 'n'
    386                                    ? ZCL_WRITE_ATTRIBUTES_NO_RESPONSE_COMMAND_ID
    387                                    : ZCL_WRITE_ATTRIBUTES_COMMAND_ID));
   \       0x12   0x2875             CMP      R0,#+117
   \       0x14   0xBF08             IT       EQ 
   \       0x16   0x2003             MOVEQ    R0,#+3
   \       0x18   0xD003             BEQ.N    ??zclGlobalWriteCommand_0
   \       0x1A   0x286E             CMP      R0,#+110
   \       0x1C   0xBF0C             ITE      EQ 
   \       0x1E   0x2005             MOVEQ    R0,#+5
   \       0x20   0x2002             MOVNE    R0,#+2
    388            zclGlobalSetup(commandId);
   \                     ??zclGlobalWriteCommand_0: (+1)
   \       0x22   0x....'....        BL       zclGlobalSetup
    389          
    390            if (emberAfIsThisDataTypeAStringType(type)) {
   \       0x26   0xB2E0             UXTB     R0,R4
   \       0x28   0x....'....        BL       emberAfIsThisDataTypeAStringType
   \       0x2C   0xB118             CBZ.N    R0,??zclGlobalWriteCommand_1
    391              // TODO: the maximum length of the string should be obtained from
    392              // the attribute size table.  Currently the following helper function
    393              // has a hard-coded maximum length of 16.
    394              zclBufferAddLengthAndStringFromArgument(3);
   \       0x2E   0x2003             MOVS     R0,#+3
   \       0x30   0x....'....        BL       zclBufferAddLengthAndStringFromArgument
   \       0x34   0xE00B             B.N      ??zclGlobalWriteCommand_2
    395            } else {
    396              uint8_t length = emberAfGetDataSize(type);
   \                     ??zclGlobalWriteCommand_1: (+1)
   \       0x36   0x....'....        BL       ?Subroutine14
    397              emberCopyStringArgument(3,
    398                                      appZclBuffer + appZclBufferLen,
    399                                      length,
    400                                      true);  // pad with zeroes
   \                     ??CrossCallReturnLabel_51: (+1)
   \       0x3A   0x....'....        BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_52: (+1)
   \       0x3E   0x2301             MOVS     R3,#+1
   \       0x40   0x4622             MOV      R2,R4
   \       0x42   0x2003             MOVS     R0,#+3
   \       0x44   0x....'....        BL       emberCopyStringArgument
    401              appZclBufferLen += length;
   \       0x48   0x8828             LDRH     R0,[R5, #+0]
   \       0x4A   0x1824             ADDS     R4,R4,R0
   \       0x4C   0x802C             STRH     R4,[R5, #+0]
    402            }
    403          
    404            cliBufferPrint();
   \                     ??zclGlobalWriteCommand_2: (+1)
   \       0x4E   0x....             B.N      ?Subroutine4
    405          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \        0x4   0x....             B.N      cliBufferPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \        0x0   0x8829             LDRH     R1,[R5, #+0]
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x....'....        LDR.W    R0,??DataTable35_1
   \        0x8   0x4401             ADD      R1,R0,R1
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \        0x0   0x....'....        LDR.W    R5,??DataTable35_3
   \        0x4   0xB2E0             UXTB     R0,R4
   \        0x6   0x....'....        B.W      emberAfGetDataSize

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \        0x0   0x4605             MOV      R5,R0
   \                     ??Subroutine12_0: (+1)
   \        0x2   0x2002             MOVS     R0,#+2
   \        0x4   0x....'....        B.W      emberUnsignedCommandArgument
    406          
    407          // zcl global discover <cluster> <attrID:2> <max # to report:1>

   \                                 In section .text, align 2, keep-with-next
    408          void zclGlobalDiscoverCommand(void)
    409          {
   \                     zclGlobalDiscoverCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    410            zclGlobalSetup(ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID);
   \        0x2   0x200C             MOVS     R0,#+12
   \        0x4                      REQUIRE ?Subroutine3
   \        0x4                      ;; // Fall through to label ?Subroutine3
    411            cliBufferPrint();
    412          }
    413          
    414          // zcl global report <src endpoint id:1> <cluster id:2> <attribute id:2> <mask:1>

   \                                 In section .text, align 2, keep-with-next
    415          void zclGlobalReportCommand(void)
    416          {
   \                     zclGlobalReportCommand: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB095             SUB      SP,SP,#+84
    417            EmberAfStatus status;
    418            EmberAfClusterId clusterId = (EmberAfClusterId)emberUnsignedCommandArgument(1);
   \        0x4   0x....'....        BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_21: (+1)
   \        0x8   0x....'....        BL       ?Subroutine12
    419            EmberAfAttributeId attributeId = (EmberAfAttributeId)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_45: (+1)
   \        0xC   0x....'....        BL       ?Subroutine13
    420            uint8_t mask = (uint8_t)emberUnsignedCommandArgument(3);
   \                     ??CrossCallReturnLabel_49: (+1)
   \       0x10   0xB2C4             UXTB     R4,R0
    421            EmberAfAttributeType type;
    422            uint8_t size;
    423            uint8_t data[ATTRIBUTE_LARGEST];
    424          
    425            status = emberAfReadAttribute((uint8_t)emberUnsignedCommandArgument(0), // endpoint
    426                                          clusterId,
    427                                          attributeId,
    428                                          (mask == 0
    429                                           ? CLUSTER_MASK_CLIENT
    430                                           : CLUSTER_MASK_SERVER),
    431                                          data,
    432                                          sizeof(data),
    433                                          &type);
    434            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xBF0C             ITE      EQ 
   \       0x16   0x2780             MOVEQ    R7,#+128
   \       0x18   0x2740             MOVNE    R7,#+64
   \       0x1A   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x1E   0xA903             ADD      R1,SP,#+12
   \       0x20   0x2241             MOVS     R2,#+65
   \       0x22   0xAB04             ADD      R3,SP,#+16
   \       0x24   0x9102             STR      R1,[SP, #+8]
   \       0x26   0x9201             STR      R2,[SP, #+4]
   \       0x28   0x9300             STR      R3,[SP, #+0]
   \       0x2A   0x463B             MOV      R3,R7
   \       0x2C   0xB2B2             UXTH     R2,R6
   \       0x2E   0xB2A9             UXTH     R1,R5
   \       0x30   0xB2C0             UXTB     R0,R0
   \       0x32   0x....'....        BL       emberAfReadAttribute
   \       0x36   0xBB58             CBNZ.N   R0,??zclGlobalReportCommand_0
    435              emberAfReportingPrintln("ERR: reading attribute %x", status);
    436              return;
    437            }
    438          
    439            zclBufferSetup(ZCL_GLOBAL_COMMAND
    440                           | (mask == 0
    441                              ? ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    442                              : ZCL_FRAME_CONTROL_SERVER_TO_CLIENT),
    443                           clusterId,
    444                           ZCL_REPORT_ATTRIBUTES_COMMAND_ID);
   \       0x38   0xB104             CBZ.N    R4,??zclGlobalReportCommand_1
   \       0x3A   0x2008             MOVS     R0,#+8
   \                     ??zclGlobalReportCommand_1: (+1)
   \       0x3C   0x220A             MOVS     R2,#+10
   \       0x3E   0xB2A9             UXTH     R1,R5
   \       0x40   0x....'....        BL       zclBufferSetup
    445            zclBufferAddWord(attributeId);
   \       0x44   0xB2B0             UXTH     R0,R6
   \       0x46   0x....'....        BL       zclBufferAddWord
    446            zclBufferAddByte(type);
   \       0x4A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0x4E   0x....'....        BL       zclBufferAddByte
    447          
    448            size = (emberAfIsThisDataTypeAStringType(type)
    449                    ? emberAfStringLength(data) + 1
    450                    : emberAfGetDataSize(type));
   \       0x52   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0x56   0x....'....        BL       emberAfIsThisDataTypeAStringType
   \       0x5A   0xB120             CBZ.N    R0,??zclGlobalReportCommand_2
   \       0x5C   0xA804             ADD      R0,SP,#+16
   \       0x5E   0x....'....        BL       emberAfStringLength
   \       0x62   0x1C44             ADDS     R4,R0,#+1
   \       0x64   0xE004             B.N      ??zclGlobalReportCommand_3
   \                     ??zclGlobalReportCommand_2: (+1)
   \       0x66   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0x6A   0x....'....        BL       emberAfGetDataSize
   \       0x6E   0x4604             MOV      R4,R0
    451          #if (BIGENDIAN_CPU)
    452            if (isThisDataTypeSentLittleEndianOTA(type)) {
    453              emberReverseMemCopy(appZclBuffer + appZclBufferLen, data, size);
    454            } else {
    455              MEMMOVE(appZclBuffer + appZclBufferLen, data, size);
    456            }
    457          #else
    458            MEMMOVE(appZclBuffer + appZclBufferLen, data, size);
   \                     ??zclGlobalReportCommand_3: (+1)
   \       0x70   0x....'....        LDR.W    R5,??DataTable35_3
   \       0x74   0x882B             LDRH     R3,[R5, #+0]
   \       0x76   0xB2E4             UXTB     R4,R4
   \       0x78   0x....'....        LDR.W    R0,??DataTable35_1
   \       0x7C   0x4622             MOV      R2,R4
   \       0x7E   0xA904             ADD      R1,SP,#+16
   \       0x80   0x4418             ADD      R0,R0,R3
   \       0x82   0x....'....        BL       halCommonMemMove
    459          #endif
    460            appZclBufferLen += size;
   \       0x86   0x8828             LDRH     R0,[R5, #+0]
   \       0x88   0x1824             ADDS     R4,R4,R0
   \       0x8A   0x802C             STRH     R4,[R5, #+0]
    461          
    462            cliBufferPrint();
   \       0x8C   0x....'....        BL       cliBufferPrint
    463          }
   \                     ??zclGlobalReportCommand_0: (+1)
   \       0x90   0xB015             ADD      SP,SP,#+84
   \       0x92   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \        0x0   0x4606             MOV      R6,R0
   \                     ??Subroutine13_0: (+1)
   \        0x2   0x2003             MOVS     R0,#+3
   \        0x4   0x....'....        B.W      emberUnsignedCommandArgument

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \                     ??Subroutine8_0: (+1)
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x....'....        B.W      emberUnsignedCommandArgument
    464          
    465          // zcl global report-read <cluster> <attrID:2> <direction:1>

   \                                 In section .text, align 2, keep-with-next
    466          void zclGlobalReportReadCommand(void)
    467          {
   \                     zclGlobalReportReadCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    468            zclBufferSetup(ZCL_GLOBAL_COMMAND | zclGlobalDirection,
    469                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    470                           ZCL_READ_REPORTING_CONFIGURATION_COMMAND_ID);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_11: (+1)
   \        0x6   0xB281             UXTH     R1,R0
   \        0x8   0x....'....        LDR.W    R0,??DataTable35_12
   \        0xC   0x7800             LDRB     R0,[R0, #+0]
   \        0xE   0x2208             MOVS     R2,#+8
   \       0x10   0x....'....        BL       zclBufferSetup
    471            zclBufferAddByteFromArgument(2); // direction
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0x....'....        BL       zclBufferAddByteFromArgument
    472            zclBufferAddWordFromArgument(1); // attribute id
   \       0x1A   0x....'....        BL       ?Subroutine9
    473            cliBufferPrint();
   \                     ??CrossCallReturnLabel_28: (+1)
   \       0x1E   0x....             B.N      ??Subroutine20_0
    474          }
    475          
    476          // zcl global send-me-a-report <cluster id:2> <attribute id:2> <type:1> ...
    477          // ... <min interval:2> <max interval:2> <reportable change:1-4>

   \                                 In section .text, align 2, keep-with-next
    478          void zclGlobalSendMeAReportCommand(void)
    479          {
   \                     zclGlobalSendMeAReportCommand: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    480            uint8_t type = (uint8_t)emberUnsignedCommandArgument(2);
   \        0x2   0x....'....        BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_41: (+1)
   \        0x6   0x....'....        BL       ?Subroutine6
    481          
    482            zclBufferSetup(ZCL_GLOBAL_COMMAND | zclGlobalDirection,
    483                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    484                           ZCL_CONFIGURE_REPORTING_COMMAND_ID);
   \                     ??CrossCallReturnLabel_15: (+1)
   \        0xA   0x....'....        BL       ?Subroutine17
    485            zclBufferAddByte(EMBER_ZCL_REPORTING_DIRECTION_REPORTED);
   \                     ??CrossCallReturnLabel_57: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x....'....        BL       zclBufferAddByte
    486            zclBufferAddWordFromArgument(1);  // attribute id
   \       0x14   0x....'....        BL       ?Subroutine9
    487            zclBufferAddByte(type);           // type
   \                     ??CrossCallReturnLabel_27: (+1)
   \       0x18   0xB2E0             UXTB     R0,R4
   \       0x1A   0x....'....        BL       zclBufferAddByte
    488            zclBufferAddWordFromArgument(3);  // minimum reporting interval
   \       0x1E   0x2003             MOVS     R0,#+3
   \       0x20   0x....'....        BL       zclBufferAddWordFromArgument
    489            zclBufferAddWordFromArgument(4);  // maximum reporting interval
   \       0x24   0x2004             MOVS     R0,#+4
   \       0x26   0x....'....        BL       zclBufferAddWordFromArgument
    490          
    491            // If the data type is analog, then the reportable change field is the same
    492            // size as the data type.  Otherwise, it is omitted.
    493            if (emberAfGetAttributeAnalogOrDiscreteType(type)
    494                == EMBER_AF_DATA_TYPE_ANALOG) {
   \       0x2A   0xB2E0             UXTB     R0,R4
   \       0x2C   0x....'....        BL       emberAfGetAttributeAnalogOrDiscreteType
   \       0x30   0xB958             CBNZ.N   R0,??zclGlobalSendMeAReportCommand_0
    495              uint8_t dataSize = emberAfGetDataSize(type);
   \       0x32   0x....'....        BL       ?Subroutine14
    496              emberCopyStringArgument(5,
    497                                      appZclBuffer + appZclBufferLen,
    498                                      dataSize,
    499                                      false);
   \                     ??CrossCallReturnLabel_50: (+1)
   \       0x36   0x....'....        BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_53: (+1)
   \       0x3A   0x2300             MOVS     R3,#+0
   \       0x3C   0x4622             MOV      R2,R4
   \       0x3E   0x2005             MOVS     R0,#+5
   \       0x40   0x....'....        BL       emberCopyStringArgument
    500              appZclBufferLen += dataSize;
   \       0x44   0x8828             LDRH     R0,[R5, #+0]
   \       0x46   0x1824             ADDS     R4,R4,R0
   \       0x48   0x802C             STRH     R4,[R5, #+0]
    501            }
    502            cliBufferPrint();
   \                     ??zclGlobalSendMeAReportCommand_0: (+1)
   \       0x4A                      REQUIRE ?Subroutine4
   \       0x4A                      ;; // Fall through to label ?Subroutine4
    503          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17: (+1)
   \        0x0   0xB281             UXTH     R1,R0
   \        0x2   0x....'....        LDR.W    R0,??DataTable35_12
   \        0x6   0x7800             LDRB     R0,[R0, #+0]
   \        0x8   0x2206             MOVS     R2,#+6
   \        0xA   0x....             B.N      zclBufferSetup
    504          
    505          // zcl global expect-report-from-me <cluster id:2> <attribute id:2> <timeout:2>

   \                                 In section .text, align 2, keep-with-next
    506          void zclGlobalExpectReportFromMeCommand(void)
    507          {
   \                     zclGlobalExpectReportFromMeCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    508            zclBufferSetup(ZCL_GLOBAL_COMMAND | zclGlobalDirection,
    509                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    510                           ZCL_CONFIGURE_REPORTING_COMMAND_ID);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_10: (+1)
   \        0x6   0x....'....        BL       ?Subroutine17
    511            zclBufferAddByte(EMBER_ZCL_REPORTING_DIRECTION_RECEIVED);
   \                     ??CrossCallReturnLabel_56: (+1)
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       zclBufferAddByte
    512            zclBufferAddWordFromArgument(1); // attribute id
   \       0x10   0x....'....        BL       ?Subroutine9
    513            zclBufferAddWordFromArgument(2); // timeout
   \                     ??CrossCallReturnLabel_26: (+1)
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0x....'....        BL       zclBufferAddWordFromArgument
    514            cliBufferPrint();
   \       0x1A   0x....             B.N      ??Subroutine20_0
    515          }
    516          
    517          // zcl global disc-com-gen <cluster id:2> <start command id:1> <max command id:1>
    518          // zcl global disc-com-rec <cluster id:2> <start command id:1> <max command id:1>

   \                                 In section .text, align 2, keep-with-next
    519          void zclGlobalCommandDiscoveryCommand(void)
    520          {
   \                     zclGlobalCommandDiscoveryCommand: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    521            zclBufferSetup(ZCL_GLOBAL_COMMAND | zclGlobalDirection,
    522                           (EmberAfClusterId)emberUnsignedCommandArgument(0),   // cluster id
    523                           (emberCurrentCommand->name[9] == 'g'
    524                            ? ZCL_DISCOVER_COMMANDS_GENERATED_COMMAND_ID
    525                            : ZCL_DISCOVER_COMMANDS_RECEIVED_COMMAND_ID));
   \        0x2   0x....'....        LDR.W    R0,??DataTable35_11
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x680A             LDR      R2,[R1, #+0]
   \        0xA   0x7A50             LDRB     R0,[R2, #+9]
   \        0xC   0x2867             CMP      R0,#+103
   \        0xE   0xBF0C             ITE      EQ 
   \       0x10   0x2413             MOVEQ    R4,#+19
   \       0x12   0x2411             MOVNE    R4,#+17
   \       0x14   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x18   0x....'....        BL       ?Subroutine16
    526            zclBufferAddByteFromArgument(1);   // start command id
   \                     ??CrossCallReturnLabel_54: (+1)
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x....'....        BL       zclBufferAddByteFromArgument
    527            zclBufferAddByteFromArgument(2); // max command ids
   \       0x22   0x2002             MOVS     R0,#+2
   \       0x24   0x....'....        BL       zclBufferAddByteFromArgument
    528            cliBufferPrint();
   \       0x28   0xE8BD 0x4010      POP      {R4,LR}
   \       0x2C   0x....             B.N      cliBufferPrint
    529          }
    530          
    531          // zcl test response on

   \                                 In section .text, align 2, keep-with-next
    532          void zclTestResponseOnCommand(void)
    533          {
    534            emberAfSetNoReplyForNextMessage(false);
   \                     zclTestResponseOnCommand: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x....'....        B.W      emberAfSetNoReplyForNextMessage
    535          }
    536          
    537          // zcl test response off

   \                                 In section .text, align 2, keep-with-next
    538          void zclTestResponseOffCommand(void)
    539          {
    540            emberAfSetNoReplyForNextMessage(true);
   \                     zclTestResponseOffCommand: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x....'....        B.W      emberAfSetNoReplyForNextMessage
    541          }
    542          
    543          #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT
    544          // zcl basic rtfd
    545          void zclBasicRtfdCommand(void)
    546          {
    547            zclSimpleClientCommand(ZCL_BASIC_CLUSTER_ID,
    548                                   ZCL_RESET_TO_FACTORY_DEFAULTS_COMMAND_ID);
    549          }
    550          #endif
    551          

   \                                 In section .text, align 2, keep-with-next
    552          void zclMfgCodeCommand(void)
    553          {
   \                     zclMfgCodeCommand: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    554            if (zclCmdIsBuilt) {
   \        0x2   0x....'....        LDR.W    R1,??DataTable35_2
   \        0x6   0x7808             LDRB     R0,[R1, #+0]
   \        0x8   0xB130             CBZ.N    R0,??zclMfgCodeCommand_0
    555              emberAfAppPrintln("Command already built.  Cannot set MFG specific code for command.");
   \        0xA   0x....'....        LDR.W    R1,??DataTable35_13
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0xE8BD 0x4010      POP      {R4,LR}
   \       0x14   0x....'....        B.W      emberAfPrintln
    556              return;
    557            }
    558            mfgSpecificId = (uint16_t)emberUnsignedCommandArgument(0);
   \                     ??zclMfgCodeCommand_0: (+1)
   \       0x18   0x....'....        LDR.W    R4,??DataTable35_8
   \       0x1C   0x....'....        BL       emberUnsignedCommandArgument
   \       0x20   0x8020             STRH     R0,[R4, #+0]
    559            emberAfAppPrintln("MFG Code Set for next command: 0x%2X", mfgSpecificId);
   \       0x22   0x8822             LDRH     R2,[R4, #+0]
   \       0x24   0x....'....        LDR.W    R1,??DataTable35_14
   \       0x28   0x....             B.N      ?Subroutine5
    560          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0x2002             MOVS     R0,#+2
   \        0x2   0xE8BD 0x4010      POP      {R4,LR}
   \        0x6   0x....'....        B.W      emberAfPrintln
    561          

   \                                 In section .text, align 2, keep-with-next
    562          void zclXDefaultRespCommand(void)
    563          {
   \                     zclXDefaultRespCommand: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    564            disableDefaultResponse = (uint8_t)emberUnsignedCommandArgument(0);
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....'....        LDR.W    R4,??DataTable35_9
   \        0x8   0x....'....        BL       emberUnsignedCommandArgument
   \        0xC   0x7020             STRB     R0,[R4, #+0]
    565            emberAfAppPrintln("Disable Default Response Set for next command: 0x%X", disableDefaultResponse);
   \        0xE   0x7822             LDRB     R2,[R4, #+0]
   \       0x10   0x....'....        LDR.W    R1,??DataTable35_15
   \       0x14                      REQUIRE ?Subroutine5
   \       0x14                      ;; // Fall through to label ?Subroutine5
    566          }
    567          

   \                                 In section .text, align 2, keep-with-next
    568          void zclUseNextSequenceCommand(void)
    569          {
   \                     zclUseNextSequenceCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    570            useNextSequence = (uint8_t)emberUnsignedCommandArgument(0);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_8: (+1)
   \        0x6   0xB2C1             UXTB     R1,R0
   \        0x8   0xB101             CBZ.N    R1,??zclUseNextSequenceCommand_0
   \        0xA   0x2101             MOVS     R1,#+1
   \                     ??zclUseNextSequenceCommand_0: (+1)
   \        0xC   0x....'....        LDR.W    R0,??DataTable35_7
   \       0x10   0x7001             STRB     R1,[R0, #+0]
    571            emberAfAppPrintln("Use Next Sequence Set for next command: 0x%X", useNextSequence);
   \       0x12   0x7802             LDRB     R2,[R0, #+0]
   \       0x14   0x....'....        LDR.W    R1,??DataTable35_16
   \       0x18   0x2002             MOVS     R0,#+2
   \       0x1A   0xE8BD 0x4008      POP      {R3,LR}
   \       0x1E   0x....'....        B.W      emberAfPrintln
    572          }
    573          

   \                                 In section .text, align 2, keep-with-next
    574          void zclTimeCommand(void)
    575          {
   \                     zclTimeCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    576            emberAfSetTime(emberUnsignedCommandArgument(0));
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \        0x6   0xE8BD 0x4002      POP      {R1,LR}
   \        0xA   0x....'....        B.W      emberAfSetTime
    577          }
    578          
    579          #ifdef ZCL_USING_IDENTIFY_CLUSTER_CLIENT
    580          // zcl identify id <identify time:2>
    581          void zclIdentifyIdCommand(void)
    582          {
    583            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_IDENTIFY_COMMAND_ID);
    584          }
    585          
    586          // zcl identify query
    587          void zclIdentifyQueryCommand(void)
    588          {
    589            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_IDENTIFY_QUERY_COMMAND_ID);
    590          }
    591          
    592          // zcl identify trigger <effect id:1> <effect variant:1>
    593          void zclIdentifyTriggerEffectCommand(void)
    594          {
    595            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_TRIGGER_EFFECT_COMMAND_ID);
    596          }
    597          #endif // ZCL_USING_IDENTIFY_CLUSTER_CLIENT
    598          
    599          #ifdef ZCL_USING_IDENTIFY_CLUSTER_SERVER
    600          // zcl identify on <endpoint:1> <time:2>
    601          // zcl identify off <endpoint:1>

   \                                 In section .text, align 2, keep-with-next
    602          void zclIdentifyOnOffCommand(void)
    603          {
    604            EmberAfStatus afStatus;
    605            uint16_t timeS = 0;
    606            if (emberCurrentCommand->name[1] == 'n') {
   \                     zclIdentifyOnOffCommand: (+1)
   \        0x0   0x....'....        LDR.W    R1,??DataTable35_11
   \        0x4   0xB5E0             PUSH     {R5-R7,LR}
   \        0x6   0x680A             LDR      R2,[R1, #+0]
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \        0xE   0x6810             LDR      R0,[R2, #+0]
   \       0x10   0x7841             LDRB     R1,[R0, #+1]
   \       0x12   0x296E             CMP      R1,#+110
   \       0x14   0xD109             BNE.N    ??zclIdentifyOnOffCommand_0
    607              timeS = (uint16_t)emberUnsignedCommandArgument(1);
   \       0x16   0x....'....        BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_20: (+1)
   \       0x1A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    608              if (timeS == 0) {
   \       0x1E   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \       0x22   0xB910             CBNZ.N   R0,??zclIdentifyOnOffCommand_0
    609                timeS = 60;
   \       0x24   0x213C             MOVS     R1,#+60
   \       0x26   0xF8AD 0x1004      STRH     R1,[SP, #+4]
    610              }
    611            }
    612          
    613            afStatus = emberAfWriteServerAttribute(
    614              (uint8_t)emberUnsignedCommandArgument(0),                       // endpoint
    615              ZCL_IDENTIFY_CLUSTER_ID,
    616              ZCL_IDENTIFY_TIME_ATTRIBUTE_ID,
    617              (uint8_t *)&timeS,
    618              ZCL_INT16U_ATTRIBUTE_TYPE);
   \                     ??zclIdentifyOnOffCommand_0: (+1)
   \       0x2A   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x2E   0x2121             MOVS     R1,#+33
   \       0x30   0x9100             STR      R1,[SP, #+0]
   \       0x32   0xAB01             ADD      R3,SP,#+4
   \       0x34   0x2200             MOVS     R2,#+0
   \       0x36   0x2103             MOVS     R1,#+3
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0x....'....        BL       emberAfWriteServerAttribute
    619            if (EMBER_ZCL_STATUS_SUCCESS != afStatus) {
    620              emberAfDebugPrintln("Identify On/Off: failed to write value 0x%x  to cluster "
    621                                  "0x%x attribute ID 0x%x: error 0x%x",
    622                                  timeS,
    623                                  ZCL_IDENTIFY_CLUSTER_ID,
    624                                  ZCL_IDENTIFY_TIME_ATTRIBUTE_ID,
    625                                  afStatus);
    626            }
    627          }
   \       0x3E   0xBD07             POP      {R0-R2,PC}       ;; return
    628          #else
    629          // TODO: the generated CLI is sucking in these methods regardless of whether or not it should;
    630          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but
    631          // for now I'm stubbing them. - Jeremy
    632          void zclIdentifyOnOffCommand(void)
    633          {
    634          }
    635          #endif // ZCL_USING_IDENTIFY_CLUSTER_SERVER
    636          
    637          #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
    638          // zcl groups add <group id:2> <name:16>
    639          // zcl groups ad-if-id <group id:2> <name:16>
    640          void zclGroupsAddCommand(void)
    641          {
    642            uint8_t commandId = (emberCurrentCommand->name[2] == 'd'
    643                                 ? ZCL_ADD_GROUP_COMMAND_ID
    644                                 : ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID);
    645            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, commandId);
    646          }
    647          
    648          // zcl groups view <group id:2>
    649          void zclGroupsViewCommand(void)
    650          {
    651            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, ZCL_VIEW_GROUP_COMMAND_ID);
    652          }
    653          
    654          // zcl groups get <count:1> [<group id:2> * count]
    655          void zclGroupsGetCommand(void)
    656          {
    657            uint8_t i;
    658            uint8_t count = (uint8_t)emberUnsignedCommandArgument(0);
    659            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
    660                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
    661                           ZCL_GROUPS_CLUSTER_ID,
    662                           ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID);
    663            zclBufferAddByte(count); // group count
    664            for (i = 0; i < count; i++) {
    665              zclBufferAddWordFromArgument(1 + i);
    666            }
    667            cliBufferPrint();
    668          }
    669          
    670          // zcl groups remove <group id:2>
    671          void zclGroupsRemoveCommand(void)
    672          {
    673            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, ZCL_REMOVE_GROUP_COMMAND_ID);
    674          }
    675          
    676          // zcl groups rmall
    677          void zclGroupsRemoveAllCommand(void)
    678          {
    679            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID,
    680                                   ZCL_REMOVE_ALL_GROUPS_COMMAND_ID);
    681          }
    682          #else
    683          // TODO: the generated CLI is sucking in this method regardless of whether or not it should;
    684          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but
    685          // for now I'm stubbing it. - Jeremy

   \                                 In section .text, align 2, keep-with-next
    686          void zclGroupsGetCommand(void)
    687          {
    688          }
   \                     zclGroupsGetCommand: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    689          #endif //ZCL_USING_GROUPS_CLUSTER_CLIENT
    690          
    691          #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
    692          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    693          bool addScenesOnOffValue;
    694          #endif
    695          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    696          uint8_t addScenesLevelValue;
    697          #endif
    698          
    699          // zcl scenes add <groupId:2> <sceneId:1> <trans time:2> <name> <extensionFieldSets>
    700          // zcl scenes eadd <groupId:2> <sceneId:1> <trans time:2> <name> <extensionFieldSets>
    701          void zclScenesAddCommand(void)
    702          {
    703            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
    704                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
    705                           ZCL_SCENES_CLUSTER_ID,
    706                           (emberCurrentCommand->name[0] != 'e'
    707                            ? ZCL_ADD_SCENE_COMMAND_ID
    708                            : ZCL_ENHANCED_ADD_SCENE_COMMAND_ID));
    709            zclBufferAddWordFromArgument(0);
    710            zclBufferAddByteFromArgument(1);
    711            zclBufferAddWordFromArgument(2);
    712            zclBufferAddLengthAndStringFromArgument(3);
    713          
    714          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    715            // cluster:2 len:1 value:1 (on/off extension)
    716            zclBufferAddWord(ZCL_ON_OFF_CLUSTER_ID);
    717            zclBufferAddByte(1);
    718            zclBufferAddByte(addScenesOnOffValue);
    719          #endif //ZCL_USING_ON_OFF_CLUSTER_CLIENT
    720          
    721          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    722            // cluster:2 len:1 value:1 (level control extension)
    723            zclBufferAddWord(ZCL_LEVEL_CONTROL_CLUSTER_ID);
    724            zclBufferAddByte(1);
    725            zclBufferAddByte(addScenesLevelValue);
    726          #endif //ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    727          
    728            cliBufferPrint();
    729          }
    730          
    731          // zcl scenes view <groupId:2> <sceneId:1>
    732          // zcl scenes eview <groupId:2> <sceneId:1>
    733          void zclScenesViewCommand(void)
    734          {
    735            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID,
    736                                   (emberCurrentCommand->name[0] != 'e'
    737                                    ? ZCL_VIEW_SCENE_COMMAND_ID
    738                                    : ZCL_ENHANCED_VIEW_SCENE_COMMAND_ID));
    739          }
    740          
    741          // zcl scenes remove <groupId:2> <sceneId:1>
    742          void zclScenesRemoveCommand(void)
    743          {
    744            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_REMOVE_SCENE_COMMAND_ID);
    745          }
    746          
    747          // zcl scenes rmall <groupId:2>
    748          void zclScenesRemoveAllCommand(void)
    749          {
    750            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_REMOVE_ALL_SCENES_COMMAND_ID);
    751          }
    752          
    753          // zcl scenes store <groupId:2> <sceneId:1>
    754          void zclScenesStoreCommand(void)
    755          {
    756            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_STORE_SCENE_COMMAND_ID);
    757          }
    758          
    759          // zcl scenes recall <groupId:2> <sceneId:1>
    760          void zclScenesRecallCommand(void)
    761          {
    762            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_RECALL_SCENE_COMMAND_ID);
    763          }
    764          
    765          // zcl scenes get <groupId:2>
    766          void zclScenesGetMembershipCommand(void)
    767          {
    768            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID);
    769          }
    770          
    771          // zcl scenes copy <mode:1> <group id from:2> <scenes id from:1> <group id to:2> <scene id:1>
    772          void zclScenesCopyCommand(void)
    773          {
    774            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_COPY_SCENE_COMMAND_ID);
    775          }
    776          
    777          // zcl scenes set [on|off] <level:1>
    778          void zclScenesSetCommand(void)
    779          {
    780          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    781            addScenesOnOffValue = (emberCurrentCommand->name[1] == 'n');
    782          #endif
    783          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    784            addScenesLevelValue = (uint8_t)emberUnsignedCommandArgument(0);
    785          #endif
    786          }
    787          #endif //ZCL_USING_SCENES_CLUSTER_CLIENT
    788          
    789          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    790          // zcl on-off [ off | on | toggle ]
    791          void zclOnOffCommand(void)
    792          {
    793            uint8_t secondChar = emberCurrentCommand->name[1];
    794            uint8_t commandId = (secondChar == 'n'
    795                                 ? ZCL_ON_COMMAND_ID
    796                                 : (secondChar == 'f'
    797                                    ? ZCL_OFF_COMMAND_ID
    798                                    : ZCL_TOGGLE_COMMAND_ID));
    799            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID, commandId);
    800          }
    801          
    802          // zcl on-off offeffect <effect id:1> <effect variant:1>
    803          void zclOnOffOffWithEffectCommand(void)
    804          {
    805            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID, ZCL_OFF_WITH_EFFECT_COMMAND_ID);
    806          }
    807          
    808          // zcl on-off onrecall
    809          void zclOnOffOnWithRecallGlobalSceneCommand(void)
    810          {
    811            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID,
    812                                   ZCL_ON_WITH_RECALL_GLOBAL_SCENE_COMMAND_ID);
    813          }
    814          
    815          // zcl on-off ontimedoff <on off control:1> <on time:2> <off wait time:2>
    816          void zclOnOffOnWithTimedOffCommand(void)
    817          {
    818            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID,
    819                                   ZCL_ON_WITH_TIMED_OFF_COMMAND_ID);
    820          }
    821          
    822          #endif //ZCL_USING_ON_OFF_CLUSTER_CLIENT
    823          
    824          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    825          // zcl level-control mv-to-level [level:1] [trans time:2]
    826          // zcl level-control o-mv-to-level [level:1] [trans time:2]
    827          void zclLevelControlMoveToLevelCommand(void)
    828          {
    829            uint8_t commandId = (emberCurrentCommand->name[0] == 'o'
    830                                 ? ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
    831                                 : ZCL_MOVE_TO_LEVEL_COMMAND_ID);
    832            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    833          }
    834          
    835          // zcl level-control move [mode:1] [rate:1]
    836          // zcl level-control o-move [mode:1] [rate:1]
    837          void zclLevelControlMoveCommand(void)
    838          {
    839            uint8_t commandId = (emberCurrentCommand->name[0] == 'o'
    840                                 ? ZCL_MOVE_WITH_ON_OFF_COMMAND_ID
    841                                 : ZCL_MOVE_COMMAND_ID);
    842            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    843          }
    844          
    845          // zcl level-control step [step:1] [step size:1] [trans time:2]
    846          // zcl level-control o-step [step:1] [step size:1] [trans time:2]
    847          void zclLevelControlStepCommand(void)
    848          {
    849            uint8_t commandId = (emberCurrentCommand->name[0] == 'o'
    850                                 ? ZCL_STEP_WITH_ON_OFF_COMMAND_ID
    851                                 : ZCL_STEP_COMMAND_ID);
    852            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    853          }
    854          
    855          // zcl level-control stop
    856          // zcl level-control ostop
    857          void zclLevelControlStopCommand(void)
    858          {
    859            uint8_t commandId = (emberCurrentCommand->name[0] == 'o'
    860                                 ? ZCL_STOP_WITH_ON_OFF_COMMAND_ID
    861                                 : ZCL_STOP_COMMAND_ID);
    862            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    863          }
    864          #endif //ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    865          
    866          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
    867          // zcl tstat set <mode:1 int> <amount:1 int>
    868          void zclThermostatSetCommand(void)
    869          {
    870            zclSimpleClientCommand(ZCL_THERMOSTAT_CLUSTER_ID,
    871                                   ZCL_SETPOINT_RAISE_LOWER_COMMAND_ID);
    872          }
    873          #endif // ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
    874          
    875          #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
    876          // zcl ias-zone enroll <zone type: 2 int> <manuf code: 2 int>
    877          void zclIasZoneEnrollCommand(void)
    878          {
    879            zclSimpleServerCommand(ZCL_IAS_ZONE_CLUSTER_ID,
    880                                   ZCL_ZONE_ENROLL_REQUEST_COMMAND_ID);
    881            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
    882          }
    883          
    884          // zcl ias-zone sc <zone status: 2 int> <ext status: 1 int> <zone id: 1 int> <delay: 2 int>
    885          void zclIasZoneStatusChangeCommand(void)
    886          {
    887            zclSimpleServerCommand(ZCL_IAS_ZONE_CLUSTER_ID,
    888                                   ZCL_ZONE_STATUS_CHANGE_NOTIFICATION_COMMAND_ID);
    889            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
    890          }
    891          #endif // ZCL_USING_IAS_ZONE_CLUSTER_SERVER
    892          
    893          #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
    894          // zcl ias-ace a <int:1>
    895          void zclIasAceArmCommand(void)
    896          {
    897            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_ARM_COMMAND_ID);
    898          }
    899          
    900          // zcl ias-ace b <zones as hex string>
    901          void zclIasAceBypassCommand(void)
    902          {
    903            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_BYPASS_COMMAND_ID);
    904          }
    905          
    906          // zcl ias-ace e
    907          void zclIasAceEmergencyCommand(void)
    908          {
    909            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_EMERGENCY_COMMAND_ID);
    910          }
    911          
    912          // zcl ias-ace f
    913          void zclIasAceFireCommand(void)
    914          {
    915            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_FIRE_COMMAND_ID);
    916          }
    917          
    918          // zcl ias-ace p
    919          void zclIasAcePanicCommand(void)
    920          {
    921            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_PANIC_COMMAND_ID);
    922          }
    923          
    924          // zcl ias-ace getzm
    925          void zclIasAceGetZoneMapCommand(void)
    926          {
    927            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID,
    928                                   ZCL_GET_ZONE_ID_MAP_COMMAND_ID);
    929          }
    930          
    931          // zcl ias-ace getzi <zone id:1>
    932          void zclIasAceGetZoneInfoCommand(void)
    933          {
    934            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID,
    935                                   ZCL_GET_ZONE_INFORMATION_COMMAND_ID);
    936          }
    937          #endif // ZCL_USING_IAS_ACE_CLUSTER_CLIENT
    938          
    939          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
    940          // zcl color-control movetohue <hue:1> <direction:1> <transition time:2>
    941          // zcl color-control emovetohue <enhanced hue:2> <direction:1> <transition time:2>
    942          void zclColorControlMoveToHueCommand(void)
    943          {
    944            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    945                                   (emberCurrentCommand->name[0] != 'e'
    946                                    ? ZCL_MOVE_TO_HUE_COMMAND_ID
    947                                    : ZCL_ENHANCED_MOVE_TO_HUE_COMMAND_ID));
    948          }
    949          
    950          // zcl color-control movehue <move mode:1> <rate:1>
    951          // zcl color-control emovehue <move mode:1> <rate:2>
    952          void zclColorControlMoveHueCommand(void)
    953          {
    954            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    955                                   (emberCurrentCommand->name[0] != 'e'
    956                                    ? ZCL_MOVE_HUE_COMMAND_ID
    957                                    : ZCL_ENHANCED_MOVE_HUE_COMMAND_ID));
    958          }
    959          
    960          // zcl color-control stephue <step mode:1> <step size:1> <transition time:1>
    961          // zcl color-control estephue <step mode:1> <step size:2> <transition time:2>
    962          void zclColorControlStepHueCommand(void)
    963          {
    964            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    965                                   (emberCurrentCommand->name[0] != 'e'
    966                                    ? ZCL_STEP_HUE_COMMAND_ID
    967                                    : ZCL_ENHANCED_STEP_HUE_COMMAND_ID));
    968          }
    969          
    970          // zcl color-control movetosat <saturation:1> <transition time:2>
    971          void zclColorControlMoveToSatCommand(void)
    972          {
    973            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    974                                   ZCL_MOVE_TO_SATURATION_COMMAND_ID);
    975          }
    976          
    977          // zcl color-control movesat <move mode:1> <rate:1>
    978          void zclColorControlMoveSatCommand(void)
    979          {
    980            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    981                                   ZCL_MOVE_SATURATION_COMMAND_ID);
    982          }
    983          
    984          // zcl color-control stepsat <step mode:1> <step size:1> <transition time:1>
    985          void zclColorControlStepSatCommand(void)
    986          {
    987            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    988                                   ZCL_STEP_SATURATION_COMMAND_ID);
    989          }
    990          
    991          // zcl color-control movetohueandsat <hue:1> <saturation:1> <transition time:2>
    992          // zcl color-control emovetohueandsat <enhanced hue:2> <saturation:1> <transition time:2>
    993          void zclColorControlMoveToHueAndSatCommand(void)
    994          {
    995            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    996                                   (emberCurrentCommand->name[0] != 'e'
    997                                    ? ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID
    998                                    : ZCL_ENHANCED_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID));
    999          }
   1000          
   1001          // zcl color-control movetocolor <color x:2> <color y:2> <transition time:2>
   1002          void zclColorControlMoveToColorCommand(void)
   1003          {
   1004            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1005                                   ZCL_MOVE_TO_COLOR_COMMAND_ID);
   1006          }
   1007          
   1008          // zcl color-control movecolor <rate x:2> <rate y:2>
   1009          // zcl color-control movecolortemp <move mode:1> <rate:2> <color temperature min:2> <color temperature max:2>
   1010          void zclColorControlMoveColorCommand(void)
   1011          {
   1012            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1013                                   (emberCurrentCommand->argumentTypes[0] == 'r'
   1014                                    ? ZCL_MOVE_COLOR_COMMAND_ID
   1015                                    : ZCL_MOVE_COLOR_TEMPERATURE_COMMAND_ID));
   1016          }
   1017          
   1018          // zcl color-control stepcolor <step x:2> <step y:2> <transition time:2>
   1019          // zcl color-control stepcolortemp <step mode:1> <step size:2> <transition time:2> <color temperature min:2> <color temperature max:2>
   1020          void zclColorControlStepColorCommand(void)
   1021          {
   1022            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1023                                   (emberCurrentCommand->argumentTypes[0] == 'r'
   1024                                    ? ZCL_STEP_COLOR_COMMAND_ID
   1025                                    : ZCL_STEP_COLOR_TEMPERATURE_COMMAND_ID));
   1026          }
   1027          
   1028          // zcl color-control movetocolortemp <color temperature:2> <transition time:2>
   1029          void zclColorControlMoveToColorTemperatureCommand(void)
   1030          {
   1031            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1032                                   ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID);
   1033          }
   1034          
   1035          // zcl color-control loop <update flags:1> <action:1> <direction:1> <time:2> <start hue:2>
   1036          void zclColorControlColorLoopSetCommand(void)
   1037          {
   1038            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1039                                   ZCL_COLOR_LOOP_SET_COMMAND_ID);
   1040          }
   1041          
   1042          // zcl color-control stopmovestep
   1043          void zclColorControlStopMoveStepCommand(void)
   1044          {
   1045            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
   1046                                   ZCL_STOP_MOVE_STEP_COMMAND_ID);
   1047          }
   1048          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
   1049          
   1050          #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
   1051          void zclPollControlFastPollStopCommand(void)
   1052          {
   1053            zclSimpleClientCommand(ZCL_POLL_CONTROL_CLUSTER_ID,
   1054                                   ZCL_FAST_POLL_STOP_COMMAND_ID);
   1055          }
   1056          
   1057          // zcl poll-control long <long poll interval:4>
   1058          // zcl poll-control short <short poll interval:2>
   1059          void zclPollControlSetPollIntervalCommand(void)
   1060          {
   1061            zclSimpleClientCommand(ZCL_POLL_CONTROL_CLUSTER_ID,
   1062                                   (emberCurrentCommand->name[0] == 'l'
   1063                                    ? ZCL_SET_LONG_POLL_INTERVAL_COMMAND_ID
   1064                                    : ZCL_SET_SHORT_POLL_INTERVAL_COMMAND_ID));
   1065          }
   1066          #endif
   1067          
   1068          #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   1069          //zcl power-profile profile <profile id:1>
   1070          void zclPowerProfileRequestCommand(void)
   1071          {
   1072            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1073                                   ZCL_POWER_PROFILE_REQUEST_COMMAND_ID);
   1074          }
   1075          
   1076          //zcl power-profile state
   1077          void zclPowerProfileStateRequestCommand(void)
   1078          {
   1079            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1080                                   ZCL_POWER_PROFILE_STATE_REQUEST_COMMAND_ID);
   1081          }
   1082          
   1083          //zcl power-profile energy-phases-schedule <profile id:1> <num scheduled phases:1> [<energy phase ID:1> <scheduled time:2> * num scheduled phases]
   1084          void zclPowerProfileEnergyPhasesScheduleNotificationCommand(void)
   1085          {
   1086            uint8_t i;
   1087            uint8_t numScheduledPhases = (uint8_t)emberUnsignedCommandArgument(1);
   1088          
   1089            //Check if an even number of args and minimum number of args were supplied
   1090            if (emberCommandArgumentCount() & 1 || emberCommandArgumentCount() < 2) {
   1091              emberAfGuaranteedPrintln("Wrong number of args");
   1092              emberAfGuaranteedPrintln("Usage:");
   1093              emberAfGuaranteedPrint("<profile id:1> <num scheduled phases:1> ");
   1094              emberAfGuaranteedPrint("[<energy phase ID:1> <scheduled time:2> * ");
   1095              emberAfGuaranteedPrintln("num scheduled phases]");
   1096            } else {
   1097              zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1098                             | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1099                             ZCL_POWER_PROFILE_CLUSTER_ID,
   1100                             ZCL_ENERGY_PHASES_SCHEDULE_NOTIFICATION_COMMAND_ID);
   1101          
   1102              zclBufferAddByteFromArgument(0);   // profile id
   1103              zclBufferAddByte(numScheduledPhases); // number scheduled phase count
   1104          
   1105              //Add energy phase ID and scheduled time pairs
   1106              for (i = 2; (i + 1) < emberCommandArgumentCount(); i += 2) {
   1107                zclBufferAddByteFromArgument(i);
   1108                zclBufferAddWordFromArgument(i + 1);
   1109              }
   1110              cliBufferPrint();
   1111            }
   1112          }
   1113          
   1114          //zcl power-profile schedule-constraints <profile id:1>
   1115          void zclPowerProfileScheduleConstraintsRequestCommand(void)
   1116          {
   1117            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1118                                   ZCL_POWER_PROFILE_SCHEDULE_CONSTRAINTS_REQUEST_COMMAND_ID);
   1119          }
   1120          
   1121          //zcl power-profile energy-phases-schedule-states <profile id:1>
   1122          void zclPowerProfileEnergyPhasesScheduleStateRequestCommand(void)
   1123          {
   1124            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1125                                   ZCL_ENERGY_PHASES_SCHEDULE_STATE_REQUEST_COMMAND_ID);
   1126          }
   1127          #endif //ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   1128          
   1129          #ifndef EMBER_AF_GENERATE_CLI
   1130          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   1131          static void zclWindowCoveringUpCommand(void)
   1132          {
   1133            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1134                                   ZCL_WINDOW_COVERING_UP_OPEN_COMMAND_ID);
   1135          }
   1136          
   1137          static void zclWindowCoveringDownCommand(void)
   1138          {
   1139            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1140                                   ZCL_WINDOW_COVERING_DOWN_CLOSE_COMMAND_ID);
   1141          }
   1142          
   1143          static void zclWindowCoveringStopCommand(void)
   1144          {
   1145            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1146                                   ZCL_WINDOW_COVERING_STOP_COMMAND_ID);
   1147          }
   1148          
   1149          static void zclWindowCoveringGoToLiftValueCommand(void)
   1150          {
   1151            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1152                                   ZCL_WINDOW_COVERING_GO_TO_LIFT_VALUE_COMMAND_ID);
   1153          }
   1154          
   1155          static void zclWindowCoveringGoToLiftPercentageCommand(void)
   1156          {
   1157            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1158                                   ZCL_WINDOW_COVERING_GO_TO_LIFT_PERCENTAGE_COMMAND_ID);
   1159          }
   1160          
   1161          static void zclWindowCoveringGoToTiltValueCommand(void)
   1162          {
   1163            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1164                                   ZCL_WINDOW_COVERING_GO_TO_TILT_VALUE_COMMAND_ID);
   1165          }
   1166          
   1167          static void zclWindowCoveringGoToTiltPercentageCommand(void)
   1168          {
   1169            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1170                                   ZCL_WINDOW_COVERING_GO_TO_TILT_PERCENTAGE_COMMAND_ID);
   1171          }
   1172          #endif //ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   1173          #endif //EMBER_AF_GENERATE_CLI
   1174          
   1175          #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   1176          // zcl drlc lce <eventId:4> <start:4> <duration:2> <event control:1>
   1177          void zclDrlcLoadControlEventCommand(void)
   1178          {
   1179            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1180                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1181                           ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1182                           ZCL_LOAD_CONTROL_EVENT_COMMAND_ID);
   1183            zclBufferAddInt32FromArgument(0);  // event id
   1184            zclBufferAddWord(0x0fff);          // all device classes
   1185            zclBufferAddByteFromArgument(1);   // UEG
   1186            zclBufferAddInt32FromArgument(2);  // start
   1187            zclBufferAddWordFromArgument(3);   // duration
   1188            zclBufferAddByte(1);               // criticality level, normal
   1189            zclBufferAddByte(0);               // 1.1c cooling temp offset
   1190            zclBufferAddByte(0);               // 1.1c heating temp offset
   1191            zclBufferAddWord(0x1a09);          // cool temp set point 23.3c
   1192            zclBufferAddWord(0x1a09);          // heat temp set point
   1193            zclBufferAddByte(0x0a);            // -10% avg load percent
   1194            zclBufferAddByte(0);               // duty cycle
   1195            zclBufferAddByteFromArgument(4);   // event control
   1196            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1197            cliBufferPrint();
   1198          }
   1199          
   1200          // zcl drlc cl <eventId:4> <device class:2> <ueg: 1> <cancel control: 1> <start time:4>
   1201          void zclDrlcCancelCommand(void)
   1202          {
   1203            zclSimpleServerCommand(ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1204                                   ZCL_CANCEL_LOAD_CONTROL_EVENT_COMMAND_ID);
   1205            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1206          }
   1207          
   1208          // zcl drlc ca
   1209          void zclDrlcCancelAllCommand(void)
   1210          {
   1211            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1212                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1213                           ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1214                           ZCL_CANCEL_ALL_LOAD_CONTROL_EVENTS_COMMAND_ID);
   1215            zclBufferAddByte(0);  // bogus time
   1216            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1217            cliBufferPrint();
   1218          }
   1219          
   1220          #else
   1221          // TODO: the generated CLI is sucking in this method regardless of whether or not it should;
   1222          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but
   1223          // for now I'm stubbing it. - Jeremy

   \                                 In section .text, align 2, keep-with-next
   1224          void zclDrlcLoadControlEventCommand(void)
   1225          {
   1226          }
   \                     zclDrlcLoadControlEventCommand: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1227          
   1228          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   1229          
   1230          #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   1231          // zcl drlc gse <start time:4> <number of events:1>
   1232          void zclDrlcGetScheduledEventsCommand(void)
   1233          {
   1234            zclSimpleClientCommand(ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1235                                   ZCL_GET_SCHEDULED_EVENTS_COMMAND_ID);
   1236          }
   1237          
   1238          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   1239          
   1240          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   1241          // zcl sm  gp <type:1> <time:4> <intervals:1>
   1242          void zclSimpleMeteringGetProfileCommand(void)
   1243          {
   1244            zclSimpleClientCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1245                                   ZCL_GET_PROFILE_COMMAND_ID);
   1246          }
   1247          
   1248          // zcl sm fp <update period:1> <duration:1>
   1249          void zclSimpleMeteringFastPollCommand(void)
   1250          {
   1251            zclSimpleClientCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1252                                   ZCL_REQUEST_FAST_POLL_MODE_COMMAND_ID);
   1253          }
   1254          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   1255          
   1256          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   1257          // zcl sm rm
   1258          void zclSimpleMeteringRequestMirrorCommand(void)
   1259          {
   1260            zclSimpleServerCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1261                                   ZCL_REQUEST_MIRROR_COMMAND_ID);
   1262          }
   1263          
   1264          // zcl sm dm
   1265          void zclSimpleMeteringDeleteMirrorCommand(void)
   1266          {
   1267            zclSimpleServerCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1268                                   ZCL_MIRROR_REMOVED_COMMAND_ID);
   1269          }
   1270          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   1271          
   1272          #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   1273          // zcl price current
   1274          void zclPriceGetCurrentCommand(void)
   1275          {
   1276            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1277                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1278                           ZCL_PRICE_CLUSTER_ID,
   1279                           ZCL_GET_CURRENT_PRICE_COMMAND_ID);
   1280            zclBufferAddByte(0);  // command options
   1281            cliBufferPrint();
   1282          }
   1283          
   1284          // zcl price scheduled <startTime:4> <num-events:1>
   1285          void zclPriceGetScheduleCommand(void)
   1286          {
   1287            zclSimpleClientCommand(ZCL_PRICE_CLUSTER_ID,
   1288                                   ZCL_GET_SCHEDULED_PRICES_COMMAND_ID);
   1289          }
   1290          #endif //ZCL_USING_PRICE_CLUSTER_CLIENT
   1291          
   1292          #ifdef ZCL_USING_MESSAGING_CLUSTER_CLIENT
   1293          // zcl message get
   1294          void zclMessageGetCommand(void)
   1295          {
   1296            zclSimpleClientCommand(ZCL_MESSAGING_CLUSTER_ID,
   1297                                   ZCL_GET_LAST_MESSAGE_COMMAND_ID);
   1298          }
   1299          #endif //ZCL_USING_MESSAGING_CLUSTER_CLIENT
   1300          
   1301          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   1302          // zcl tunnel match <address bytes>
   1303          void zclTunnelMatchCommand(void)
   1304          {
   1305            zclSimpleClientCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1306                                   ZCL_MATCH_PROTOCOL_ADDRESS_COMMAND_ID);
   1307          }
   1308          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   1309          
   1310          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   1311          // zcl tunnel advertise <address bytes>
   1312          void zclTunnelAdvertiseCommand(void)
   1313          {
   1314            zclSimpleServerCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1315                                   ZCL_ADVERTISE_PROTOCOL_ADDRESS_COMMAND_ID);
   1316          }
   1317          
   1318          // zcl tunnel response
   1319          void zclTunnelResponseCommand(void)
   1320          {
   1321            zclSimpleServerCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1322                                   ZCL_MATCH_PROTOCOL_ADDRESS_RESPONSE_COMMAND_ID);
   1323          }
   1324          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   1325          
   1326          #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   1327          // zcl bacnet transfer-npdu fixed <length:1> <bytes>
   1328          void zclBacnetTransferFixedCommand(void)
   1329          {
   1330            // not done yet
   1331          }
   1332          
   1333          // zcl bacnet transfer-npdu random <length:1>
   1334          void zclBacnetTransferRandomCommand(void)
   1335          {
   1336            uint8_t i;
   1337            uint8_t length = (uint8_t)emberUnsignedCommandArgument(0);
   1338            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1339                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1340                           ZCL_BACNET_PROTOCOL_TUNNEL_CLUSTER_ID,
   1341                           ZCL_TRANSFER_NPDU_COMMAND_ID);
   1342            zclBufferAddByte(length);
   1343            for (i = 0; i < length; i++) {
   1344              zclBufferAddByte(LOW_BYTE(emberGetPseudoRandomNumber()));
   1345            }
   1346            cliBufferPrint();
   1347          }
   1348          
   1349          // zcl bacnet transfer-npdu whois
   1350          void zclBacnetTransferWhoisCommand(void)
   1351          {
   1352            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1353                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1354                           ZCL_BACNET_PROTOCOL_TUNNEL_CLUSTER_ID,
   1355                           ZCL_TRANSFER_NPDU_COMMAND_ID);
   1356            //zclBufferAddByte(0);            // what is this?
   1357            zclBufferAddInt32(0xFFFF2001);
   1358            zclBufferAddInt32(0x0810FF00);
   1359            cliBufferPrint();
   1360          }
   1361          #endif //ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   1362          
   1363          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   1364          // zcl lock [ lock | unlock ]
   1365          void zclDoorLockCommand(void)
   1366          {
   1367            zclSimpleClientCommand(ZCL_DOOR_LOCK_CLUSTER_ID,
   1368                                   (emberCurrentCommand->name[0] == 'l'
   1369                                    ? ZCL_LOCK_DOOR_COMMAND_ID
   1370                                    : ZCL_UNLOCK_DOOR_COMMAND_ID));
   1371          }
   1372          #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   1373          
   1374          #ifdef ZCL_USING_TUNNELING_CLUSTER_CLIENT
   1375          // zcl tunneling request <protocol id:1> <manufacturer code:2> <flow control:1> <maxIncomingTxSize:2>
   1376          void zclTunnelingRequestCommand(void)
   1377          {
   1378            zclSimpleClientCommand(ZCL_TUNNELING_CLUSTER_ID,
   1379                                   ZCL_REQUEST_TUNNEL_COMMAND_ID);
   1380            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1381          }
   1382          
   1383          // zcl tunneling close <tunnel id:2>
   1384          void zclTunnelingCloseCommand(void)
   1385          {
   1386            zclSimpleClientCommand(ZCL_TUNNELING_CLUSTER_ID,
   1387                                   ZCL_CLOSE_TUNNEL_COMMAND_ID);
   1388            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1389          }
   1390          
   1391          // zcl tunneling transfer-to-server <tunnel id:2> <data>
   1392          void zclTunnelingTransferToServerCommand(void)
   1393          {
   1394            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1395                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1396                           ZCL_TUNNELING_CLUSTER_ID,
   1397                           ZCL_TRANSFER_DATA_CLIENT_TO_SERVER_COMMAND_ID);
   1398            zclBufferAddWordFromArgument(0);              // tunnel id
   1399            appZclBufferLen += emberCopyStringArgument(1, // data
   1400                                                       appZclBuffer + appZclBufferLen,
   1401                                                       0xFF,   // copy as much data as possible
   1402                                                       false); // no padding
   1403            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1404            cliBufferPrint();
   1405          }
   1406          
   1407          // zcl tunneling random-to-server <tunnel id:2> <length:2>
   1408          void zclTunnelingRandomToServerCommand(void)
   1409          {
   1410            uint16_t length = (uint16_t)emberUnsignedCommandArgument(1); // length of random data
   1411            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1412                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1413                           ZCL_TUNNELING_CLUSTER_ID,
   1414                           ZCL_TRANSFER_DATA_CLIENT_TO_SERVER_COMMAND_ID);
   1415            zclBufferAddWordFromArgument(0); // tunnel id
   1416            appZclBufferLen = (appZclBufferLen + length < APP_ZCL_BUFFER_SIZE
   1417                               ? appZclBufferLen + length
   1418                               : APP_ZCL_BUFFER_SIZE);
   1419            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1420            cliBufferPrint();
   1421          }
   1422          #endif //ZCL_USING_TUNNELING_CLUSTER_CLIENT
   1423          
   1424          #ifdef ZCL_USING_TUNNELING_CLUSTER_SERVER
   1425          // zcl tunneling transfer-to-client <tunnel id:2> <data>
   1426          void zclTunnelingTransferToClientCommand(void)
   1427          {
   1428            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1429                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1430                           ZCL_TUNNELING_CLUSTER_ID,
   1431                           ZCL_TRANSFER_DATA_SERVER_TO_CLIENT_COMMAND_ID);
   1432            zclBufferAddWordFromArgument(0);              // tunnel id
   1433            appZclBufferLen += emberCopyStringArgument(1, // data
   1434                                                       appZclBuffer + appZclBufferLen,
   1435                                                       0xFF,   // copy as much data as possible
   1436                                                       false); // no padding
   1437            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1438            cliBufferPrint();
   1439          }
   1440          
   1441          // zcl tunneling random-to-client <tunnel id:2> <length:2>
   1442          void zclTunnelingRandomToClientCommand(void)
   1443          {
   1444            uint16_t length = (uint16_t)emberUnsignedCommandArgument(1); // length of random data
   1445            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1446                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1447                           ZCL_TUNNELING_CLUSTER_ID,
   1448                           ZCL_TRANSFER_DATA_SERVER_TO_CLIENT_COMMAND_ID);
   1449            zclBufferAddWordFromArgument(0); // tunnel id
   1450            appZclBufferLen = (appZclBufferLen + length < APP_ZCL_BUFFER_SIZE
   1451                               ? appZclBufferLen + length
   1452                               : APP_ZCL_BUFFER_SIZE);
   1453            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1454            cliBufferPrint();
   1455          }
   1456          #endif //ZCL_USING_TUNNELING_CLUSTER_SERVER
   1457          
   1458          // ******************************************************
   1459          // send <id> <src endpoint> <dst endpoint>
   1460          // send_multicast <group id> <src endpoint>
   1461          //
   1462          // FFFC = all routers
   1463          // FFFD = all non-sleepy
   1464          // FFFF = all devices, include sleepy
   1465          // ******************************************************

   \                                 In section .text, align 2, keep-with-next
   1466          void emAfCliSendCommand(void)
   1467          {
   \                     emAfCliSendCommand: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   1468            uint16_t destination = (uint16_t)emberUnsignedCommandArgument(0);
   \        0x4   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_5: (+1)
   \        0x8   0x....'....        BL       ?Subroutine8
   1469            uint8_t srcEndpoint = (uint8_t)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_25: (+1)
   \        0xC   0x4607             MOV      R7,R0
   1470            uint8_t dstEndpoint = (uint8_t)emberUnsignedCommandArgument(2);
   \        0xE   0x....'....        BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_40: (+1)
   \       0x12   0x4601             MOV      R1,R0
   1471            uint8_t *commandName = (uint8_t *)emberCurrentCommand->name;
   \       0x14   0x....'....        LDR.W    R0,??DataTable35_11
   \       0x18   0x6802             LDR      R2,[R0, #+0]
   1472            EmberStatus status;
   1473            uint8_t label;
   1474          
   1475            // check that cmd is built
   1476            if (zclCmdIsBuilt == false) {
   \       0x1A   0x....'....        LDR.W    R6,??DataTable35_2
   \       0x1E   0x7830             LDRB     R0,[R6, #+0]
   \       0x20   0x6815             LDR      R5,[R2, #+0]
   \       0x22   0xB930             CBNZ.N   R0,??emAfCliSendCommand_0
   1477              emberAfCorePrintln("no cmd");
   \       0x24   0x....'....        LDR.W    R1,??DataTable35_17
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \       0x2E   0x....'....        B.W      emberAfPrintln
   1478              return;
   1479            }
   1480          
   1481            emAfApsFrameEndpointSetup(srcEndpoint, dstEndpoint);
   \                     ??emAfCliSendCommand_0: (+1)
   \       0x32   0xB2C9             UXTB     R1,R1
   \       0x34   0xB2F8             UXTB     R0,R7
   \       0x36   0x....'....        BL       emAfApsFrameEndpointSetup
   1482          
   1483            if (emberAfPreCliSendCallback(&globalApsFrame,
   1484                                          emberAfGetNodeId(),
   1485                                          destination,
   1486                                          appZclBuffer,
   1487                                          appZclBufferLen)) {
   \       0x3A   0x....'....        BL       emberAfGetNodeId
   \       0x3E   0x....'....        LDR.W    R7,??DataTable35_3
   \       0x42   0x8839             LDRH     R1,[R7, #+0]
   \       0x44   0x....'....        LDR.W    R9,??DataTable35
   \       0x48   0x....'....        LDR.W    R8,??DataTable35_1
   \       0x4C   0x9100             STR      R1,[SP, #+0]
   \       0x4E   0x4601             MOV      R1,R0
   \       0x50   0x4643             MOV      R3,R8
   \       0x52   0xB2A2             UXTH     R2,R4
   \       0x54   0x4648             MOV      R0,R9
   \       0x56   0x....'....        BL       emberAfPreCliSendCallback
   \       0x5A   0xBB80             CBNZ.N   R0,??emAfCliSendCommand_1
   1488              return;
   1489            }
   1490          
   1491            if (commandName[4] == '_') {
   \       0x5C   0x7928             LDRB     R0,[R5, #+4]
   \       0x5E   0x883A             LDRH     R2,[R7, #+0]
   \       0x60   0x285F             CMP      R0,#+95
   \       0x62   0xD105             BNE.N    ??emAfCliSendCommand_2
   1492              label = 'M';
   1493              status = emberAfSendMulticast(destination,
   1494                                            &globalApsFrame,
   1495                                            appZclBufferLen,
   1496                                            appZclBuffer);
   \       0x64   0x4643             MOV      R3,R8
   \       0x66   0x4649             MOV      R1,R9
   \       0x68   0xB2A0             UXTH     R0,R4
   \       0x6A   0x....'....        BL       emberAfSendMulticast
   \       0x6E   0xE011             B.N      ??emAfCliSendCommand_3
   1497            } else if (destination >= EMBER_BROADCAST_ADDRESS) {
   \                     ??emAfCliSendCommand_2: (+1)
   \       0x70   0xB2A0             UXTH     R0,R4
   \       0x72   0xF64F 0x71FC      MOVW     R1,#+65532
   \       0x76   0x4288             CMP      R0,R1
   \       0x78   0xDB04             BLT.N    ??emAfCliSendCommand_4
   1498              label = 'B';
   1499              status = emberAfSendBroadcast(destination,
   1500                                            &globalApsFrame,
   1501                                            appZclBufferLen,
   1502                                            appZclBuffer);
   \       0x7A   0x4643             MOV      R3,R8
   \       0x7C   0x4649             MOV      R1,R9
   \       0x7E   0x....'....        BL       emberAfSendBroadcast
   \       0x82   0xE007             B.N      ??emAfCliSendCommand_3
   1503            } else {
   1504              label = 'U';
   1505              status = emberAfSendUnicast(EMBER_OUTGOING_DIRECT,
   1506                                          destination,
   1507                                          &globalApsFrame,
   1508                                          appZclBufferLen,
   1509                                          appZclBuffer);
   \                     ??emAfCliSendCommand_4: (+1)
   \       0x84   0x4613             MOV      R3,R2
   \       0x86   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x8A   0x464A             MOV      R2,R9
   \       0x8C   0xB2A1             UXTH     R1,R4
   \       0x8E   0x2000             MOVS     R0,#+0
   \       0x90   0x....'....        BL       emberAfSendUnicast
   1510            }
   1511          
   1512            if (status != EMBER_SUCCESS) {
   \                     ??emAfCliSendCommand_3: (+1)
   \       0x94   0x0001             MOVS     R1,R0
   \       0x96   0xD005             BEQ.N    ??emAfCliSendCommand_5
   1513              emberAfCorePrintln("Error: CLI Send failed, status: 0x%X", status);
   \       0x98   0x4602             MOV      R2,R0
   \       0x9A   0x....'....        LDR.W    R1,??DataTable35_18
   \       0x9E   0x2001             MOVS     R0,#+1
   \       0xA0   0x....'....        BL       emberAfPrintln
   1514            }
   1515            UNUSED_VAR(label);
   1516            emberAfDebugPrintln("T%4x:TX (%p) %ccast 0x%x%p",
   1517                                emberAfGetCurrentTime(),
   1518                                "CLI",
   1519                                label,
   1520                                status,
   1521                                ((globalApsFrame.options & EMBER_APS_OPTION_ENCRYPTION)
   1522                                 ? " w/ link key" : ""));
   1523            emberAfDebugPrint("TX buffer: [");
   1524            emberAfDebugFlush();
   1525            emberAfDebugPrintBuffer(appZclBuffer, appZclBufferLen, true);
   1526            emberAfDebugPrintln("]");
   1527            emberAfDebugFlush();
   1528          
   1529            zclCmdIsBuilt = false;
   \                     ??emAfCliSendCommand_5: (+1)
   \       0xA4   0x2000             MOVS     R0,#+0
   \       0xA6   0x7030             STRB     R0,[R6, #+0]
   1530            mfgSpecificId = EMBER_AF_NULL_MANUFACTURER_CODE;
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0x....'....        LDR.W    R2,??DataTable35_8
   \       0xAE   0x8011             STRH     R1,[R2, #+0]
   1531            disableDefaultResponse = 0;
   \       0xB0   0x2300             MOVS     R3,#+0
   \       0xB2   0x....'....        LDR.W    R0,??DataTable35_9
   \       0xB6   0x7003             STRB     R3,[R0, #+0]
   1532            useNextSequence = false;
   \       0xB8   0x....'....        LDR.W    R2,??DataTable35_7
   \       0xBC   0x7011             STRB     R1,[R2, #+0]
   1533          }
   \                     ??emAfCliSendCommand_1: (+1)
   \       0xBE   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   1534          
   1535          // **********************************************************************
   1536          // send-using-multicast-binding <useMulticastBinding> - when sending
   1537          //            using a binding, specify whether to use a multicast binding
   1538          //
   1539          // **********************************************************************

   \                                 In section .text, align 2, keep-with-next
   1540          void emAfCliSendUsingMulticastBindingCommand(void)
   1541          {
   \                     emAfCliSendUsingMulticastBindingCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1542            useMulticastBinding = (bool)emberUnsignedCommandArgument(0);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_4: (+1)
   \        0x6   0xB100             CBZ.N    R0,??emAfCliSendUsingMulticastBindingCommand_0
   \        0x8   0x2001             MOVS     R0,#+1
   \                     ??emAfCliSendUsingMulticastBindingCommand_0: (+1)
   \        0xA   0x....'....        LDR.W    R1,??DataTable35_19
   \        0xE   0x7008             STRB     R0,[R1, #+0]
   1543          }
   \       0x10   0xBD01             POP      {R0,PC}          ;; return
   1544          
   1545          // **********************************************************************
   1546          // bsend <src endpoint> - send using a binding based on the clusterId in
   1547          //            the globalApsFrame and the srcEndpoint specified (if the
   1548          //            src endpoint is zero it only sends based on the clusterId)
   1549          //
   1550          // **********************************************************************

   \                                 In section .text, align 2, keep-with-next
   1551          void emAfCliBsendCommand(void)
   1552          {
   1553            uint8_t srcEndpointToUse, i;
   1554            EmberStatus status;
   1555            EmberBindingTableEntry candidate;
   1556          
   1557            // check that cmd is built
   1558            if (zclCmdIsBuilt == false) {
   \                     emAfCliBsendCommand: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_2
   \        0x2   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x6   0x7808             LDRB     R0,[R1, #+0]
   \        0x8   0xB085             SUB      SP,SP,#+20
   \        0xA   0xB920             CBNZ.N   R0,??emAfCliBsendCommand_0
   1559              emberAfCorePrintln("cmd not built");
   \        0xC   0x....'....        LDR.W    R1,??DataTable35_20
   \       0x10   0x....'....        BL       ??Subroutine10_0
   1560              return;
   \                     ??CrossCallReturnLabel_31: (+1)
   \       0x14   0xE042             B.N      ??emAfCliBsendCommand_1
   1561            }
   1562          
   1563            srcEndpointToUse = (uint8_t)emberUnsignedCommandArgument(0);
   \                     ??emAfCliBsendCommand_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x....             LDR.N    R5,??DataTable35
   \       0x1A   0x....'....        BL       emberUnsignedCommandArgument
   1564          
   1565            emberAfCorePrintln("src ep %x, clus %2x",
   1566                               srcEndpointToUse,
   1567                               globalApsFrame.clusterId);
   \       0x1E   0x886B             LDRH     R3,[R5, #+2]
   \       0x20   0xB2C4             UXTB     R4,R0
   \       0x22   0x4622             MOV      R2,R4
   \       0x24   0x....             LDR.N    R1,??DataTable35_21
   \       0x26   0x....'....        BL       ?Subroutine11
   1568          
   1569            if (useMulticastBinding) {
   \                     ??CrossCallReturnLabel_37: (+1)
   \       0x2A   0x....             LDR.N    R1,??DataTable35_19
   \       0x2C   0x7808             LDRB     R0,[R1, #+0]
   \       0x2E   0x....             LDR.N    R6,??DataTable35_3
   \       0x30   0x....'....        LDR.W    R9,??DataTable35_1
   \       0x34   0xB148             CBZ.N    R0,??emAfCliBsendCommand_2
   1570              emberAfCorePrintln("sending to multicast bind");
   \       0x36   0x....             LDR.N    R1,??DataTable35_22
   \       0x38   0x....'....        BL       ??Subroutine10_0
   1571          
   1572              globalApsFrame.sourceEndpoint = srcEndpointToUse;
   \                     ??CrossCallReturnLabel_30: (+1)
   \       0x3C   0x712C             STRB     R4,[R5, #+4]
   1573          
   1574              status = emberAfSendMulticastToBindings(&globalApsFrame,
   1575                                                      appZclBufferLen,
   1576                                                      appZclBuffer);
   \       0x3E   0x8831             LDRH     R1,[R6, #+0]
   \       0x40   0x464A             MOV      R2,R9
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0x....'....        BL       emberAfSendMulticastToBindings
   \       0x48   0xE028             B.N      ??emAfCliBsendCommand_1
   1577          
   1578              emberAfDebugPrintln("T%4x:TX (%p) %ccast 0x%x%p",
   1579                                  emberAfGetCurrentTime(),
   1580                                  "CLI",
   1581                                  'U',
   1582                                  status,
   1583                                  ((globalApsFrame.options & EMBER_APS_OPTION_ENCRYPTION)
   1584                                   ? " w/ link key" : ""));
   1585              emberAfDebugPrint("TX buffer: [");
   1586              emberAfDebugFlush();
   1587              emberAfDebugPrintBuffer(appZclBuffer, appZclBufferLen, true);
   1588              emberAfDebugPrintln("]");
   1589              emberAfDebugFlush();
   1590            } else {
   1591              // find a binding to send on
   1592              for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \                     ??emAfCliBsendCommand_2: (+1)
   \       0x4A   0x2700             MOVS     R7,#+0
   \       0x4C   0x....'....        LDR.W    R8,??DataTable35_23
   1593                status = emberGetBinding(i, &candidate);
   1594          
   1595                // if we can read the binding, it is unicast, the endpoint is the
   1596                // one we want (or we have no preference) and the cluster matches
   1597                // then use that binding to send the message
   1598                if (status == EMBER_SUCCESS
   1599                    && candidate.type == EMBER_UNICAST_BINDING
   1600                    && (srcEndpointToUse == 0
   1601                        || candidate.local == srcEndpointToUse)
   1602                    && candidate.clusterId == globalApsFrame.clusterId) {
   \                     ??emAfCliBsendCommand_3: (+1)
   \       0x50   0xA901             ADD      R1,SP,#+4
   \       0x52   0xB2F8             UXTB     R0,R7
   \       0x54   0x....'....        BL       emberGetBinding
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xBF04             ITT      EQ 
   \       0x5C   0xF89D 0x0004      LDRBEQ   R0,[SP, #+4]
   \       0x60   0x2801             CMPEQ    R0,#+1
   \       0x62   0xD117             BNE.N    ??emAfCliBsendCommand_4
   \       0x64   0x2C00             CMP      R4,#+0
   \       0x66   0xBF1C             ITT      NE 
   \       0x68   0xF89D 0x0005      LDRBNE   R0,[SP, #+5]
   \       0x6C   0x42A0             CMPNE    R0,R4
   \       0x6E   0xBF02             ITTT     EQ 
   \       0x70   0xF8BD 0x0006      LDRHEQ   R0,[SP, #+6]
   \       0x74   0x8869             LDRHEQ   R1,[R5, #+2]
   \       0x76   0x4288             CMPEQ    R0,R1
   \       0x78   0xD10C             BNE.N    ??emAfCliBsendCommand_4
   1603                  emberAfCorePrintln("sending to bind %x", i);
   \       0x7A   0xB2FA             UXTB     R2,R7
   \       0x7C   0x4641             MOV      R1,R8
   \       0x7E   0x2001             MOVS     R0,#+1
   \       0x80   0x....'....        BL       emberAfPrintln
   1604          
   1605                  status = emberAfSendUnicast(EMBER_OUTGOING_VIA_BINDING,
   1606                                              i,
   1607                                              &globalApsFrame,
   1608                                              appZclBufferLen,
   1609                                              appZclBuffer);
   \       0x84   0x8833             LDRH     R3,[R6, #+0]
   \       0x86   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x8A   0x462A             MOV      R2,R5
   \       0x8C   0xB2F9             UXTB     R1,R7
   \       0x8E   0x2002             MOVS     R0,#+2
   \       0x90   0x....'....        BL       emberAfSendUnicast
   1610          
   1611                  emberAfDebugPrintln("T%4x:TX (%p) %ccast 0x%x%p",
   1612                                      emberAfGetCurrentTime(),
   1613                                      "CLI",
   1614                                      'U',
   1615                                      status,
   1616                                      ((globalApsFrame.options & EMBER_APS_OPTION_ENCRYPTION)
   1617                                       ? " w/ link key" : ""));
   1618                  emberAfDebugPrint("TX buffer: [");
   1619                  emberAfDebugFlush();
   1620                  emberAfDebugPrintBuffer(appZclBuffer, appZclBufferLen, true);
   1621                  emberAfDebugPrintln("]");
   1622                  emberAfDebugFlush();
   1623                }
   1624              }
   \                     ??emAfCliBsendCommand_4: (+1)
   \       0x94   0x1C7F             ADDS     R7,R7,#+1
   \       0x96   0xB2F8             UXTB     R0,R7
   \       0x98   0x2802             CMP      R0,#+2
   \       0x9A   0xDDD9             BLE.N    ??emAfCliBsendCommand_3
   1625            }
   1626          }
   \                     ??emAfCliBsendCommand_1: (+1)
   \       0x9C   0xB005             ADD      SP,SP,#+20
   \       0x9E   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_17
   \                     ??Subroutine10_0: (+1)
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x....'....        B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x....'....        B.W      emberAfPrintln
   1627          
   1628          // timesync <id> <src endpoint> <dest endpoint>
   1629          //
   1630          // This sends a read attr for the time of the device specified. It sets a flag
   1631          // so when it gets the response it writes the time to its own time attr

   \                                 In section .text, align 2, keep-with-next
   1632          void emAfCliTimesyncCommand(void)
   1633          {
   \                     emAfCliTimesyncCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1634            // send a read attr for time
   1635            zclBufferSetup(ZCL_GLOBAL_COMMAND | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1636                           ZCL_TIME_CLUSTER_ID,
   1637                           ZCL_READ_ATTRIBUTES_COMMAND_ID);
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x210A             MOVS     R1,#+10
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....'....        BL       zclBufferSetup
   1638            zclBufferAddWord(ZCL_TIME_ATTRIBUTE_ID);
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x....'....        BL       zclBufferAddWord
   1639            emAfSyncingTime = true;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x....             LDR.N    R1,??DataTable35_24
   \       0x16   0x7008             STRB     R0,[R1, #+0]
   1640            cliBufferPrint();
   \       0x18   0x....'....        BL       cliBufferPrint
   1641            emAfCliSendCommand();
   \       0x1C   0xE8BD 0x4001      POP      {R0,LR}
   \       0x20   0x....             B.N      emAfCliSendCommand
   1642          }
   1643          
   1644          // interpan group <groupId:2> <destPAN:2> <destProfileID:2>
   1645          // interpan short <shortId:2> <destPAN:2> <destProfileID:2>

   \                                 In section .text, align 2, keep-with-next
   1646          void interpanCommand(void)
   1647          {
   1648            EmberStatus status;
   1649            EmberAfInterpanHeader header;
   1650            uint16_t shortOrGroupId;
   1651          
   1652            if (zclCmdIsBuilt == false) {
   \                     interpanCommand: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_2
   \        0x2   0xB510             PUSH     {R4,LR}
   \        0x4   0x7808             LDRB     R0,[R1, #+0]
   \        0x6   0xB086             SUB      SP,SP,#+24
   \        0x8   0xB910             CBNZ.N   R0,??interpanCommand_0
   1653              emberAfCorePrintln("no cmd");
   \        0xA   0x....'....        BL       ?Subroutine10
   1654              return;
   \                     ??CrossCallReturnLabel_33: (+1)
   \        0xE   0xE01F             B.N      ??interpanCommand_1
   1655            }
   1656          
   1657            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \                     ??interpanCommand_0: (+1)
   \       0x10   0x....'....        BL       ?Subroutine18
   1658            shortOrGroupId = (uint16_t)emberUnsignedCommandArgument(0);
   \                     ??CrossCallReturnLabel_59: (+1)
   \       0x14   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x18   0x....'....        BL       ?Subroutine8
   1659            header.panId = (uint16_t)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_24: (+1)
   \       0x1C   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1660            header.profileId = (uint16_t)emberUnsignedCommandArgument(2);
   \       0x20   0x....'....        BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_39: (+1)
   \       0x24   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1661            header.clusterId = globalApsFrame.clusterId;
   \       0x28   0x....             LDR.N    R0,??DataTable35
   \       0x2A   0x8841             LDRH     R1,[R0, #+2]
   1662          
   1663            if (emberCurrentCommand->name[0] == 'g') {
   \       0x2C   0x....             LDR.N    R0,??DataTable35_11
   \       0x2E   0xF8AD 0x1010      STRH     R1,[SP, #+16]
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   1664              header.groupId = shortOrGroupId;
   1665              emberAfDebugPrintln("interpan %p %2x", "group", header.groupId);
   1666            } else {
   1667              header.shortAddress = shortOrGroupId;
   1668              emberAfDebugPrintln("interpan %p %2x", "short", shortOrGroupId);
   1669            }
   1670          
   1671            status = emberAfInterpanSendMessageCallback(&header,
   1672                                                        appZclBufferLen,
   1673                                                        appZclBuffer);
   \       0x34   0x....             LDR.N    R0,??DataTable35_3
   \       0x36   0x680A             LDR      R2,[R1, #+0]
   \       0x38   0x7813             LDRB     R3,[R2, #+0]
   \       0x3A   0x....             LDR.N    R2,??DataTable35_1
   \       0x3C   0x2B67             CMP      R3,#+103
   \       0x3E   0xBF0C             ITE      EQ 
   \       0x40   0xF8AD 0x4012      STRHEQ   R4,[SP, #+18]
   \       0x44   0xF8AD 0x400A      STRHNE   R4,[SP, #+10]
   \       0x48   0x8801             LDRH     R1,[R0, #+0]
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       emberAfInterpanSendMessageCallback
   1674            if (status != EMBER_SUCCESS) {
   1675              emberAfDebugPrintln("%psend failed: 0x%X",
   1676                                  "ERR: Inter-PAN ",
   1677                                  status);
   1678            }
   1679          }
   \                     ??interpanCommand_1: (+1)
   \       0x50   0xB006             ADD      SP,SP,#+24
   \       0x52   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18: (+1)
   \        0x0   0x2216             MOVS     R2,#+22
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....'....        B.W      halCommonMemSet
   1680          
   1681          // interpan long  <longId:8>  <destPAN:2> <destProfileID:2> <options:2>
   1682          //    Options: Bit(0) = encrypt.  Can only encrypt with this CLI command
   1683          //    since long address must be present.

   \                                 In section .text, align 2, keep-with-next
   1684          void interpanLongCommand(void)
   1685          {
   1686            EmberStatus status;
   1687            EmberAfInterpanHeader header;
   1688          
   1689            if (zclCmdIsBuilt == false) {
   \                     interpanLongCommand: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_2
   \        0x2   0xB580             PUSH     {R7,LR}
   \        0x4   0x7808             LDRB     R0,[R1, #+0]
   \        0x6   0xB086             SUB      SP,SP,#+24
   \        0x8   0xB910             CBNZ.N   R0,??interpanLongCommand_0
   1690              emberAfCorePrintln("no cmd");
   \        0xA   0x....'....        BL       ?Subroutine10
   1691              return;
   \                     ??CrossCallReturnLabel_32: (+1)
   \        0xE   0xE01E             B.N      ??interpanLongCommand_1
   1692            }
   1693          
   1694            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \                     ??interpanLongCommand_0: (+1)
   \       0x10   0x....'....        BL       ?Subroutine18
   1695            header.panId = (uint16_t)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_58: (+1)
   \       0x14   0x....'....        BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_19: (+1)
   \       0x18   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1696            header.profileId = (uint16_t)emberUnsignedCommandArgument(2);
   \       0x1C   0x....'....        BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_38: (+1)
   \       0x20   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1697            header.options = ((uint16_t)emberUnsignedCommandArgument(3)
   1698                              | EMBER_AF_INTERPAN_OPTION_MAC_HAS_LONG_ADDRESS);
   \       0x24   0x....'....        BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_47: (+1)
   \       0x28   0xF040 0x0002      ORR      R0,R0,#0x2
   \       0x2C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   1699            header.clusterId = globalApsFrame.clusterId;
   \       0x30   0x....             LDR.N    R0,??DataTable35
   \       0x32   0x8841             LDRH     R1,[R0, #+2]
   1700          
   1701            emberCopyBigEndianEui64Argument(0, header.longAddress);
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xF8AD 0x1010      STRH     R1,[SP, #+16]
   \       0x3A   0xF10D 0x0101      ADD      R1,SP,#+1
   \       0x3E   0x....'....        BL       emberCopyBigEndianEui64Argument
   1702          
   1703            status = emberAfInterpanSendMessageCallback(&header,
   1704                                                        appZclBufferLen,
   1705                                                        appZclBuffer);
   \       0x42   0x....             LDR.N    R0,??DataTable35_3
   \       0x44   0x8801             LDRH     R1,[R0, #+0]
   \       0x46   0x....             LDR.N    R2,??DataTable35_1
   \       0x48   0x4668             MOV      R0,SP
   \       0x4A   0x....'....        BL       emberAfInterpanSendMessageCallback
   1706            if (status != EMBER_SUCCESS) {
   1707              emberAfDebugPrintln("%psend failed: 0x%X",
   1708                                  "ERR: Inter-PAN ",
   1709                                  status);
   1710            }
   1711          }
   \                     ??interpanLongCommand_1: (+1)
   \       0x4E   0xB007             ADD      SP,SP,#+28
   \       0x50   0xBD00             POP      {PC}             ;; return
   1712          

   \                                 In section .text, align 2, keep-with-next
   1713          void printTimeCommand(void)
   1714          {
   \                     printTimeCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1715            emberAfPrintTime(emberAfGetCurrentTime());
   \        0x2   0x....'....        BL       emberAfGetCurrentTime
   \        0x6   0xE8BD 0x4002      POP      {R1,LR}
   \        0xA   0x....'....        B.W      emberAfPrintTime
   1716          }
   1717          
   1718          // read <endpoint:1> <cluster:2> <attribute:2> <mask:1>

   \                                 In section .text, align 2, keep-with-next
   1719          void emAfCliReadCommand(void)
   1720          {
   \                     emAfCliReadCommand: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB095             SUB      SP,SP,#+84
   1721            EmberAfStatus status;
   1722            uint8_t endpoint = (uint8_t)emberUnsignedCommandArgument(0);
   \        0x4   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_2: (+1)
   \        0x8   0x....'....        BL       ?Subroutine8
   1723            EmberAfClusterId cluster = (EmberAfClusterId)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_23: (+1)
   \        0xC   0x....'....        BL       ?Subroutine12
   1724            EmberAfAttributeId attribute = (EmberAfAttributeId)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_44: (+1)
   \       0x10   0x....'....        BL       ?Subroutine13
   1725            bool serverAttribute = (bool)emberUnsignedCommandArgument(3);
   \                     ??CrossCallReturnLabel_48: (+1)
   \       0x14   0x0007             MOVS     R7,R0
   1726            uint8_t data[ATTRIBUTE_LARGEST];
   1727            uint8_t dataType;
   1728          
   1729            emberAfCorePrint("%p: ep: %d, cl: 0x%2X, attr: 0x%2X",
   1730                             "read",
   1731                             endpoint,
   1732                             cluster,
   1733                             attribute);
   \       0x16   0xB2B0             UXTH     R0,R6
   \       0x18   0x9001             STR      R0,[SP, #+4]
   \       0x1A   0xB2A8             UXTH     R0,R5
   \       0x1C   0xBF18             IT       NE 
   \       0x1E   0x2701             MOVNE    R7,#+1
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0xB2E3             UXTB     R3,R4
   \       0x24   0x....             LDR.N    R2,??DataTable35_25
   \       0x26   0x....'....        BL       ?Subroutine19
   1734            emberAfCorePrintln(", svr: %c", (serverAttribute ? 'y' : 'n'));
   \                     ??CrossCallReturnLabel_61: (+1)
   \       0x2A   0xB2F8             UXTB     R0,R7
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0x....             LDR.N    R1,??DataTable35_26
   \       0x30   0xB2FF             UXTB     R7,R7
   \       0x32   0xBF14             ITE      NE 
   \       0x34   0x2279             MOVNE    R2,#+121
   \       0x36   0x226E             MOVEQ    R2,#+110
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0x....'....        BL       emberAfPrintln
   1735          
   1736            status = emberAfReadAttribute(endpoint,
   1737                                          cluster,
   1738                                          attribute,
   1739                                          (serverAttribute
   1740                                           ? CLUSTER_MASK_SERVER
   1741                                           : CLUSTER_MASK_CLIENT),
   1742                                          data,
   1743                                          sizeof(data),
   1744                                          &dataType);
   \       0x3E   0x2F00             CMP      R7,#+0
   \       0x40   0xA803             ADD      R0,SP,#+12
   \       0x42   0xAA04             ADD      R2,SP,#+16
   \       0x44   0xBF14             ITE      NE 
   \       0x46   0x2340             MOVNE    R3,#+64
   \       0x48   0x2380             MOVEQ    R3,#+128
   \       0x4A   0x2141             MOVS     R1,#+65
   \       0x4C   0x9002             STR      R0,[SP, #+8]
   \       0x4E   0x9101             STR      R1,[SP, #+4]
   \       0x50   0x9200             STR      R2,[SP, #+0]
   \       0x52   0xB2B2             UXTH     R2,R6
   \       0x54   0xB2A9             UXTH     R1,R5
   \       0x56   0xB2E0             UXTB     R0,R4
   \       0x58   0x....'....        BL       emberAfReadAttribute
   1745            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \       0x5C   0xB9B0             CBNZ.N   R0,??emAfCliReadCommand_0
   1746              if (emberAfIsThisDataTypeAStringType(dataType)) {
   \       0x5E   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0x62   0x....'....        BL       emberAfIsThisDataTypeAStringType
   \       0x66   0xB120             CBZ.N    R0,??emAfCliReadCommand_1
   1747                emberAfCorePrintString(data);
   \       0x68   0xA904             ADD      R1,SP,#+16
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0x....'....        BL       emberAfPrintString
   \       0x70   0xE009             B.N      ??emAfCliReadCommand_2
   1748              } else {
   1749                emberAfCorePrintBuffer(data, emberAfGetDataSize(dataType), true);
   \                     ??emAfCliReadCommand_1: (+1)
   \       0x72   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0x76   0x....'....        BL       emberAfGetDataSize
   \       0x7A   0x4602             MOV      R2,R0
   \       0x7C   0x2301             MOVS     R3,#+1
   \       0x7E   0xA904             ADD      R1,SP,#+16
   \       0x80   0x2001             MOVS     R0,#+1
   \       0x82   0x....'....        BL       emberAfPrintBuffer
   1750              }
   1751              emberAfCorePrintln("");
   \                     ??emAfCliReadCommand_2: (+1)
   \       0x86   0x....'....        BL       ?Subroutine7
   1752            } else {
   \                     ??CrossCallReturnLabel_18: (+1)
   \       0x8A   0xE004             B.N      ??CrossCallReturnLabel_36
   1753              emberAfCorePrintln("%p: read: 0x%x", "Error", status);
   \                     ??emAfCliReadCommand_0: (+1)
   \       0x8C   0x4603             MOV      R3,R0
   \       0x8E   0x....             LDR.N    R2,??DataTable35_27
   \       0x90   0x....             LDR.N    R1,??DataTable35_28
   \       0x92   0x....'....        BL       ?Subroutine11
   1754            }
   1755          }
   \                     ??CrossCallReturnLabel_36: (+1)
   \       0x96   0xB015             ADD      SP,SP,#+84
   \       0x98   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_31
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x....'....        B.W      emberAfPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable35_6
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x....'....        B.W      emberAfPrintln
   1756          
   1757          // ******************************************************
   1758          // write <ep> <cluster> <attrID> <mask> <dataType> <data bytes>
   1759          // ******************************************************

   \                                 In section .text, align 2, keep-with-next
   1760          void emAfCliWriteCommand(void)
   1761          {
   \                     emAfCliWriteCommand: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB093             SUB      SP,SP,#+76
   1762            //uint8_t i;
   1763            EmberAfStatus status;
   1764            uint8_t data[ATTRIBUTE_LARGEST];
   1765          
   1766            uint8_t  endpoint  = (uint8_t)emberUnsignedCommandArgument(0);
   \        0x6   0x....'....        BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0xA   0x....'....        BL       ?Subroutine8
   1767            uint16_t cluster   = (uint16_t)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_22: (+1)
   \        0xE   0x....'....        BL       ?Subroutine12
   1768            uint16_t attribute = (uint16_t)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_43: (+1)
   \       0x12   0x4681             MOV      R9,R0
   1769            bool serverAttribute = (bool)emberUnsignedCommandArgument(3);
   \       0x14   0x....'....        BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_46: (+1)
   \       0x18   0x0006             MOVS     R6,R0
   1770            uint8_t  dataType  = (uint8_t)emberUnsignedCommandArgument(4);
   \       0x1A   0x....'....        LDR.W    R8,??DataTable35_29
   \       0x1E   0xBF18             IT       NE 
   \       0x20   0x2601             MOVNE    R6,#+1
   \       0x22   0x2004             MOVS     R0,#+4
   \       0x24   0x....'....        BL       emberUnsignedCommandArgument
   \       0x28   0x4607             MOV      R7,R0
   1771          
   1772            emberAfCorePrint("%p: ep: %d, cl: 0x%2X, attr: 0x%2X",
   1773                             "write",
   1774                             endpoint,
   1775                             cluster,
   1776                             attribute);
   \       0x2A   0xFA1F 0xF089      UXTH     R0,R9
   \       0x2E   0x9001             STR      R0,[SP, #+4]
   \       0x30   0xB2A8             UXTH     R0,R5
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0xB2E3             UXTB     R3,R4
   \       0x36   0x4642             MOV      R2,R8
   \       0x38   0x....'....        BL       ?Subroutine19
   1777            emberAfCorePrintln(", svr: %c, dtype: 0x%X",
   1778                               (serverAttribute ? 'y' : 'n'),
   1779                               dataType);
   \                     ??CrossCallReturnLabel_60: (+1)
   \       0x3C   0xB2F0             UXTB     R0,R6
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xB2FB             UXTB     R3,R7
   \       0x42   0x....             LDR.N    R1,??DataTable35_30
   \       0x44   0xBF14             ITE      NE 
   \       0x46   0x2279             MOVNE    R2,#+121
   \       0x48   0x226E             MOVEQ    R2,#+110
   \       0x4A   0x....'....        BL       ?Subroutine11
   1780          
   1781            // If the data type is a string, automatically prepend a length to the data;
   1782            // otherwise, just copy the raw bytes.
   1783            MEMSET(data, 0, ATTRIBUTE_LARGEST);
   \                     ??CrossCallReturnLabel_35: (+1)
   \       0x4E   0x2241             MOVS     R2,#+65
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0xA802             ADD      R0,SP,#+8
   \       0x54   0x....'....        BL       halCommonMemSet
   1784            if (emberAfIsThisDataTypeAStringType(dataType)) {
   \       0x58   0xB2F8             UXTB     R0,R7
   \       0x5A   0x....'....        BL       emberAfIsThisDataTypeAStringType
   \       0x5E   0xB148             CBZ.N    R0,??emAfCliWriteCommand_0
   1785              data[0] = emberCopyStringArgument(5,
   1786                                                data + 1,
   1787                                                ATTRIBUTE_LARGEST - 1,
   1788                                                false);
   \       0x60   0x2300             MOVS     R3,#+0
   \       0x62   0x2240             MOVS     R2,#+64
   \       0x64   0xF10D 0x0109      ADD      R1,SP,#+9
   \       0x68   0x2005             MOVS     R0,#+5
   \       0x6A   0x....'....        BL       emberCopyStringArgument
   \       0x6E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \       0x72   0xE008             B.N      ??emAfCliWriteCommand_1
   1789            } else {
   1790              emberCopyStringArgument(5,
   1791                                      data,
   1792                                      emberAfGetDataSize(dataType),
   1793                                      false);
   \                     ??emAfCliWriteCommand_0: (+1)
   \       0x74   0xB2F8             UXTB     R0,R7
   \       0x76   0x....'....        BL       emberAfGetDataSize
   \       0x7A   0x4602             MOV      R2,R0
   \       0x7C   0x2300             MOVS     R3,#+0
   \       0x7E   0xA902             ADD      R1,SP,#+8
   \       0x80   0x2005             MOVS     R0,#+5
   \       0x82   0x....'....        BL       emberCopyStringArgument
   1794            }
   1795          
   1796            status = emberAfWriteAttribute(endpoint,
   1797                                           cluster,
   1798                                           attribute,
   1799                                           (serverAttribute
   1800                                            ? CLUSTER_MASK_SERVER
   1801                                            : CLUSTER_MASK_CLIENT),
   1802                                           data,
   1803                                           dataType);
   \                     ??emAfCliWriteCommand_1: (+1)
   \       0x86   0xB2F6             UXTB     R6,R6
   \       0x88   0x2E00             CMP      R6,#+0
   \       0x8A   0xA802             ADD      R0,SP,#+8
   \       0x8C   0xB2FF             UXTB     R7,R7
   \       0x8E   0x9000             STR      R0,[SP, #+0]
   \       0x90   0xBF14             ITE      NE 
   \       0x92   0x2340             MOVNE    R3,#+64
   \       0x94   0x2380             MOVEQ    R3,#+128
   \       0x96   0x9701             STR      R7,[SP, #+4]
   \       0x98   0xFA1F 0xF289      UXTH     R2,R9
   \       0x9C   0xB2A9             UXTH     R1,R5
   \       0x9E   0xB2E0             UXTB     R0,R4
   \       0xA0   0x....'....        BL       emberAfWriteAttribute
   1804            emAfPrintStatus("write", status);
   \       0xA4   0x4601             MOV      R1,R0
   \       0xA6   0x4640             MOV      R0,R8
   \       0xA8   0x....'....        BL       emAfPrintStatus
   1805            emberAfCorePrintln("");
   \       0xAC   0x....'....        BL       ?Subroutine7
   1806          }
   \                     ??CrossCallReturnLabel_17: (+1)
   \       0xB0   0xB013             ADD      SP,SP,#+76
   \       0xB2   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1807          

   \                                 In section .text, align 2, keep-with-next
   1808          void eraseKeyTableEntry(uint8_t index)
   1809          {
   \                     eraseKeyTableEntry: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   1810            EmberStatus status = emberEraseKeyTableEntry(index);
   \        0x4   0x2300             MOVS     R3,#+0
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x4621             MOV      R1,R4
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       emSetKeyTableEntry
   1811          
   1812            if (status != EMBER_SUCCESS) {
   \       0x10   0xB130             CBZ.N    R0,??eraseKeyTableEntry_0
   1813              emberAfCorePrintln("%perase key %d: 0x%x",
   1814                                 "ERROR: ",
   1815                                 index,
   1816                                 status);
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x4623             MOV      R3,R4
   \       0x16   0x....             LDR.N    R2,??DataTable35_32
   \       0x18   0x....             LDR.N    R1,??DataTable35_33
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x....'....        BL       emberAfPrintln
   1817            }
   1818          }
   \                     ??eraseKeyTableEntry_0: (+1)
   \       0x20   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1819          
   1820          // keys clear

   \                                 In section .text, align 2, keep-with-next
   1821          void keysClearCommand(void)
   1822          {
   1823          #if EMBER_KEY_TABLE_SIZE
   1824            uint8_t i;
   1825            for (i = 0; i < EMBER_KEY_TABLE_SIZE; i++) {
   1826              eraseKeyTableEntry(i);
   1827            }
   1828          #endif
   1829          }
   \                     keysClearCommand: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1830          
   1831          // keys print

   \                                 In section .text, align 2, keep-with-next
   1832          void keysPrintCommand(void)
   1833          {
   \                     keysPrintCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1834            emberAfCorePrintln("%pSECURITY_LEVEL: %x",
   1835                               "EMBER_",
   1836                               EMBER_SECURITY_LEVEL);
   \        0x2   0x2305             MOVS     R3,#+5
   \        0x4   0x....             LDR.N    R2,??DataTable35_34
   \        0x6   0x....             LDR.N    R1,??DataTable35_35
   \        0x8   0x....'....        BL       ?Subroutine11
   1837            printKeyInfo();
   \                     ??CrossCallReturnLabel_34: (+1)
   \        0xC   0xE8BD 0x4001      POP      {R0,LR}
   \       0x10   0x....'....        B.W      printKeyInfo
   1838          }
   1839          
   1840          // keys delete <index:1>

   \                                 In section .text, align 2, keep-with-next
   1841          void keysDeleteCommand(void)
   1842          {
   \                     keysDeleteCommand: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1843            uint8_t index = (uint8_t)emberUnsignedCommandArgument(0);
   \        0x2   0x....'....        BL       ??Subroutine6_0
   1844            eraseKeyTableEntry(index);
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0xE8BD 0x4002      POP      {R1,LR}
   \        0xC   0x....             B.N      eraseKeyTableEntry
   1845          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \        0x0   0x....'....        DC32     globalApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \        0x0   0x....'....        DC32     appZclBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \        0x0   0x....'....        DC32     zclCmdIsBuilt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \        0x0   0x....'....        DC32     appZclBufferLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_6:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_7:
   \        0x0   0x....'....        DC32     useNextSequence

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_8:
   \        0x0   0x....'....        DC32     mfgSpecificId

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_9:
   \        0x0   0x....'....        DC32     disableDefaultResponse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_10:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_11:
   \        0x0   0x....'....        DC32     emberCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_12:
   \        0x0   0x....'....        DC32     zclGlobalDirection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_13:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_14:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_15:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_16:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_17:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_18:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_19:
   \        0x0   0x....'....        DC32     useMulticastBinding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_20:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_21:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_22:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_23:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_24:
   \        0x0   0x....'....        DC32     emAfSyncingTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_25:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_26:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_27:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_28:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_29:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_30:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_31:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_32:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_33:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_34:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_35:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x4D 0x73          DC8 "Msg: clus 0x%2x, cmd 0x%x, len %d"
   \              0x67 0x3A    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x2C    
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x2C    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x62 0x75          DC8 "buffer: "
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \                     ?_2:
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x7A 0x63          DC8 "zcl-cli.c"
   \              0x6C 0x2D    
   \              0x63 0x6C    
   \              0x69 0x2E    
   \              0x63 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \        0x8   0x61 0x6C          DC8 61H, 6CH, 72H, 65H, 61H, 64H, 79H, 20H
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \       0x10   0x62 0x75          DC8 62H, 75H, 69H, 6CH, 74H, 2EH, 20H, 20H
   \              0x69 0x6C    
   \              0x74 0x2E    
   \              0x20 0x20    
   \       0x18   0x43 0x61          DC8 43H, 61H, 6EH, 6EH, 6FH, 74H, 20H, 73H
   \              0x6E 0x6E    
   \              0x6F 0x74    
   \              0x20 0x73    
   \       0x20   0x65 0x74          DC8 65H, 74H, 20H, 4DH, 46H, 47H, 20H, 73H
   \              0x20 0x4D    
   \              0x46 0x47    
   \              0x20 0x73    
   \       0x28   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \       0x30   0x63 0x6F          DC8 63H, 6FH, 64H, 65H, 20H, 66H, 6FH, 72H
   \              0x64 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \       0x38   0x20 0x63          DC8 20H, 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \       0x40   0x2E 0x00          DC8 2EH, 0
   \       0x42   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x4D 0x46          DC8 "MFG Code Set for next command: 0x%2X"
   \              0x47 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x6E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x44 0x69          DC8 44H, 69H, 73H, 61H, 62H, 6CH, 65H, 20H
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \        0x8   0x44 0x65          DC8 44H, 65H, 66H, 61H, 75H, 6CH, 74H, 20H
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \       0x10   0x52 0x65          DC8 52H, 65H, 73H, 70H, 6FH, 6EH, 73H, 65H
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \       0x18   0x20 0x53          DC8 20H, 53H, 65H, 74H, 20H, 66H, 6FH, 72H
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \       0x20   0x20 0x6E          DC8 20H, 6EH, 65H, 78H, 74H, 20H, 63H, 6FH
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x63 0x6F    
   \       0x28   0x6D 0x6D          DC8 6DH, 6DH, 61H, 6EH, 64H, 3AH, 20H, 30H
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \       0x30   0x78 0x25          DC8 78H, 25H, 58H, 0
   \              0x58 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x55 0x73          DC8 "Use Next Sequence Set for next command: 0x%X"
   \              0x65 0x20    
   \              0x4E 0x65    
   \              0x78 0x74    
   \              0x20 0x53    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x6E 0x65    
   \              0x78 0x74    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x6E 0x6F          DC8 "no cmd"
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x00         
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x45 0x72          DC8 "Error: CLI Send failed, status: 0x%X"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x43    
   \              0x4C 0x49    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x63 0x6D          DC8 "cmd not built"
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x62 0x75    
   \              0x69 0x6C    
   \              0x74 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x73 0x72          DC8 "src ep %x, clus %2x"
   \              0x63 0x20    
   \              0x65 0x70    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x20    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x73 0x65          DC8 "sending to multicast bind"
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x75 0x6C    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x20 0x62    
   \              0x69 0x6E    
   \              0x64 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x73 0x65          DC8 "sending to bind %x"
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \              0x69 0x6E    
   \              0x64 0x20    
   \              0x25 0x78    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x25 0x70          DC8 "%p: ep: %d, cl: 0x%2X, attr: 0x%2X"
   \              0x3A 0x20    
   \              0x65 0x70    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x63 0x6C    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x2C    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x72 0x65          DC8 "read"
   \              0x61 0x64    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x2C 0x20          DC8 ", svr: %c"
   \              0x73 0x76    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x63 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x25 0x70          DC8 "%p: read: 0x%x"
   \              0x3A 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x77 0x72          DC8 "write"
   \              0x69 0x74    
   \              0x65 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x2C 0x20          DC8 ", svr: %c, dtype: 0x%X"
   \              0x73 0x76    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x63 0x2C    
   \              0x20 0x64    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x25 0x70          DC8 "%perase key %d: 0x%x"
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x45 0x52          DC8 "ERROR: "
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x25 0x70          DC8 "%pSECURITY_LEVEL: %x"
   \              0x53 0x45    
   \              0x43 0x55    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x5F 0x4C    
   \              0x45 0x56    
   \              0x45 0x4C    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x45 0x4D          DC8 "EMBER_"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x00         
   \        0x7   0x00               DC8 0
   1846          
   1847          #ifdef CERTIFICATION_TESTING
   1848          void attributeReadCausingFragmentedResponseCommand(void)
   1849          {
   1850            zclBufferSetup(ZCL_GLOBAL_COMMAND | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1851                           0x0000,
   1852                           ZCL_READ_ATTRIBUTES_COMMAND_ID);
   1853            zclBufferAddWord(0x0000);
   1854            zclBufferAddWord(0x1000);
   1855            zclBufferAddWord(0x1001);
   1856            zclBufferAddWord(0x1002);
   1857            zclBufferAddWord(0x1003);
   1858            zclBufferAddWord(0x1004);
   1859            zclBufferAddWord(0x1005);
   1860            zclBufferAddWord(0x1006);
   1861            zclBufferAddWord(0x1007);
   1862            zclBufferAddWord(0x1008);
   1863            zclBufferAddWord(0x1009);
   1864            zclBufferAddWord(0x100A);
   1865            zclBufferAddWord(0x100B);
   1866            zclBufferAddWord(0x100C);
   1867            zclBufferAddWord(0x100D);
   1868            zclBufferAddWord(0x100E);
   1869            zclBufferAddWord(0x100F);
   1870            zclBufferAddWord(0x1010);
   1871            zclBufferAddWord(0x1011);
   1872            zclBufferAddWord(0x1012);
   1873            zclBufferAddWord(0x1013);
   1874            zclBufferAddWord(0x1014);
   1875            zclBufferAddWord(0x1015);
   1876            zclBufferAddWord(0x1016);
   1877            zclBufferAddWord(0x1017);
   1878            zclBufferAddWord(0x1018);
   1879            zclBufferAddWord(0x1019);
   1880            zclBufferAddWord(0x101A);
   1881            zclBufferAddWord(0x2001);
   1882            zclBufferAddWord(0x2002);
   1883            zclBufferAddWord(0x2003);
   1884            zclBufferAddWord(0x2004);
   1885            zclBufferAddWord(0x2005);
   1886            zclBufferAddWord(0x2006);
   1887            zclBufferAddWord(0x2007);
   1888            zclBufferAddWord(0x2008);
   1889            zclBufferAddWord(0x2009);
   1890            cliBufferPrint();
   1891          }
   1892          #endif //CERTIFICATION_TESTING
   1893          
   1894          //******************************************************************
   1895          // zcl command table entries
   1896          //******************************************************************
   1897          
   1898          #ifndef EMBER_AF_GENERATE_CLI
   1899          
   1900          /**
   1901           * @addtogroup cli
   1902           * @{
   1903           */
   1904          /**
   1905           * @brief Commands used to send global commands in the zcl
   1906           *
   1907           *        <b>zcl global read &lt;cluster&gt; &lt;attribute id&gt; </b>
   1908           *        - <i> Creates a global read command message to read from
   1909           *              the cluster and attribute specified.
   1910           *          - cluster - uint16_t. The cluster id to read from.
   1911           *          - attribute id - uint16_t. The attribute id to read from</i>
   1912           *
   1913           *        <b>zcl global write &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1914           *        - <i> Creates a global write  command message to write to
   1915           *              the cluster and attribute specified.
   1916           *          - cluster - uint16_t. The cluster id to read from.
   1917           *          - attribute id - uint16_t. The attribute id to read from
   1918           *          - data type - uint8_t. The two byte zigbee type value
   1919           *          - data - byte array. The data to write</i>
   1920           *
   1921           *        <b>zcl global uwrite &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1922           *        - <i> Creates a global write command message to write to the
   1923           *              cluster and attribute specified.
   1924           *          - cluster - uint16_t. The cluster id to read from.
   1925           *          - attribute id - uint16_t. The attribute id to read from
   1926           *          - data type - uint8_t. The two byte zigbee type value
   1927           *          - data - byte array. The data to write</i>
   1928           *
   1929           *        <b>zcl global nwrite &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1930           *        - <i> Creates a global write command message to write to the
   1931           *              cluster and attribute specified.
   1932           *          - cluster - uint16_t. The cluster id to read from.
   1933           *          - attribute id - uint16_t. The attribute id to read from
   1934           *          - data type - uint8_t. The two byte zigbee type value
   1935           *          - data - byte array. The data to write</i>
   1936           *
   1937           *        <b>zcl global discover &lt;cluster&gt; &lt;attribute id&gt; &lt;max&gt;</b>
   1938           *        - <i> Creates discovery message for devices with the associated
   1939           *              cluster and attribute
   1940           *          - cluster - uint16_t. The cluster id to read from.
   1941           *          - attribute id - uint16_t. The attribute id to read from
   1942           *          - max - uint8_t. Max number of discovery responses.</i>
   1943           *
   1944           *        <b>zcl global report-read &lt;cluster&gt; &lt;attribute id&gt; &lt;direction&gt;</b>
   1945           *        - <i> Creates a global read reporting command for the associated
   1946           *              cluster, attribute and server/client direction.
   1947           *          - cluster - uint16_t. The cluster id to read from.
   1948           *          - attribute id - uint16_t. The attribute id to read from
   1949           *          - direction - uint8_t. 0 for client-to-server, 1 for server-to-client.</i>
   1950           *
   1951           *        <b>zcl global send-me-a-report &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt;
   1952           *           &lt;min report time&gt; &lt;max report time&gt; &lt;reportable change&gt;</b>
   1953           *        - <i> Creates a global send me a report command for the associated values.
   1954           *          - cluster - uint16_t. The cluster id for requested report.
   1955           *          - attribute id - uint16_t. The attribute for requested report.
   1956           *          - data type - uint8_t. The two byte zigbee type value for the requested report
   1957           *          - min report time - uint16_t. Minimum number of seconds between reports.
   1958           *          - max report time - uint16_t. Maximum number of seconds between reports.
   1959           *          - reportable change - byte array. Amount of change to trigger a report.
   1960           *
   1961           *        <b>zcl global expect-report-from-me &lt;cluster&gt &lt;attribute id&gt; &lt;timeout&gt;</b>
   1962           *        - <i> Create a expect-report-from-me message with associated values.
   1963           *          - cluster - uint16_t. The cluster id for requested report.
   1964           *          - attribute id - uint16_t. The attribute for requested report.
   1965           *          - timeout - uint16_t. The maximum amount of time between reports.
   1966           *
   1967           *        <b>zcl global direction &lt;direction&gt;</b>
   1968           *        - <i> Sets the direction for global commands, either client to server
   1969           *              or server to client.
   1970           *          - direction - uint8_t. The direction for global commands.
   1971           *            client-to-server == 0, server-to-client == 1.</i>
   1972           *
   1973           *        <b>zcl global disc-com-gen &lt;start command id&gt; &lt;max command ids&gt;</b>
   1974           *        - <i> Sends a global Discover Commands Generated command.
   1975           *          - start command id - uint8_t. The command id to start discovery at.
   1976           *          - max command ids - uint8_t. The maximum number of command ids to return.
   1977           *
   1978           *        <b>zcl global disc-com-rec &lt;start command id&gt; &lt;max command ids&gt;</b>
   1979           *        - <i> Sends a global Discover Commands Received command.
   1980           *          - start command id - uint8_t. The command id to start discovery at.
   1981           *          - max command ids - uint8_t. The maximum number of command ids to return.
   1982           */
   1983          #define EMBER_AF_DOXYGEN_CLI__ZCL_GLOBAL_COMMANDS
   1984          /** @} END addtogroup */
   1985          EmberCommandEntry zclGlobalCommands[] = {
   1986            { "read", zclGlobalReadCommand, "vv" },
   1987            { "write", zclGlobalWriteCommand, "vvub" },
   1988            { "uwrite", zclGlobalWriteCommand, "vvub" },
   1989            { "nwrite", zclGlobalWriteCommand, "vvub" },
   1990            { "discover", zclGlobalDiscoverCommand, "vvu" },
   1991            { "report-read", zclGlobalReportReadCommand, "vvu" },
   1992            { "send-me-a-report", zclGlobalSendMeAReportCommand, "vvuvvb" },
   1993            { "expect-report-from-me", zclGlobalExpectReportFromMeCommand, "vvv" },
   1994            { "report", zclGlobalReportCommand, "uvvu" },
   1995            { "direction", zclGlobalDirectionCommand, "u" },
   1996            { "disc-com-gen", zclGlobalCommandDiscoveryCommand, "vuu" },
   1997            { "disc-com-rec", zclGlobalCommandDiscoveryCommand, "vuu" },
   1998            { NULL }
   1999          };
   2000          
   2001          EmberCommandEntry zclTestResponseCommands[] = {
   2002            { "on", zclTestResponseOnCommand, "" },
   2003            { "off", zclTestResponseOffCommand, "" },
   2004            { NULL }
   2005          };
   2006          
   2007          EmberCommandEntry zclTestCommands[] = {
   2008            { "response", NULL, (const char *)zclTestResponseCommands },
   2009            { NULL }
   2010          };
   2011          
   2012          #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT
   2013          EmberCommandEntry zclBasicCommands[] = {
   2014            { "rtfd", zclBasicRtfdCommand, "" },
   2015            { NULL }
   2016          };
   2017          #endif
   2018          
   2019          #if defined(ZCL_USING_IDENTIFY_CLUSTER_CLIENT) || defined(ZCL_USING_IDENTIFY_CLUSTER_SERVER)
   2020          EmberCommandEntry zclIdentifyCommands[] = {
   2021            #ifdef ZCL_USING_IDENTIFY_CLUSTER_CLIENT
   2022            { "id", zclIdentifyIdCommand, "v" },
   2023            { "query", zclIdentifyQueryCommand, "" },
   2024            { "trigger", zclIdentifyTriggerEffectCommand, "uu" },
   2025            #endif
   2026            #ifdef ZCL_USING_IDENTIFY_CLUSTER_SERVER
   2027            { "on", zclIdentifyOnOffCommand, "uv" },
   2028            { "off", zclIdentifyOnOffCommand, "u" },
   2029            #endif
   2030            { NULL }
   2031          };
   2032          #endif
   2033          
   2034          #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
   2035          EmberCommandEntry zclGroupsCommands[] = {
   2036            { "add", zclGroupsAddCommand, "vb" },
   2037            { "ad-if-id", zclGroupsAddCommand, "vb" },
   2038            { "view", zclGroupsViewCommand, "v" },
   2039            { "get", zclGroupsGetCommand, "uv*" },
   2040            { "remove", zclGroupsRemoveCommand, "v" },
   2041            { "rmall", zclGroupsRemoveAllCommand, "" },
   2042            { NULL }
   2043          };
   2044          #endif
   2045          
   2046          #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
   2047          EmberCommandEntry zclScenesSetCommands[] = {
   2048            { "on", zclScenesSetCommand, "u" },
   2049            { "off", zclScenesSetCommand, "u" },
   2050            { NULL }
   2051          };
   2052          
   2053          EmberCommandEntry zclScenesCommands[] = {
   2054            { "add", zclScenesAddCommand, "vuvb" },
   2055            { "view", zclScenesViewCommand, "vu" },
   2056            { "remove", zclScenesRemoveCommand, "vu" },
   2057            { "rmall", zclScenesRemoveAllCommand, "v" },
   2058            { "store", zclScenesStoreCommand, "vu" },
   2059            { "recall", zclScenesRecallCommand, "vu" },
   2060            { "get", zclScenesGetMembershipCommand, "v" },
   2061            { "eadd", zclScenesAddCommand, "vuvb" },
   2062            { "eview", zclScenesViewCommand, "vu" },
   2063            { "copy", zclScenesCopyCommand, "uvuvu" },
   2064            { "set", NULL, (const char *)zclScenesSetCommands },
   2065            { NULL }
   2066          };
   2067          #endif
   2068          
   2069          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
   2070          EmberCommandEntry zclOnOffCommands[] = {
   2071            { "on", zclOnOffCommand, "" },
   2072            { "off", zclOnOffCommand, "" },
   2073            { "toggle", zclOnOffCommand, "" },
   2074            { "offeffect", zclOnOffOffWithEffectCommand, "uu" },
   2075            { "onrecall", zclOnOffOnWithRecallGlobalSceneCommand, "" },
   2076            { "ontimedoff", zclOnOffOnWithTimedOffCommand, "uvv" },
   2077            { NULL }
   2078          };
   2079          #endif
   2080          
   2081          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
   2082          EmberCommandEntry zclLevelControlCommands[] = {
   2083            { "mv-to-level", zclLevelControlMoveToLevelCommand, "uv" },
   2084            { "move", zclLevelControlMoveCommand, "uu" },
   2085            { "step", zclLevelControlStepCommand, "uuv" },
   2086            { "stop", zclLevelControlStopCommand, "" },
   2087            { "o-mv-to-level", zclLevelControlMoveToLevelCommand, "uv" },
   2088            { "o-move", zclLevelControlMoveCommand, "uu" },
   2089            { "o-step", zclLevelControlStepCommand, "uuv" },
   2090            { "o-stop", zclLevelControlStopCommand, "" },
   2091            { NULL }
   2092          };
   2093          #endif
   2094          
   2095          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
   2096          EmberCommandEntry zclThermostatCommands[] = {
   2097            { "set", zclThermostatSetCommand, "uu" },
   2098            { NULL }
   2099          };
   2100          #endif
   2101          
   2102          #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
   2103          EmberCommandEntry zclIasZoneCommands[] = {
   2104            { "enroll", zclIasZoneEnrollCommand, "vv" },
   2105            { "sc", zclIasZoneStatusChangeCommand, "vuuv" },
   2106            { NULL }
   2107          };
   2108          #endif
   2109          
   2110          #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
   2111          EmberCommandEntry zclIasAceCommands[] = {
   2112            { "a", zclIasAceArmCommand, "ubu" },
   2113            { "b", zclIasAceBypassCommand, "b" },
   2114            { "e", zclIasAceEmergencyCommand, "" },
   2115            { "f", zclIasAceFireCommand, "" },
   2116            { "p", zclIasAcePanicCommand, "" },
   2117            { "getzm", zclIasAceGetZoneMapCommand, "" },
   2118            { "getzi", zclIasAceGetZoneInfoCommand, "u" },
   2119            { NULL }
   2120          };
   2121          #endif
   2122          
   2123          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
   2124          EmberCommandEntry zclColorControlCommands[] = {
   2125            { "movetohue", zclColorControlMoveToHueCommand, "uuv" },
   2126            { "movehue", zclColorControlMoveHueCommand, "uu" },
   2127            { "stephue", zclColorControlStepHueCommand, "uuu" },
   2128            { "movetosat", zclColorControlMoveToSatCommand, "uv" },
   2129            { "movesat", zclColorControlMoveSatCommand, "uu" },
   2130            { "stepsat", zclColorControlStepSatCommand, "uuu" },
   2131            { "movetohueandsat", zclColorControlMoveToHueAndSatCommand, "uuv" },
   2132            { "movetocolor", zclColorControlMoveToColorCommand, "vvv" },
   2133            { "movecolor", zclColorControlMoveColorCommand, "vv" },
   2134            { "stepcolor", zclColorControlStepColorCommand, "vvv" },
   2135            { "movetocolortemp", zclColorControlMoveToColorTemperatureCommand, "vv" },
   2136            { "emovetohue", zclColorControlMoveToHueCommand, "vuv" },
   2137            { "emovehue", zclColorControlMoveHueCommand, "uv" },
   2138            { "estephue", zclColorControlStepHueCommand, "uvv" },
   2139            { "emovetohueandsat", zclColorControlMoveToHueAndSatCommand, "vuv" },
   2140            { "loop", zclColorControlColorLoopSetCommand, "uuuvv" },
   2141            { "stopmovestep", zclColorControlStopMoveStepCommand, "" },
   2142            { "movecolortemp", zclColorControlMoveColorCommand, "uvvv" },
   2143            { "stepcolortemp", zclColorControlStepColorCommand, "uvvvv" },
   2144            { NULL }
   2145          };
   2146          #endif
   2147          
   2148          #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
   2149          EmberCommandEntry zclPollControlCommands[] = {
   2150            emberCommandEntryAction("stop", zclPollControlFastPollStopCommand, "", "Fast Poll Stop"),
   2151            emberCommandEntryAction("long", zclPollControlSetPollIntervalCommand, "w", "Set Long Poll Interval"),
   2152            emberCommandEntryAction("short", zclPollControlSetPollIntervalCommand, "v", "Set Short Poll Interval"),
   2153            emberCommandEntryTerminator(),
   2154          };
   2155          #endif
   2156          
   2157          #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2158          EmberCommandEntry zclPowerProfileCommands[] = {
   2159            emberCommandEntryAction("profile", zclPowerProfileRequestCommand,
   2160                                    "u", "Request Profile"),
   2161            emberCommandEntryAction("state", zclPowerProfileStateRequestCommand,
   2162                                    "", "Request State"),
   2163            emberCommandEntryAction("energy-phases-schedule",
   2164                                    zclPowerProfileEnergyPhasesScheduleNotificationCommand,
   2165                                    "?", "Notify Energy Phase Schedule"),
   2166            emberCommandEntryAction("schedule-constraints",
   2167                                    zclPowerProfileScheduleConstraintsRequestCommand,
   2168                                    "u", "Request Schedule Constraints"),
   2169            emberCommandEntryAction("energy-phases-schedule-states",
   2170                                    zclPowerProfileEnergyPhasesScheduleStateRequestCommand,
   2171                                    "u", "Request Energy Phases Schedule States"),
   2172            emberCommandEntryTerminator(),
   2173          };
   2174          #endif //ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2175          
   2176          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2177          EmberCommandEntry zclWindowCoveringCommands[] = {
   2178            emberCommandEntryAction("up", zclWindowCoveringUpCommand,
   2179                                    "", "Up"),
   2180            emberCommandEntryAction("down", zclWindowCoveringDownCommand,
   2181                                    "", "Down"),
   2182            emberCommandEntryAction("stop",
   2183                                    zclWindowCoveringStopCommand,
   2184                                    "", "Stop"),
   2185            emberCommandEntryAction("go-to-lift-value",
   2186                                    zclWindowCoveringGoToLiftValueCommand,
   2187                                    "v", "Go To Lift Value"),
   2188            emberCommandEntryAction("go-to-lift-percent",
   2189                                    zclWindowCoveringGoToLiftPercentageCommand,
   2190                                    "u", "Go To Lift Percentage"),
   2191            emberCommandEntryAction("go-to-tilt-value",
   2192                                    zclWindowCoveringGoToTiltValueCommand,
   2193                                    "v", "Go To Tilt Value"),
   2194            emberCommandEntryAction("go-to-tilt-percentage",
   2195                                    zclWindowCoveringGoToTiltPercentageCommand,
   2196                                    "u", "Go To Tilt Percentage"),
   2197            emberCommandEntryTerminator(),
   2198          };
   2199          #endif //ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2200          
   2201          #if defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT) || defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER)
   2202          
   2203          EmberCommandEntry zclDrlcCommands[] = {
   2204            #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   2205          
   2206            { "lce", zclDrlcLoadControlEventCommand, "wwvu" },
   2207            { "cl", zclDrlcCancelCommand, "wvuuw" },
   2208            { "ca", zclDrlcCancelAllCommand, "" },
   2209            #endif
   2210            #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   2211            { "gse", zclDrlcGetScheduledEventsCommand, "wu" },
   2212            #endif
   2213            { NULL }
   2214          };
   2215          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT || SERVER
   2216          
   2217          #if defined(ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT) || defined(ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER)
   2218          EmberCommandEntry zclSimpleMeteringCommands[] = {
   2219          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   2220            { "gp", zclSimpleMeteringGetProfileCommand, "uwu" },
   2221            { "fp", zclSimpleMeteringFastPollCommand, "uu" },
   2222          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   2223          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2224            { "rm", zclSimpleMeteringRequestMirrorCommand, "" },
   2225            { "dm", zclSimpleMeteringDeleteMirrorCommand, "" },
   2226          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2227            { NULL }
   2228          };
   2229          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT || ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2230          
   2231          #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   2232          EmberCommandEntry zclPriceClientCommands[] = {
   2233            { "cu", zclPriceGetCurrentCommand, "" },
   2234            { "sc", zclPriceGetScheduleCommand, "wu" },
   2235            { NULL }
   2236          };
   2237          #endif //ZCL_USING_PRICE_CLUSTER_CLIENT
   2238          
   2239          EmberCommandEntry zclMessageCommands[] = {
   2240          #ifdef ZCL_USING_MESSAGING_CLUSTER_CLIENT
   2241            { "get", zclMessageGetCommand, "" },
   2242          #endif //ZCL_USING_MESSAGING_CLUSTER_CLIENT
   2243            { NULL }
   2244          };
   2245          
   2246          #if defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT) || defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER)
   2247          EmberCommandEntry zclTunnelCommands[] = {
   2248          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   2249            { "match", zclTunnelMatchCommand, "b" },
   2250          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   2251          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2252            { "advertise", zclTunnelAdvertiseCommand, "b" },
   2253            { "response", zclTunnelResponseCommand, "" },
   2254          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2255            { NULL }
   2256          };
   2257          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT || ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2258          
   2259          #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   2260          EmberCommandEntry zclBacnetTransferCommands[] = {
   2261            { "fixed", zclBacnetTransferFixedCommand, "ub" },
   2262            { "random", zclBacnetTransferRandomCommand, "u" },
   2263            { "whois", zclBacnetTransferWhoisCommand, "" }, //removed length byte from whois
   2264            { NULL },
   2265          };
   2266          
   2267          EmberCommandEntry zclBacnetCommands[] = {
   2268            { "transfer-npdu", NULL, (const char *)zclBacnetTransferCommands },
   2269            { NULL }
   2270          };
   2271          #endif
   2272          
   2273          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2274          EmberCommandEntry zclDoorLockCommands[] = {
   2275            { "lock", zclDoorLockCommand, "" },
   2276            { "unlock", zclDoorLockCommand, "" },
   2277            { NULL }
   2278          };
   2279          #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2280          
   2281          #if defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2282          EmberCommandEntry zclTunnelingCommands[] = {
   2283          #ifdef ZCL_USING_TUNNELING_CLUSTER_CLIENT
   2284            { "request", zclTunnelingRequestCommand, "uvuv" },
   2285            { "close", zclTunnelingCloseCommand, "v" },
   2286            { "transfer-to-server", zclTunnelingTransferToServerCommand, "vb" },
   2287            { "random-to-server", zclTunnelingRandomToServerCommand, "vv" },
   2288          #endif //ZCL_USING_TUNNELING_CLUSTER_CLIENT
   2289          #ifdef ZCL_USING_TUNNELING_CLUSTER_SERVER
   2290            { "transfer-to-client", zclTunnelingTransferToClientCommand, "vb" },
   2291            { "random-to-client", zclTunnelingRandomToClientCommand, "vv" },
   2292          #endif //ZCL_USING_TUNNELING_CLUSTER_SERVER
   2293            { NULL }
   2294          };
   2295          #endif //defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2296          
   2297          EmberCommandEntry zclCommands[] = {
   2298          //#define CERTIFICATION_TESTING
   2299          #ifdef CERTIFICATION_TESTING
   2300            { "attr-read-frag-resp", attributeReadCausingFragmentedResponseCommand, "" },
   2301          #endif //CERTIFICATION_TESTING
   2302          
   2303            { "mfg-code", zclMfgCodeCommand, "v" },
   2304            { "x-default-resp", zclXDefaultRespCommand, "u" },
   2305          
   2306            { "global", NULL, (const char *)zclGlobalCommands },
   2307            { "test", NULL, (const char *)zclTestCommands },
   2308            { "time", zclTimeCommand, "w" },
   2309            #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT
   2310            { "basic", NULL, (const char *)zclBasicCommands },
   2311            #endif
   2312          
   2313            #if defined(ZCL_USING_IDENTIFY_CLUSTER_CLIENT) || defined(ZCL_USING_IDENTIFY_CLUSTER_SERVER)
   2314            { "identify", NULL, (const char *)zclIdentifyCommands },
   2315            #endif //ZCL_USING_IDENTIFY_CLUSTER_CLIENT || SERVER
   2316            #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
   2317            { "groups", NULL, (const char *)zclGroupsCommands },
   2318            #endif
   2319            #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
   2320            { "scenes", NULL, (const char *)zclScenesCommands },
   2321            #endif
   2322            #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
   2323            { "on-off", NULL, (const char *)zclOnOffCommands },
   2324            #endif
   2325            #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
   2326            { "level-control", NULL, (const char *)zclLevelControlCommands },
   2327            #endif
   2328            #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
   2329            { "tstat", NULL, (const char *)zclThermostatCommands },
   2330            #endif
   2331            #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
   2332            { "ias-zone", NULL, (const char *)zclIasZoneCommands },
   2333            #endif
   2334            #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
   2335            { "ias-ace", NULL, (const char *)zclIasAceCommands },
   2336            #endif
   2337            #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
   2338            emberCommandEntrySubMenu("poll-control", zclPollControlCommands, "Poll Control commands"),
   2339            #endif
   2340            #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2341            emberCommandEntrySubMenu("power-profile", zclPowerProfileCommands, "Power Profile commands"),
   2342            #endif
   2343            #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2344            emberCommandEntrySubMenu("window-covering", zclWindowCoveringCommands, "Window Covering commands"),
   2345            #endif
   2346            #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
   2347            { "color-control", NULL, (const char *)zclColorControlCommands },
   2348            #endif
   2349          #if defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT) || defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER)
   2350            { "drlc", NULL, (const char *)zclDrlcCommands },
   2351          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT || SERVER
   2352          #if defined(ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT) || defined(ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER)
   2353            { "sm", NULL, (const char *)zclSimpleMeteringCommands },
   2354          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT || ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2355            #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   2356            { "pr", NULL, (const char *)zclPriceClientCommands },
   2357            #endif
   2358            #if defined(ZCL_USING_MESSAGING_CLUSTER_CLIENT)
   2359            { "message", NULL, (const char *)zclMessageCommands },
   2360            #endif
   2361          #if defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT) || defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER)
   2362            { "tunnel", NULL, (const char *)zclTunnelCommands },
   2363          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT || ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2364            #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   2365            { "bacnet", NULL, (const char *)zclBacnetCommands },
   2366            #endif
   2367          
   2368            #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2369            { "lock", NULL, (const char *)zclDoorLockCommands },
   2370            #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2371          
   2372          #if defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2373            { "tunneling", NULL, (const char *)zclTunnelingCommands },
   2374          #endif //defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2375          
   2376            { NULL }
   2377          };
   2378          
   2379          // ******************************************************
   2380          // keys command functions
   2381          // ******************************************************
   2382          
   2383          EmberCommandEntry keysCommands[] = {
   2384            emberCommandEntryAction("clear", keysClearCommand, "", "Clear all link keys"),
   2385            emberCommandEntryAction("print", keysPrintCommand, "", "Print the NWK and link key table"),
   2386            emberCommandEntryAction("delete", keysDeleteCommand, "u", "Delete the specified link key index"),
   2387            emberCommandEntryTerminator(),
   2388          };
   2389          
   2390          // ******************************************************
   2391          // Print commands.
   2392          //
   2393          // print attr
   2394          // print time
   2395          // ******************************************************
   2396          
   2397          EmberCommandEntry printCommands[] = {
   2398            emberCommandEntryAction("time", printTimeCommand, "", "Print current time attribute"),
   2399            emberCommandEntryAction("attr", emberAfPrintAttributeTable, "", "Print the attribute table"),
   2400            emberCommandEntryTerminator(),
   2401          };
   2402          
   2403          // ******************************************************
   2404          // interpan commands
   2405          //
   2406          // mac is     : [FC 2; seq 1; dest PAN 2; dest addr 2|8; src pan 2; src addr 8]
   2407          // stub nwk is: [Frame Control 2]
   2408          // stub APS is: [FC 1; groupId 0|2; clusterId 2; appProfileId 2]
   2409          //
   2410          // MAC FC = bits 0,1,2: frame type (Data) 1
   2411          //          bit 3: security enabled = false (0)
   2412          //          bit 4: frame pending  = false (0)
   2413          //          bit 5: ack required = true (1)
   2414          //          bit 6: intra PAN = false (0)
   2415          //          bit 7,8,9: reserved (0)
   2416          //          bit 10,11: dest addr mode = group (1), short (2), long(3)
   2417          //          bit 12,13: reserved (0)
   2418          //          bit 14,15: src addr mode = long(3)
   2419          //   for GROUP_DEST FC is: 0xC421
   2420          //   for SHORT_DEST FC is: 0xC821
   2421          //   for LONG_DEST FC is : 0xCC21
   2422          //
   2423          // Stub NWK FC: bits 0,1: frame type 3 (0b11)
   2424          //              bits 2-5: protocol version 2 (0b0010)
   2425          //              bits 6-15: reserved (0)
   2426          //   this is always 0x000B
   2427          //
   2428          // stub APS FC: bits 0,1: 3 (0b11)
   2429          //              bits 2,3: delivery mode unicast(0), bcast(2), group(3)
   2430          //              bit 4: reserved (0)
   2431          //              bit 5: security: none (0)
   2432          //              bit 6: ack request: NO ack (0)
   2433          //              bit 7: ext header present: No (0)
   2434          //   this is 03 for unicast, 0B for bcast, 0F for group
   2435          //
   2436          // ******************************************************
   2437          
   2438          EmberCommandEntry interpanCommands[] = {
   2439            { "group", interpanCommand, "vvv" },
   2440            { "short", interpanCommand, "vvv" },
   2441            { "long", interpanLongCommand, "bvvv" },
   2442            { NULL }
   2443          };
   2444          
   2445          #endif // EMBER_AF_GENERATE_CLI

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   cliBufferPrint
        24   -> emberAfPrint
        24   -> emberAfPrintBuffer
         0   -> emberAfPrintln
        24   -> emberAfPrintln
       0   emAfApsFrameClusterIdSetup
       8   emAfApsFrameEndpointSetup
         8   -> emberAfPrimaryEndpointForCurrentNetworkIndex
      48   emAfCliBsendCommand
        48   -> emberAfPrintln
        48   -> emberAfSendMulticastToBindings
        48   -> emberAfSendUnicast
        48   -> emberGetBinding
        48   -> emberUnsignedCommandArgument
      16   emAfCliRawCommand
        16   -> cliBufferPrint
        16   -> emAfApsFrameClusterIdSetup
        16   -> emberAfNextSequence
        16   -> emberCopyStringArgument
        16   -> emberStringCommandArgument
        16   -> emberUnsignedCommandArgument
     104   emAfCliReadCommand
       104   -> emberAfGetDataSize
       104   -> emberAfIsThisDataTypeAStringType
       104   -> emberAfPrint
       104   -> emberAfPrintBuffer
       104   -> emberAfPrintString
       104   -> emberAfPrintln
       104   -> emberAfReadAttribute
       104   -> emberUnsignedCommandArgument
      32   emAfCliSendCommand
        32   -> emAfApsFrameEndpointSetup
        32   -> emberAfGetNodeId
        32   -> emberAfPreCliSendCallback
         0   -> emberAfPrintln
        32   -> emberAfPrintln
        32   -> emberAfSendBroadcast
        32   -> emberAfSendMulticast
        32   -> emberAfSendUnicast
        32   -> emberUnsignedCommandArgument
       8   emAfCliSendUsingMulticastBindingCommand
         8   -> emberUnsignedCommandArgument
       8   emAfCliTimesyncCommand
         8   -> cliBufferPrint
         0   -> emAfCliSendCommand
         8   -> zclBufferAddWord
         8   -> zclBufferSetup
     104   emAfCliWriteCommand
       104   -> emAfPrintStatus
       104   -> emberAfGetDataSize
       104   -> emberAfIsThisDataTypeAStringType
       104   -> emberAfPrint
       104   -> emberAfPrintln
       104   -> emberAfWriteAttribute
       104   -> emberCopyStringArgument
       104   -> emberUnsignedCommandArgument
       104   -> halCommonMemSet
      16   eraseKeyTableEntry
        16   -> emSetKeyTableEntry
        16   -> emberAfPrintln
      32   interpanCommand
        32   -> emberAfInterpanSendMessageCallback
        32   -> emberAfPrintln
        32   -> emberUnsignedCommandArgument
        32   -> halCommonMemSet
      32   interpanLongCommand
        32   -> emberAfInterpanSendMessageCallback
        32   -> emberAfPrintln
        32   -> emberCopyBigEndianEui64Argument
        32   -> emberUnsignedCommandArgument
        32   -> halCommonMemSet
       0   keysClearCommand
       8   keysDeleteCommand
         8   -> emberUnsignedCommandArgument
         0   -> eraseKeyTableEntry
       8   keysPrintCommand
         8   -> emberAfPrintln
         0   -> printKeyInfo
      32   makeZclBuffer
        32   -> cliBufferPrint
        32   -> halInternalAssertFailed
        32   -> zclBufferAddBuffer
        32   -> zclBufferAddByte
        32   -> zclBufferAddInt32
        32   -> zclBufferAddWord
        32   -> zclBufferSetup
       8   printTimeCommand
         8   -> emberAfGetCurrentTime
         0   -> emberAfPrintTime
      16   zclBufferAddBuffer
        16   -> halCommonMemMove
       0   zclBufferAddByte
       8   zclBufferAddByteFromArgument
         8   -> emberUnsignedCommandArgument
         0   -> zclBufferAddByte
       8   zclBufferAddInt16sFromArgument
         8   -> emberSignedCommandArgument
         0   -> zclBufferAddWord
      16   zclBufferAddInt32
        16   -> zclBufferAddByte
       8   zclBufferAddInt32FromArgument
         8   -> emberUnsignedCommandArgument
         0   -> zclBufferAddInt32
       8   zclBufferAddInt32sFromArgument
         8   -> emberSignedCommandArgument
         0   -> zclBufferAddInt32
       8   zclBufferAddInt8sFromArgument
         8   -> emberSignedCommandArgument
         0   -> zclBufferAddByte
      16   zclBufferAddLengthAndStringFromArgument
        16   -> emberCopyStringArgument
       8   zclBufferAddString
         8   -> emberAfStringLength
         0   -> zclBufferAddBuffer
       8   zclBufferAddWord
         0   -> zclBufferAddByte
         8   -> zclBufferAddByte
       8   zclBufferAddWordFromArgument
         8   -> emberUnsignedCommandArgument
         0   -> zclBufferAddWord
      24   zclBufferSetup
        24   -> emAfApsFrameClusterIdSetup
        24   -> emberAfNextSequence
       0   zclDrlcLoadControlEventCommand
       8   zclGlobalCommandDiscoveryCommand
         0   -> cliBufferPrint
         8   -> emberUnsignedCommandArgument
         8   -> zclBufferAddByteFromArgument
         8   -> zclBufferSetup
       8   zclGlobalDirectionCommand
         8   -> emberUnsignedCommandArgument
       8   zclGlobalDiscoverCommand
         0   -> cliBufferPrint
         8   -> zclGlobalSetup
       8   zclGlobalExpectReportFromMeCommand
         0   -> cliBufferPrint
         8   -> emberUnsignedCommandArgument
         8   -> zclBufferAddByte
         8   -> zclBufferAddWordFromArgument
         8   -> zclBufferSetup
       8   zclGlobalReadCommand
         0   -> cliBufferPrint
         8   -> zclGlobalSetup
     104   zclGlobalReportCommand
       104   -> cliBufferPrint
       104   -> emberAfGetDataSize
       104   -> emberAfIsThisDataTypeAStringType
       104   -> emberAfReadAttribute
       104   -> emberAfStringLength
       104   -> emberUnsignedCommandArgument
       104   -> halCommonMemMove
       104   -> zclBufferAddByte
       104   -> zclBufferAddWord
       104   -> zclBufferSetup
       8   zclGlobalReportReadCommand
         0   -> cliBufferPrint
         8   -> emberUnsignedCommandArgument
         8   -> zclBufferAddByteFromArgument
         8   -> zclBufferAddWordFromArgument
         8   -> zclBufferSetup
      16   zclGlobalSendMeAReportCommand
         0   -> cliBufferPrint
        16   -> emberAfGetAttributeAnalogOrDiscreteType
        16   -> emberAfGetDataSize
        16   -> emberCopyStringArgument
        16   -> emberUnsignedCommandArgument
        16   -> zclBufferAddByte
        16   -> zclBufferAddWordFromArgument
        16   -> zclBufferSetup
       8   zclGlobalSetup
         8   -> emberUnsignedCommandArgument
         0   -> zclBufferAddByteFromArgument
         8   -> zclBufferAddWordFromArgument
         8   -> zclBufferSetup
      16   zclGlobalWriteCommand
         0   -> cliBufferPrint
        16   -> emberAfGetDataSize
        16   -> emberAfIsThisDataTypeAStringType
        16   -> emberCopyStringArgument
        16   -> emberUnsignedCommandArgument
        16   -> zclBufferAddLengthAndStringFromArgument
        16   -> zclGlobalSetup
       0   zclGroupsGetCommand
      16   zclIdentifyOnOffCommand
        16   -> emberAfWriteServerAttribute
        16   -> emberUnsignedCommandArgument
       8   zclMfgCodeCommand
         0   -> emberAfPrintln
         8   -> emberUnsignedCommandArgument
      24   zclSimpleCommand
         0   -> cliBufferPrint
        24   -> emberCommandArgumentCount
        24   -> emberSignedCommandArgument
        24   -> emberUnsignedCommandArgument
        24   -> zclBufferAddByte
        24   -> zclBufferAddByteFromArgument
        24   -> zclBufferAddInt32
        24   -> zclBufferAddLengthAndStringFromArgument
        24   -> zclBufferAddWord
        24   -> zclBufferAddWordFromArgument
        24   -> zclBufferSetup
       0   zclTestResponseOffCommand
         0   -> emberAfSetNoReplyForNextMessage
       0   zclTestResponseOnCommand
         0   -> emberAfSetNoReplyForNextMessage
       8   zclTimeCommand
         0   -> emberAfSetTime
         8   -> emberUnsignedCommandArgument
       8   zclUseNextSequenceCommand
         0   -> emberAfPrintln
         8   -> emberUnsignedCommandArgument
       8   zclXDefaultRespCommand
         0   -> emberAfPrintln
         8   -> emberUnsignedCommandArgument


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable35_10
       4  ??DataTable35_11
       4  ??DataTable35_12
       4  ??DataTable35_13
       4  ??DataTable35_14
       4  ??DataTable35_15
       4  ??DataTable35_16
       4  ??DataTable35_17
       4  ??DataTable35_18
       4  ??DataTable35_19
       4  ??DataTable35_2
       4  ??DataTable35_20
       4  ??DataTable35_21
       4  ??DataTable35_22
       4  ??DataTable35_23
       4  ??DataTable35_24
       4  ??DataTable35_25
       4  ??DataTable35_26
       4  ??DataTable35_27
       4  ??DataTable35_28
       4  ??DataTable35_29
       4  ??DataTable35_3
       4  ??DataTable35_30
       4  ??DataTable35_31
       4  ??DataTable35_32
       4  ??DataTable35_33
       4  ??DataTable35_34
       4  ??DataTable35_35
       4  ??DataTable35_4
       4  ??DataTable35_5
       4  ??DataTable35_6
       4  ??DataTable35_7
       4  ??DataTable35_8
       4  ??DataTable35_9
       6  ??Subroutine20_0
       8  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine10
       6  ?Subroutine11
       8  ?Subroutine12
       8  ?Subroutine13
      10  ?Subroutine14
      12  ?Subroutine15
      12  ?Subroutine16
      12  ?Subroutine17
      10  ?Subroutine18
       8  ?Subroutine19
       6  ?Subroutine2
       4  ?Subroutine3
       6  ?Subroutine4
      10  ?Subroutine5
       8  ?Subroutine6
       8  ?Subroutine7
       8  ?Subroutine8
       4  ?Subroutine9
      36  ?_0
      12  ?_1
      16  ?_10
      20  ?_11
      28  ?_12
      20  ?_13
      36  ?_14
       8  ?_15
      12  ?_16
      16  ?_17
       8  ?_18
       8  ?_19
       1  ?_2
      24  ?_20
      24  ?_21
       8  ?_22
      24  ?_23
       8  ?_24
      12  ?_3
      68  ?_4
      40  ?_5
      52  ?_6
      48  ?_7
       8  ?_8
      40  ?_9
      84  appZclBuffer
       2  appZclBufferLen
      92  cliBufferPrint
       1  disableDefaultResponse
      14  emAfApsFrameClusterIdSetup
      22  emAfApsFrameEndpointSetup
     162  emAfCliBsendCommand
      76  emAfCliRawCommand
     154  emAfCliReadCommand
     194  emAfCliSendCommand
      18  emAfCliSendUsingMulticastBindingCommand
      34  emAfCliTimesyncCommand
     182  emAfCliWriteCommand
      34  eraseKeyTableEntry
      12  globalApsFrame
      84  interpanCommand
      82  interpanLongCommand
       2  keysClearCommand
      14  keysDeleteCommand
      20  keysPrintCommand
     124  makeZclBuffer
       2  mfgSpecificId
      14  printTimeCommand
       1  useMulticastBinding
       1  useNextSequence
      32  zclBufferAddBuffer
      18  zclBufferAddByte
       8  zclBufferAddByteFromArgument
       8  zclBufferAddInt16sFromArgument
      20  zclBufferAddInt32
       6  zclBufferAddInt32FromArgument
       8  zclBufferAddInt32sFromArgument
       6  zclBufferAddInt8sFromArgument
      52  zclBufferAddLengthAndStringFromArgument
      20  zclBufferAddString
      18  zclBufferAddWord
       6  zclBufferAddWordFromArgument
      82  zclBufferSetup
       1  zclCmdIsBuilt
       2  zclDrlcLoadControlEventCommand
      46  zclGlobalCommandDiscoveryCommand
       1  zclGlobalDirection
      20  zclGlobalDirectionCommand
       4  zclGlobalDiscoverCommand
      28  zclGlobalExpectReportFromMeCommand
       6  zclGlobalReadCommand
     148  zclGlobalReportCommand
      32  zclGlobalReportReadCommand
      74  zclGlobalSendMeAReportCommand
      26  zclGlobalSetup
      80  zclGlobalWriteCommand
       2  zclGroupsGetCommand
      64  zclIdentifyOnOffCommand
      42  zclMfgCodeCommand
     186  zclSimpleCommand
       6  zclTestResponseOffCommand
       6  zclTestResponseOnCommand
      14  zclTimeCommand
      34  zclUseNextSequenceCommand
      20  zclXDefaultRespCommand

 
   105 bytes in section .bss
   577 bytes in section .rodata
 2 760 bytes in section .text
 
 2 760 bytes of CODE  memory
   577 bytes of CONST memory
   105 bytes of DATA  memory

Errors: none
Warnings: none
