###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:22
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\multi-network.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWCAA4.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\multi-network.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"multi-network.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\multi-network.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\multi-network.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\multi-network.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          #include "app/framework/include/af.h"
     19          

   \                                 In section .bss, align 4
     20          const EmAfZigbeeProNetwork *emAfCurrentZigbeeProNetwork = NULL;
   \                     emAfCurrentZigbeeProNetwork:
   \        0x0                      DS8 4
     21          
     22          //#define NETWORK_INDEX_DEBUG
     23          #if defined(EMBER_TEST) || defined(NETWORK_INDEX_DEBUG)
     24            #define NETWORK_INDEX_ASSERT(x) assert(x)
     25          #else
     26            #define NETWORK_INDEX_ASSERT(x)
     27          #endif
     28          
     29          #if EMBER_SUPPORTED_NETWORKS == 1

   \                                 In section .text, align 2, keep-with-next
     30          EmberStatus emAfInitializeNetworkIndexStack(void)
     31          {
     32            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     33            NETWORK_INDEX_ASSERT(EMBER_AF_DEFAULT_NETWORK_INDEX == 0);
     34            emAfCurrentZigbeeProNetwork = &emAfZigbeeProNetworks[0];
   \                     emAfInitializeNetworkIndexStack: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1
   \        0x2   0x....             LDR.N    R1,??DataTable1_1
   \        0x4   0x6008             STR      R0,[R1, #+0]
     35            return EMBER_SUCCESS;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4770             BX       LR               ;; return
     36          }
     37          

   \                                 In section .text, align 2, keep-with-next
     38          EmberStatus emberAfPushNetworkIndex(uint8_t networkIndex)
     39          {
     40            NETWORK_INDEX_ASSERT(networkIndex == 0);
     41            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     42            return (networkIndex == 0 ? EMBER_SUCCESS : EMBER_INVALID_CALL);
   \                     emberAfPushNetworkIndex: (+1)
   \        0x0   0xB100             CBZ.N    R0,??emberAfPushNetworkIndex_0
   \        0x2   0x2070             MOVS     R0,#+112
   \                     ??emberAfPushNetworkIndex_0: (+1)
   \        0x4   0x4770             BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          EmberStatus emberAfPushCallbackNetworkIndex(void)
     46          {
     47            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     48            NETWORK_INDEX_ASSERT(emberGetCallbackNetwork() == 0);
     49            return EMBER_SUCCESS;
   \                     emberAfPushCallbackNetworkIndex: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          EmberStatus emberAfPushEndpointNetworkIndex(uint8_t endpoint)
     53          {
   \                     emberAfPushEndpointNetworkIndex: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     54            uint8_t networkIndex = emberAfNetworkIndexFromEndpoint(endpoint);
     55            NETWORK_INDEX_ASSERT(networkIndex != 0xFF);
     56            if (networkIndex == 0xFF) {
   \        0x2   0x....'....        BL       emberAfNetworkIndexFromEndpoint
   \        0x6   0x28FF             CMP      R0,#+255
   \        0x8   0xD101             BNE.N    ??emberAfPushEndpointNetworkIndex_0
     57              return EMBER_INVALID_ENDPOINT;
   \        0xA   0x20A3             MOVS     R0,#+163
   \        0xC   0xBD02             POP      {R1,PC}
     58            }
     59            NETWORK_INDEX_ASSERT(networkIndex == 0);
     60            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     61            return EMBER_SUCCESS;
   \                     ??emberAfPushEndpointNetworkIndex_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xBD02             POP      {R1,PC}          ;; return
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          EmberStatus emberAfPopNetworkIndex(void)
     65          {
     66            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     67            return EMBER_SUCCESS;
   \                     emberAfPopNetworkIndex: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
     68          }
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void emAfAssertNetworkIndexStackIsEmpty(void)
     71          {
     72            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     73          }
   \                     emAfAssertNetworkIndexStackIsEmpty: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          uint8_t emberAfPrimaryEndpointForNetworkIndex(uint8_t networkIndex)
     76          {
     77            NETWORK_INDEX_ASSERT(networkIndex == 0);
     78            return (networkIndex == 0 ? emberAfPrimaryEndpoint() : 0xFF);
   \                     emberAfPrimaryEndpointForNetworkIndex: (+1)
   \        0x0   0xB900             CBNZ.N   R0,??emberAfPrimaryEndpointForNetworkIndex_0
   \        0x2   0x....             B.N      ?Subroutine0
   \                     ??emberAfPrimaryEndpointForNetworkIndex_0: (+1)
   \        0x4   0x20FF             MOVS     R0,#+255
   \        0x6   0x4770             BX       LR               ;; return
     79          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1_2
   \        0x2   0x7800             LDRB     R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
     80          

   \                                 In section .text, align 4, keep-with-next
     81          uint8_t emberAfPrimaryEndpointForCurrentNetworkIndex(void)
     82          {
     83            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     84            return emberAfPrimaryEndpoint();
   \                     emberAfPrimaryEndpointForCurrentNetworkIndex: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE ?Subroutine0
   \        0x2                      ;; // Fall through to label ?Subroutine0
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          uint8_t emberAfNetworkIndexFromEndpoint(uint8_t endpoint)
     88          {
   \                     emberAfNetworkIndexFromEndpoint: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     89            uint8_t index = emberAfIndexFromEndpoint(endpoint);
     90            NETWORK_INDEX_ASSERT(index != 0xFF);
     91            if (index == 0xFF) {
   \        0x2   0x....'....        BL       emberAfIndexFromEndpoint
   \        0x6   0x28FF             CMP      R0,#+255
   \        0x8   0xBF18             IT       NE 
   \        0xA   0x2000             MOVNE    R0,#+0
     92              return 0xFF;
     93            }
     94            NETWORK_INDEX_ASSERT(emberAfNetworkIndexFromEndpointIndex(index) == 0);
     95            return 0;
   \        0xC   0xBD02             POP      {R1,PC}          ;; return
     96          }
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void emberAfNetworkEventControlSetInactive(EmberEventControl *controls)
     99          {
    100            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    101            emberEventControlSetInactive(controls[0]);
   \                     emberAfNetworkEventControlSetInactive: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x7001             STRB     R1,[R0, #+0]
    102          }
   \        0x4   0x4770             BX       LR               ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          bool emberAfNetworkEventControlGetActive(EmberEventControl *controls)
    105          {
    106            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    107            return emberEventControlGetActive(controls[0]);
   \                     emberAfNetworkEventControlGetActive: (+1)
   \        0x0   0x7800             LDRB     R0,[R0, #+0]
   \        0x2   0xB100             CBZ.N    R0,??emberAfNetworkEventControlGetActive_0
   \        0x4   0x2001             MOVS     R0,#+1
   \                     ??emberAfNetworkEventControlGetActive_0: (+1)
   \        0x6   0x4770             BX       LR               ;; return
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          void emberAfNetworkEventControlSetActive(EmberEventControl *controls)
    111          {
    112            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    113            emberEventControlSetActive(controls[0]);
   \                     emberAfNetworkEventControlSetActive: (+1)
   \        0x0   0x....'....        B.W      emEventControlSetActive
    114          }
    115          

   \                                 In section .text, align 2, keep-with-next
    116          EmberStatus emberAfNetworkEventControlSetDelayMS(EmberEventControl *controls,
    117                                                           uint32_t delayMs)
    118          {
    119            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    120            return emberAfEventControlSetDelayMS(&controls[0], delayMs);
   \                     emberAfNetworkEventControlSetDelayMS: (+1)
   \        0x0   0x....'....        B.W      emberAfEventControlSetDelayMS
    121          }
    122          

   \                                 In section .text, align 2, keep-with-next
    123          EmberStatus emberAfNetworkEventControlSetDelayQS(EmberEventControl *controls,
    124                                                           uint32_t delayQs)
    125          {
    126            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    127            return emberAfEventControlSetDelayQS(&controls[0], delayQs);
   \                     emberAfNetworkEventControlSetDelayQS: (+1)
   \        0x0   0x....'....        B.W      emberAfEventControlSetDelayQS
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          EmberStatus emberAfNetworkEventControlSetDelayMinutes(EmberEventControl *controls,
    131                                                                uint16_t delayM)
    132          {
    133            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    134            return emberAfEventControlSetDelayMinutes(&controls[0], delayM);
   \                     emberAfNetworkEventControlSetDelayMinutes: (+1)
   \        0x0   0x....'....        B.W      emberAfEventControlSetDelayMinutes
    135          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     emAfZigbeeProNetworks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     emAfCurrentZigbeeProNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     emAfEndpoints
    136          
    137          #else
    138          
    139          // We use two bits to describe a network index and sixteen bits to store our
    140          // stack of network indices.  This limits us to a maximum of four networks
    141          // indices and a maximum of eight in our stack.  We also remember one default
    142          // network that we resort to when our stack is empty.
    143          static uint16_t networkIndexStack = 0;
    144          static uint8_t networkIndices = 0;
    145          #define NETWORK_INDEX_BITS       2
    146          #define NETWORK_INDEX_MAX        (1 << NETWORK_INDEX_BITS)
    147          #define NETWORK_INDEX_MASK       (NETWORK_INDEX_MAX - 1)
    148          #define NETWORK_INDEX_STACK_SIZE (sizeof(networkIndexStack) * 8 / NETWORK_INDEX_BITS)
    149          
    150          static EmberStatus setCurrentNetwork(void)
    151          {
    152            EmberStatus status;
    153            uint8_t networkIndex = (networkIndices == 0
    154                                    ? EMBER_AF_DEFAULT_NETWORK_INDEX
    155                                    : networkIndexStack & NETWORK_INDEX_MASK);
    156            status = emberSetCurrentNetwork(networkIndex);
    157            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    158            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    159            if (status == EMBER_SUCCESS) {
    160              //TODO RF4CE removal: can we get rid of the separate pro network??
    161              emAfCurrentZigbeeProNetwork = &emAfZigbeeProNetworks[networkIndex];
    162            }
    163            return status;
    164          }
    165          
    166          EmberStatus emAfInitializeNetworkIndexStack(void)
    167          {
    168            EmberStatus status;
    169            NETWORK_INDEX_ASSERT(networkIndices == 0);
    170            if (networkIndices != 0) {
    171              return EMBER_INVALID_CALL;
    172            }
    173            status = setCurrentNetwork();
    174            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    175            NETWORK_INDEX_ASSERT(networkIndices == 0);
    176            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == EMBER_AF_DEFAULT_NETWORK_INDEX);
    177            return status;
    178          }
    179          
    180          EmberStatus emberAfPushNetworkIndex(uint8_t networkIndex)
    181          {
    182            EmberStatus status;
    183            NETWORK_INDEX_ASSERT(networkIndex < NETWORK_INDEX_MAX);
    184            if (NETWORK_INDEX_MAX <= networkIndex) {
    185              return EMBER_INDEX_OUT_OF_RANGE;
    186            }
    187            NETWORK_INDEX_ASSERT(networkIndices < NETWORK_INDEX_STACK_SIZE);
    188            if (NETWORK_INDEX_STACK_SIZE <= networkIndices) {
    189              return EMBER_TABLE_FULL;
    190            }
    191            networkIndexStack <<= NETWORK_INDEX_BITS;
    192            networkIndexStack |= networkIndex;
    193            networkIndices++;
    194            status = setCurrentNetwork();
    195            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    196            NETWORK_INDEX_ASSERT(0 < networkIndices);
    197            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    198            return status;
    199          }
    200          
    201          EmberStatus emberAfPushCallbackNetworkIndex(void)
    202          {
    203            EmberStatus status = emberAfPushNetworkIndex(emberGetCallbackNetwork());
    204            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    205            NETWORK_INDEX_ASSERT(0 < networkIndices);
    206            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == emberGetCallbackNetwork());
    207            return status;
    208          }
    209          
    210          EmberStatus emberAfPushEndpointNetworkIndex(uint8_t endpoint)
    211          {
    212            EmberStatus status;
    213            uint8_t networkIndex = emberAfNetworkIndexFromEndpoint(endpoint);
    214            NETWORK_INDEX_ASSERT(networkIndex != 0xFF);
    215            if (networkIndex == 0xFF) {
    216              return EMBER_INVALID_ENDPOINT;
    217            }
    218            status = emberAfPushNetworkIndex(networkIndex);
    219            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    220            NETWORK_INDEX_ASSERT(0 < networkIndices);
    221            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    222            return status;
    223          }
    224          
    225          EmberStatus emberAfPopNetworkIndex(void)
    226          {
    227            EmberStatus status;
    228            NETWORK_INDEX_ASSERT(0 < networkIndices);
    229            if (networkIndices == 0) {
    230              return EMBER_INVALID_CALL;
    231            }
    232            networkIndexStack >>= NETWORK_INDEX_BITS;
    233            networkIndices--;
    234            status = setCurrentNetwork();
    235            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    236            return status;
    237          }
    238          
    239          void emAfAssertNetworkIndexStackIsEmpty(void)
    240          {
    241            NETWORK_INDEX_ASSERT(networkIndices == 0);
    242            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == EMBER_AF_DEFAULT_NETWORK_INDEX);
    243          }
    244          
    245          uint8_t emberAfPrimaryEndpointForNetworkIndex(uint8_t networkIndex)
    246          {
    247            uint8_t i;
    248            NETWORK_INDEX_ASSERT(networkIndex < NETWORK_INDEX_MAX);
    249            for (i = 0; i < emberAfEndpointCount(); i++) {
    250              if (emberAfNetworkIndexFromEndpointIndex(i) == networkIndex) {
    251                return emberAfEndpointFromIndex(i);
    252              }
    253            }
    254            return 0xFF;
    255          }
    256          
    257          uint8_t emberAfPrimaryEndpointForCurrentNetworkIndex(void)
    258          {
    259            return emberAfPrimaryEndpointForNetworkIndex(emberGetCurrentNetwork());
    260          }
    261          
    262          uint8_t emberAfNetworkIndexFromEndpoint(uint8_t endpoint)
    263          {
    264            uint8_t index = emberAfIndexFromEndpoint(endpoint);
    265            NETWORK_INDEX_ASSERT(index != 0xFF);
    266            return (index == 0xFF ? 0xFF : emberAfNetworkIndexFromEndpointIndex(index));
    267          }
    268          
    269          void emberAfNetworkEventControlSetInactive(EmberEventControl *controls)
    270          {
    271            EmberEventControl *control = controls + emberGetCurrentNetwork();
    272            emberEventControlSetInactive(*control);
    273          }
    274          
    275          bool emberAfNetworkEventControlGetActive(EmberEventControl *controls)
    276          {
    277            EmberEventControl *control = controls + emberGetCurrentNetwork();
    278            return emberEventControlGetActive(*control);
    279          }
    280          
    281          void emberAfNetworkEventControlSetActive(EmberEventControl *controls)
    282          {
    283            EmberEventControl *control = controls + emberGetCurrentNetwork();
    284            emberEventControlSetActive(*control);
    285          }
    286          
    287          EmberStatus emberAfNetworkEventControlSetDelayMS(EmberEventControl *controls,
    288                                                           uint32_t delayMs)
    289          {
    290            EmberEventControl *control = controls + emberGetCurrentNetwork();
    291            return emberAfEventControlSetDelayMS(control, delayMs);
    292          }
    293          
    294          EmberStatus emberAfNetworkEventControlSetDelayQS(EmberEventControl *controls,
    295                                                           uint32_t delayQs)
    296          {
    297            EmberEventControl *control = controls + emberGetCurrentNetwork();
    298            return emberAfEventControlSetDelayQS(control, delayQs);
    299          }
    300          
    301          EmberStatus emberAfNetworkEventControlSetDelayMinutes(EmberEventControl *controls,
    302                                                                uint16_t delayM)
    303          {
    304            EmberEventControl *control = controls + emberGetCurrentNetwork();
    305            return emberAfEventControlSetDelayMinutes(control, delayM);
    306          }
    307          
    308          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emAfAssertNetworkIndexStackIsEmpty
       0   emAfInitializeNetworkIndexStack
       0   emberAfNetworkEventControlGetActive
       0   emberAfNetworkEventControlSetActive
         0   -> emEventControlSetActive
       0   emberAfNetworkEventControlSetDelayMS
         0   -> emberAfEventControlSetDelayMS
       0   emberAfNetworkEventControlSetDelayMinutes
         0   -> emberAfEventControlSetDelayMinutes
       0   emberAfNetworkEventControlSetDelayQS
         0   -> emberAfEventControlSetDelayQS
       0   emberAfNetworkEventControlSetInactive
       8   emberAfNetworkIndexFromEndpoint
         8   -> emberAfIndexFromEndpoint
       0   emberAfPopNetworkIndex
       0   emberAfPrimaryEndpointForCurrentNetworkIndex
       0   emberAfPrimaryEndpointForNetworkIndex
       0   emberAfPushCallbackNetworkIndex
       8   emberAfPushEndpointNetworkIndex
         8   -> emberAfNetworkIndexFromEndpoint
       0   emberAfPushNetworkIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       6  ?Subroutine0
       2  emAfAssertNetworkIndexStackIsEmpty
       4  emAfCurrentZigbeeProNetwork
      10  emAfInitializeNetworkIndexStack
       8  emberAfNetworkEventControlGetActive
       4  emberAfNetworkEventControlSetActive
       4  emberAfNetworkEventControlSetDelayMS
       4  emberAfNetworkEventControlSetDelayMinutes
       4  emberAfNetworkEventControlSetDelayQS
       6  emberAfNetworkEventControlSetInactive
      14  emberAfNetworkIndexFromEndpoint
       4  emberAfPopNetworkIndex
       2  emberAfPrimaryEndpointForCurrentNetworkIndex
       8  emberAfPrimaryEndpointForNetworkIndex
       4  emberAfPushCallbackNetworkIndex
      18  emberAfPushEndpointNetworkIndex
       6  emberAfPushNetworkIndex

 
   4 bytes in section .bss
 116 bytes in section .text
 
 116 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
