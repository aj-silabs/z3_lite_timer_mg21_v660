###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:53
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emlib\src\em_rtcc.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW58CD.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emlib\src\em_rtcc.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"em_rtcc.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0
#        -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emlib\src\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\em_rtcc.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\em_rtcc.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emlib\src\em_rtcc.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Real Time Counter with Calendar (RTCC) Peripheral API
      4           * @version 5.8.0
      5           *******************************************************************************
      6           * # License
      7           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      8           *******************************************************************************
      9           *
     10           * SPDX-License-Identifier: Zlib
     11           *
     12           * The licensor of this software is Silicon Laboratories Inc.
     13           *
     14           * This software is provided 'as-is', without any express or implied
     15           * warranty. In no event will the authors be held liable for any damages
     16           * arising from the use of this software.
     17           *
     18           * Permission is granted to anyone to use this software for any purpose,
     19           * including commercial applications, and to alter it and redistribute it
     20           * freely, subject to the following restrictions:
     21           *
     22           * 1. The origin of this software must not be misrepresented; you must not
     23           *    claim that you wrote the original software. If you use this software
     24           *    in a product, an acknowledgment in the product documentation would be
     25           *    appreciated but is not required.
     26           * 2. Altered source versions must be plainly marked as such, and must not be
     27           *    misrepresented as being the original software.
     28           * 3. This notice may not be removed or altered from any source distribution.
     29           *
     30           ******************************************************************************/
     31          
     32          #include "em_rtcc.h"
     33          #if defined(RTCC_COUNT) && (RTCC_COUNT == 1)
     34          #include "em_bus.h"
     35          
     36          /***************************************************************************//**
     37           * @addtogroup emlib
     38           * @{
     39           ******************************************************************************/
     40          
     41          /***************************************************************************//**
     42           * @addtogroup RTCC
     43           * @brief Real Time Counter (RTCC) Peripheral API
     44           * @details
     45           *  This module contains functions to control the RTCC peripheral of Silicon
     46           *  Labs 32-bit MCUs and SoCs. The RTCC ensures timekeeping in low energy modes.
     47           *  The RTCC also includes a BCD calendar mode for easy time and date keeping.
     48           * @{
     49           ******************************************************************************/
     50          
     51          /*******************************************************************************
     52           *******************************   DEFINES   ***********************************
     53           ******************************************************************************/
     54          
     55          /*******************************************************************************
     56           **************************   LOCAL FUNCTIONS   ********************************
     57           ******************************************************************************/
     58          
     59          /*******************************************************************************
     60           **************************   GLOBAL FUNCTIONS   *******************************
     61           ******************************************************************************/
     62          
     63          /***************************************************************************//**
     64           * @brief
     65           *   Configure the selected capture/compare channel of the RTCC.
     66           *
     67           * @details
     68           *   Use this function to configure an RTCC channel.
     69           *   Select capture/compare mode, match output action, overflow output action,
     70           *   and PRS input configuration.
     71           *   See the configuration structure @ref RTCC_CCChConf_TypeDef for more
     72           *   details.
     73           *
     74           * @param[in] ch
     75           *   A channel selector.
     76           *
     77           * @param[in] confPtr
     78           *   A pointer to the configuration structure.
     79           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     80          void RTCC_ChannelInit(int ch, RTCC_CCChConf_TypeDef const *confPtr)
     81          {
   \                     RTCC_ChannelInit: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
     82            EFM_ASSERT(RTCC_CH_VALID(ch));
     83          
     84          #if defined(_SILICON_LABS_32B_SERIES_1)
     85            EFM_ASSERT((uint32_t)confPtr->compMask
     86                       < (_RTCC_CC_CTRL_COMPMASK_MASK >> _RTCC_CC_CTRL_COMPMASK_SHIFT)
     87                       + 1U);
     88          
     89            /** Configure the selected capture/compare channel. */
     90            RTCC->CC[ch].CTRL = ((uint32_t)confPtr->chMode << _RTCC_CC_CTRL_MODE_SHIFT)
     91                                | ((uint32_t)confPtr->compMatchOutAction << _RTCC_CC_CTRL_CMOA_SHIFT)
     92                                | ((uint32_t)confPtr->prsSel << _RTCC_CC_CTRL_PRSSEL_SHIFT)
     93                                | ((uint32_t)confPtr->inputEdgeSel << _RTCC_CC_CTRL_ICEDGE_SHIFT)
     94                                | ((uint32_t)confPtr->compBase << _RTCC_CC_CTRL_COMPBASE_SHIFT)
     95                                | ((uint32_t)confPtr->compMask << _RTCC_CC_CTRL_COMPMASK_SHIFT)
     96                                | ((uint32_t)confPtr->dayCompMode << _RTCC_CC_CTRL_DAYCC_SHIFT);
     97          #else
     98          
     99            /** Configure the selected capture/compare channel. */
    100            RTCC->CC[ch].CTRL = ( (uint32_t)confPtr->chMode << _RTCC_CC_CTRL_MODE_SHIFT)
    101                                | ( (uint32_t)confPtr->compMatchOutAction << _RTCC_CC_CTRL_CMOA_SHIFT)
    102                                | ( (uint32_t)confPtr->inputEdgeSel << _RTCC_CC_CTRL_ICEDGE_SHIFT)
    103                                | ( (uint32_t)confPtr->compBase << _RTCC_CC_CTRL_COMPBASE_SHIFT);
   \        0x2   0x780A             LDRB     R2,[R1, #+0]
   \        0x4   0x784B             LDRB     R3,[R1, #+1]
   \        0x6   0x78CC             LDRB     R4,[R1, #+3]
   \        0x8   0x250C             MOVS     R5,#+12
   \        0xA   0xEA42 0x0283      ORR      R2,R2,R3, LSL #+2
   \        0xE   0xEA42 0x1244      ORR      R2,R2,R4, LSL #+5
   \       0x12   0x790B             LDRB     R3,[R1, #+4]
   \       0x14   0x4345             MULS     R5,R5,R0
   \       0x16   0x....             LDR.N    R4,??DataTable3  ;; 0x48000030
   \       0x18   0xEA42 0x1203      ORR      R2,R2,R3, LSL #+4
   \       0x1C   0x5162             STR      R2,[R4, R5]
    104            if (confPtr->chMode == rtccCapComChModeCapture) {
   \       0x1E   0x780A             LDRB     R2,[R1, #+0]
   \       0x20   0x2A01             CMP      R2,#+1
   \       0x22   0xD103             BNE.N    ??RTCC_ChannelInit_0
    105              volatile uint32_t *reg = &PRS->CONSUMER_RTCC_CC0;
    106              reg[ch] = confPtr->prsSel;
   \       0x24   0x7889             LDRB     R1,[R1, #+2]
   \       0x26   0x....             LDR.N    R2,??DataTable3_1  ;; 0x400380d0
   \       0x28   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    107            }
    108          #endif
    109          }
   \                     ??RTCC_ChannelInit_0: (+1)
   \       0x2C   0xBD30             POP      {R4,R5,PC}       ;; return
    110          
    111          /***************************************************************************//**
    112           * @brief
    113           *   Enable/disable RTCC counting.
    114           *
    115           * @param[in] enable
    116           *   True to enable RTCC counting, false to disable counting.
    117           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    118          void RTCC_Enable(bool enable)
    119          {
   \                     RTCC_Enable: (+1)
   \        0x0   0x4601             MOV      R1,R0
    120          #if defined (_RTCC_CTRL_ENABLE_SHIFT)
    121            /* Bitbanding the enable bit in the CTRL register (atomic). */
    122            BUS_RegBitWrite((&RTCC->CTRL), _RTCC_CTRL_ENABLE_SHIFT, (uint32_t)enable);
    123          #elif defined (RTCC_CMD_START)
    124          
    125            /* Quick exit if we want to disable RTCC and it's already disabled. */
    126            if ((RTCC->EN == 0U) && !enable) {
   \        0x2   0x....             LDR.N    R3,??DataTable3_2  ;; 0x48000004
   \        0x4   0x6818             LDR      R0,[R3, #+0]
   \        0x6   0xB908             CBNZ.N   R0,??RTCC_Enable_0
   \        0x8   0x0008             MOVS     R0,R1
   \        0xA   0xD024             BEQ.N    ??RTCC_Enable_1
    127              return;
    128            }
    129          
    130            if (RTCC->EN != 0U) {
   \                     ??RTCC_Enable_0: (+1)
   \        0xC   0x681A             LDR      R2,[R3, #+0]
   \        0xE   0xB12A             CBZ.N    R2,??RTCC_Enable_2
   \                     ??RTCC_Enable_3: (+1)
   \       0x10   0x6818             LDR      R0,[R3, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xBF1C             ITT      NE 
   \       0x16   0x6A58             LDRNE    R0,[R3, #+36]
   \       0x18   0x2800             CMPNE    R0,#+0
   \       0x1A   0xD1F9             BNE.N    ??RTCC_Enable_3
    131              /* Modifying the enable bit while synchronization is active will BusFault */
    132              RTCC_SyncWait();
    133            }
    134          
    135            if (enable) {
   \                     ??RTCC_Enable_2: (+1)
   \       0x1C   0xB151             CBZ.N    R1,??RTCC_Enable_4
    136              RTCC->EN_SET = RTCC_EN_EN;
   \       0x1E   0x2101             MOVS     R1,#+1
   \       0x20   0x....             LDR.N    R2,??DataTable3_3  ;; 0x48001004
   \       0x22   0x6011             STR      R1,[R2, #+0]
    137              RTCC_Start();
   \                     ??RTCC_Enable_5: (+1)
   \       0x24   0x6818             LDR      R0,[R3, #+0]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xBF1C             ITT      NE 
   \       0x2A   0x6A58             LDRNE    R0,[R3, #+36]
   \       0x2C   0x2800             CMPNE    R0,#+0
   \       0x2E   0xD1F9             BNE.N    ??RTCC_Enable_5
   \       0x30   0x6099             STR      R1,[R3, #+8]
    138            } else {
   \       0x32   0x4770             BX       LR
   \                     ??RTCC_Enable_4: (+1)
   \       0x34   0x6818             LDR      R0,[R3, #+0]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xBF1C             ITT      NE 
   \       0x3A   0x6A58             LDRNE    R0,[R3, #+36]
   \       0x3C   0x2800             CMPNE    R0,#+0
   \       0x3E   0xD1F9             BNE.N    ??RTCC_Enable_4
   \       0x40   0x2102             MOVS     R1,#+2
   \       0x42   0x6099             STR      R1,[R3, #+8]
   \                     ??RTCC_Enable_6: (+1)
   \       0x44   0x6818             LDR      R0,[R3, #+0]
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xBF1C             ITT      NE 
   \       0x4A   0x6A58             LDRNE    R0,[R3, #+36]
   \       0x4C   0x2800             CMPNE    R0,#+0
   \       0x4E   0xD1F9             BNE.N    ??RTCC_Enable_6
    139              RTCC_Stop();
    140              RTCC_SyncWait();
    141              RTCC->EN_CLR = RTCC_EN_EN;
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x....             LDR.N    R0,??DataTable3_4  ;; 0x48002004
   \       0x54   0x6001             STR      R1,[R0, #+0]
    142            }
    143          #endif
    144          }
   \                     ??RTCC_Enable_1: (+1)
   \       0x56   0x4770             BX       LR               ;; return
    145          
    146          /***************************************************************************//**
    147           * @brief
    148           *   Initialize RTCC.
    149           *
    150           * @details
    151           *   Note that the compare values must be set separately with RTCC_CompareSet(),
    152           *   which should probably be done prior to the use of this function if
    153           *   configuring the RTCC to start when initialization is completed.
    154           *
    155           * @param[in] init
    156           *   A pointer to the RTCC initialization structure.
    157           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    158          void RTCC_Init(const RTCC_Init_TypeDef *init)
    159          {
   \                     RTCC_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    160          #if defined (_RTCC_CTRL_MASK)
    161            RTCC->CTRL = ((init->enable ? 1UL : 0UL) << _RTCC_CTRL_ENABLE_SHIFT)
    162                         | ((init->debugRun ? 1UL : 0UL) << _RTCC_CTRL_DEBUGRUN_SHIFT)
    163                         | ((init->precntWrapOnCCV0 ? 1UL : 0UL) << _RTCC_CTRL_PRECCV0TOP_SHIFT)
    164                         | ((init->cntWrapOnCCV1 ? 1UL : 0UL) << _RTCC_CTRL_CCV1TOP_SHIFT)
    165                         | ((uint32_t)init->presc << _RTCC_CTRL_CNTPRESC_SHIFT)
    166                         | ((uint32_t)init->prescMode << _RTCC_CTRL_CNTTICK_SHIFT)
    167          #if defined(_RTCC_CTRL_BUMODETSEN_MASK)
    168                         | ((uint32_t)init->enaBackupModeSet << _RTCC_CTRL_BUMODETSEN_SHIFT)
    169          #endif
    170                         | ((init->enaOSCFailDetect ? 1UL : 0UL) << _RTCC_CTRL_OSCFDETEN_SHIFT)
    171                         | ((uint32_t)init->cntMode << _RTCC_CTRL_CNTMODE_SHIFT)
    172                         | ((init->disLeapYearCorr ? 1UL : 0UL) << _RTCC_CTRL_LYEARCORRDIS_SHIFT);
    173          
    174          #elif defined (_RTCC_CFG_MASK)
    175            if (RTCC->EN != 0U) {
   \        0x2   0x....             LDR.N    R3,??DataTable3_2  ;; 0x48000004
   \        0x4   0x681A             LDR      R2,[R3, #+0]
   \        0x6   0x4601             MOV      R1,R0
   \        0x8   0xB12A             CBZ.N    R2,??RTCC_Init_0
   \                     ??RTCC_Init_1: (+1)
   \        0xA   0x6818             LDR      R0,[R3, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xBF1C             ITT      NE 
   \       0x10   0x6A58             LDRNE    R0,[R3, #+36]
   \       0x12   0x2800             CMPNE    R0,#+0
   \       0x14   0xD1F9             BNE.N    ??RTCC_Init_1
    176              RTCC_SyncWait();
    177            }
    178            RTCC->EN_CLR = RTCC_EN_EN;
   \                     ??RTCC_Init_0: (+1)
   \       0x16   0x2201             MOVS     R2,#+1
   \       0x18   0x....             LDR.N    R0,??DataTable3_4  ;; 0x48002004
   \       0x1A   0x6002             STR      R2,[R0, #+0]
    179            RTCC->CFG = ((init->debugRun ? 1UL : 0UL) << _RTCC_CFG_DEBUGRUN_SHIFT)
    180                        | ( (init->precntWrapOnCCV0 ? 1UL : 0UL) << _RTCC_CFG_PRECNTCCV0TOP_SHIFT)
    181                        | ( (init->cntWrapOnCCV1 ? 1UL : 0UL) << _RTCC_CFG_CNTCCV1TOP_SHIFT)
    182                        | ( (uint32_t)init->presc << _RTCC_CFG_CNTPRESC_SHIFT)
    183                        | ( (uint32_t)init->prescMode << _RTCC_CFG_CNTTICK_SHIFT);
   \       0x1C   0x7848             LDRB     R0,[R1, #+1]
   \       0x1E   0xB100             CBZ.N    R0,??RTCC_Init_2
   \       0x20   0x2001             MOVS     R0,#+1
   \                     ??RTCC_Init_2: (+1)
   \       0x22   0x788A             LDRB     R2,[R1, #+2]
   \       0x24   0xB102             CBZ.N    R2,??RTCC_Init_3
   \       0x26   0x2201             MOVS     R2,#+1
   \                     ??RTCC_Init_3: (+1)
   \       0x28   0x78CC             LDRB     R4,[R1, #+3]
   \       0x2A   0xB104             CBZ.N    R4,??RTCC_Init_4
   \       0x2C   0x2401             MOVS     R4,#+1
   \                     ??RTCC_Init_4: (+1)
   \       0x2E   0xEA40 0x0042      ORR      R0,R0,R2, LSL #+1
   \       0x32   0x790A             LDRB     R2,[R1, #+4]
   \       0x34   0xEA40 0x0084      ORR      R0,R0,R4, LSL #+2
   \       0x38   0x794C             LDRB     R4,[R1, #+5]
   \       0x3A   0xEA40 0x1002      ORR      R0,R0,R2, LSL #+4
    184            RTCC->EN_SET = RTCC_EN_EN;
   \       0x3E   0x2201             MOVS     R2,#+1
   \       0x40   0xEA40 0x00C4      ORR      R0,R0,R4, LSL #+3
   \       0x44   0x6058             STR      R0,[R3, #+4]
   \       0x46   0x....             LDR.N    R4,??DataTable3_3  ;; 0x48001004
   \       0x48   0x6022             STR      R2,[R4, #+0]
    185            RTCC->CMD = init->enable ? RTCC_CMD_START : RTCC_CMD_STOP;
   \       0x4A   0x7808             LDRB     R0,[R1, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xBF14             ITE      NE 
   \       0x50   0x2001             MOVNE    R0,#+1
   \       0x52   0x2002             MOVEQ    R0,#+2
   \       0x54   0x6098             STR      R0,[R3, #+8]
    186          #endif
    187          }
   \       0x56   0xBD10             POP      {R4,PC}          ;; return
    188          
    189          /***************************************************************************//**
    190           * @brief
    191           *   Restore RTCC to its reset state.
    192           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    193          void RTCC_Reset(void)
    194          {
   \                     RTCC_Reset: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    195            unsigned int i;
    196          
    197          #if defined(_RTCC_CTRL_MASK)
    198            /* Restore all RTCC registers to their default values. */
    199            RTCC_Unlock();
    200            RTCC->CTRL    = _RTCC_CTRL_RESETVALUE;
    201            RTCC->PRECNT  = _RTCC_PRECNT_RESETVALUE;
    202            RTCC->CNT     = _RTCC_CNT_RESETVALUE;
    203            RTCC->TIME    = _RTCC_TIME_RESETVALUE;
    204            RTCC->DATE    = _RTCC_DATE_RESETVALUE;
    205            RTCC->IEN     = _RTCC_IEN_RESETVALUE;
    206            RTCC->IFC     = _RTCC_IFC_MASK;
    207            RTCC_StatusClear();
    208            RTCC->EM4WUEN = _RTCC_EM4WUEN_RESETVALUE;
    209          
    210            for (i = 0; i < RTCC_CC_NUM; i++) {
    211              RTCC->CC[i].CTRL = _RTCC_CC_CTRL_RESETVALUE;
    212              RTCC->CC[i].CCV  = _RTCC_CC_CCV_RESETVALUE;
    213              RTCC->CC[i].TIME = _RTCC_CC_TIME_RESETVALUE;
    214              RTCC->CC[i].DATE = _RTCC_CC_DATE_RESETVALUE;
    215            }
    216          
    217          #elif defined(_RTCC_CFG_MASK)
    218          
    219            /* Restore all RTCC registers to their default values. */
    220            RTCC_Unlock();
   \        0x2   0x....             LDR.N    R1,??DataTable3_2  ;; 0x48000004
   \        0x4   0xF64A 0x60E8      MOVW     R0,#+44776
   \        0x8   0x6288             STR      R0,[R1, #+40]
    221            RTCC->EN_SET = RTCC_EN_EN;
   \        0xA   0x2201             MOVS     R2,#+1
   \        0xC   0x....             LDR.N    R3,??DataTable3_3  ;; 0x48001004
   \        0xE   0x601A             STR      R2,[R3, #+0]
   \                     ??RTCC_Reset_0: (+1)
   \       0x10   0x6808             LDR      R0,[R1, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xBF1C             ITT      NE 
   \       0x16   0x6A48             LDRNE    R0,[R1, #+36]
   \       0x18   0x2800             CMPNE    R0,#+0
   \       0x1A   0xD1F9             BNE.N    ??RTCC_Reset_0
   \       0x1C   0x2202             MOVS     R2,#+2
   \       0x1E   0x608A             STR      R2,[R1, #+8]
    222            RTCC_Stop();
    223            RTCC_SyncWait();
   \                     ??RTCC_Reset_1: (+1)
   \       0x20   0x6808             LDR      R0,[R1, #+0]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xBF1C             ITT      NE 
   \       0x26   0x6A48             LDRNE    R0,[R1, #+36]
   \       0x28   0x2800             CMPNE    R0,#+0
   \       0x2A   0xD1F9             BNE.N    ??RTCC_Reset_1
    224            RTCC->PRECNT  = _RTCC_PRECNT_RESETVALUE;
   \       0x2C   0x2200             MOVS     R2,#+0
   \       0x2E   0x618A             STR      R2,[R1, #+24]
    225            RTCC->CNT     = _RTCC_CNT_RESETVALUE;
   \       0x30   0x61CA             STR      R2,[R1, #+28]
    226            RTCC->IEN     = _RTCC_IEN_RESETVALUE;
   \       0x32   0x614A             STR      R2,[R1, #+20]
    227            RTCC_IntClear(_RTCC_IF_MASK);
   \       0x34   0x....             LDR.N    R2,??DataTable3_4  ;; 0x48002004
   \       0x36   0x201F             MOVS     R0,#+31
   \       0x38   0x6110             STR      R0,[R2, #+16]
    228            RTCC_StatusClear();
    229          
    230            for (i = 0; i < RTCC_CC_NUM; i++) {
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x....             LDR.N    R3,??DataTable3  ;; 0x48000030
   \       0x3E   0x2500             MOVS     R5,#+0
   \       0x40   0x2600             MOVS     R6,#+0
    231              RTCC->CC[i].CTRL = _RTCC_CC_CTRL_RESETVALUE;
   \                     ??RTCC_Reset_2: (+1)
   \       0x42   0x240C             MOVS     R4,#+12
   \       0x44   0x4344             MULS     R4,R4,R0
   \       0x46   0x511D             STR      R5,[R3, R4]
    232              RTCC->CC[i].OCVALUE  = _RTCC_CC_OCVALUE_RESETVALUE;
   \       0x48   0x441C             ADD      R4,R3,R4
    233            }
   \       0x4A   0x1C40             ADDS     R0,R0,#+1
   \       0x4C   0x6066             STR      R6,[R4, #+4]
   \       0x4E   0x2803             CMP      R0,#+3
   \       0x50   0xD3F7             BCC.N    ??RTCC_Reset_2
   \                     ??RTCC_Reset_3: (+1)
   \       0x52   0x6808             LDR      R0,[R1, #+0]
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xBF1C             ITT      NE 
   \       0x58   0x6A48             LDRNE    R0,[R1, #+36]
   \       0x5A   0x2800             CMPNE    R0,#+0
   \       0x5C   0xD1F9             BNE.N    ??RTCC_Reset_3
    234            RTCC_SyncWait();
    235            RTCC->EN_CLR = RTCC_EN_EN;
   \       0x5E   0x2301             MOVS     R3,#+1
   \       0x60   0x6013             STR      R3,[R2, #+0]
    236            RTCC->CFG    = _RTCC_CFG_RESETVALUE;
   \       0x62   0x604D             STR      R5,[R1, #+4]
    237          #endif
    238          }
   \       0x64   0xBD70             POP      {R4-R6,PC}       ;; return
    239          
    240          /***************************************************************************//**
    241           * @brief
    242           *   Clear the STATUS register.
    243           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          void RTCC_StatusClear(void)
    245          {
    246          #if defined (RTCC_CMD_CLRSTATUS)
    247            while ((RTCC->SYNCBUSY & RTCC_SYNCBUSY_CMD) != 0U) {
    248              // Wait for synchronization.
    249            }
    250            RTCC->CMD = RTCC_CMD_CLRSTATUS;
    251          #endif
    252          }
   \                     RTCC_StatusClear: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4800'0030        DC32     0x48000030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4003'80D0        DC32     0x400380d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4800'0004        DC32     0x48000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4800'1004        DC32     0x48001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4800'2004        DC32     0x48002004
    253          
    254          /** @} (end addtogroup RTCC) */
    255          /** @} (end addtogroup emlib) */
    256          
    257          #endif /* defined( RTCC_COUNT ) && ( RTCC_COUNT == 1 ) */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   RTCC_ChannelInit
       0   RTCC_Enable
       8   RTCC_Init
      16   RTCC_Reset
       0   RTCC_StatusClear


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      46  RTCC_ChannelInit
      88  RTCC_Enable
      88  RTCC_Init
     102  RTCC_Reset
       2  RTCC_StatusClear

 
 346 bytes in section .text
 
 346 bytes of CODE memory

Errors: none
Warnings: none
