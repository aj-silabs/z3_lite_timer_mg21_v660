###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config-gpio.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW91F7.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config-gpio.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"hal-config-gpio.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\hal-config-gpio.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\hal-config-gpio.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config-gpio.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief HAL config gpio initialization
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          //
     18          #include PLATFORM_HEADER
     19          #include "hal/hal.h"
     20          #include "em_device.h"
     21          
     22          #if (HAL_GPIO_MAX > 32)
     23          uint64_t halConfigGpioActive;
     24          #define GPIOBIT(x) ((uint64_t)1 << (x))
     25          #else

   \                                 In section .bss, align 4
     26          uint32_t halConfigGpioActive;
   \                     halConfigGpioActive:
   \        0x0                      DS8 4
     27          #define GPIOBIT(x) ((uint32_t)1 << (x))
     28          #endif
     29          #define GPIOCLEARBIT(reg, bit)    reg &= ~(GPIOBIT(bit))
     30          #define GPIOREADBIT(reg, bit)     (reg & (GPIOBIT(bit)))
     31          #define GPIOSETBIT(reg, bit)      reg |= GPIOBIT(bit)
     32          
     33          #if (HAL_GPIO_MAX == 0)

   \                                 In section .text, align 2, keep-with-next
     34          void halConfigInitGpio(void)
     35          {
     36          }
   \                     halConfigInitGpio: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     37          void halConfigPowerDownGpio(void)
     38          {
     39          }
   \                     halConfigPowerDownGpio: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     40          void halConfigPowerUpGpio(void)
     41          {
     42          }
   \                     halConfigPowerUpGpio: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     43          bool halConfigRegisterGpio(GPIO_Port_TypeDef port,
     44                                     uint8_t pin,
     45                                     GPIO_Mode_TypeDef pUpMode,
     46                                     uint8_t pUpOut,
     47                                     GPIO_Mode_TypeDef pDownMode,
     48                                     uint8_t pDownOut)
     49          {
     50            return false;
   \                     halConfigRegisterGpio: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
     51          }

   \                                 In section .text, align 2, keep-with-next
     52          bool halConfigUnregisterGpio(GPIO_Port_TypeDef port, uint8_t pin)
     53          {
     54            return false;
   \                     halConfigUnregisterGpio: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
     55          }
     56          #else
     57          
     58          typedef struct {
     59            GPIO_Port_TypeDef   port;
     60            uint8_t             pin;
     61            GPIO_Mode_TypeDef   pUpMode;
     62            uint8_t             pUpOut;
     63            GPIO_Mode_TypeDef   pDownMode;
     64            uint8_t             pDownOut;
     65          } tGpioArray;
     66          
     67          static tGpioArray halConfigGpio[HAL_GPIO_MAX];
     68          
     69          /******************************************************************************/
     70          /**
     71           * @brief
     72           *   Locate index of an active GPIO
     73           *
     74           * @param[in] port
     75           *   The GPIO port to access.
     76           *
     77           * @param[in] pin
     78           *   The pin number in the port.
     79           *
     80           * @param[in] index
     81           *   Pointer to contain index
     82           *   * On success (found GPIO) - Store index of matching gpio
     83           *   * On failure (free space) - Store a free (non-active) index
     84           *   * On failure (no space) - Store -1
     85           *
     86           * @return
     87           *  True on success, False on failure
     88           ******************************************************************************/
     89          static bool halConfigFindGpio(GPIO_Port_TypeDef port, uint8_t pin, int8_t *index)
     90          {
     91            *index = -1;
     92            int8_t i;
     93            for ( i = 0; i < HAL_GPIO_MAX; i++ ) {
     94              // Return immediately if GPIO is found
     95              if ((halConfigGpio[i].port == port)
     96                  && (halConfigGpio[i].pin == pin)
     97                  && (GPIOREADBIT(halConfigGpioActive, i))) {
     98                *index = i;
     99                return true;
    100              }
    101              // Store free index in case GPIO is not found
    102              if (!GPIOREADBIT(halConfigGpioActive, i)) {
    103                *index = i;
    104              }
    105            }
    106            return false;
    107          }
    108          /******************************************************************************/
    109          /**
    110           * @brief
    111           *   Initialize HAL_GPIO state
    112           ******************************************************************************/
    113          void halConfigInitGpio(void)
    114          {
    115            // Clear GPIO state
    116            halConfigGpioActive = 0;
    117            MEMSET(halConfigGpio, 0, sizeof(halConfigGpio));
    118            // Initialize preset GPIO registration
    119          #ifdef HAL_GPIO_INIT
    120            tGpioArray fixedGpioArray[] = HAL_GPIO_INIT;
    121            MEMCOPY(halConfigGpio, fixedGpioArray, sizeof(fixedGpioArray));
    122            int8_t i;
    123            for ( i = 0; i < (sizeof(fixedGpioArray) / sizeof(tGpioArray)); i++ ) {
    124              GPIOSETBIT(halConfigGpioActive, i);
    125            }
    126          #endif
    127          }
    128          
    129          /******************************************************************************/
    130          /**
    131           * @brief
    132           *   Power down GPIO. Sets all registered GPIO to disabled mode
    133           ******************************************************************************/
    134          void halConfigPowerDownGpio()
    135          {
    136            uint8_t i;
    137            for ( i = 0; i < HAL_GPIO_MAX; i++ ) {
    138              if (GPIOREADBIT(halConfigGpioActive, i)) {
    139                GPIO_PinModeSet(halConfigGpio[i].port,
    140                                halConfigGpio[i].pin,
    141                                halConfigGpio[i].pDownMode,
    142                                halConfigGpio[i].pDownOut);
    143              }
    144            }
    145          }
    146          
    147          /******************************************************************************/
    148          /**
    149           * @brief
    150           *   Power up GPIO. Sets all registered GPIO to assigned mode/output
    151           ******************************************************************************/
    152          void halConfigPowerUpGpio()
    153          {
    154            uint8_t i;
    155            for ( i = 0; i < HAL_GPIO_MAX; i++ ) {
    156              if (GPIOREADBIT(halConfigGpioActive, i)) {
    157                GPIO_PinModeSet(halConfigGpio[i].port,
    158                                halConfigGpio[i].pin,
    159                                halConfigGpio[i].pUpMode,
    160                                halConfigGpio[i].pUpOut);
    161              }
    162            }
    163          }
    164          
    165          /******************************************************************************/
    166          /**
    167           * @brief
    168           *   Register GPIO for powerup/powerdown configuration. If GPIO is already
    169           *   registered, current configuration will be overwritten
    170           *
    171           * @param[in] port
    172           *   The GPIO port to access.
    173           *
    174           * @param[in] pin
    175           *   The pin number in the port.
    176           *
    177           * @param[in] pUpMode
    178           *   The desired pin mode when powering up.
    179           *
    180           * @param[in] pUpOut
    181           *   Value to set for pin in DOUT register on power down. The DOUT setting is
    182           *   important for even some input mode configurations, determining
    183           *   pull-up/down direction.
    184           *
    185           * @param[in] pDownMode
    186           *   The desired pin mode when powering down
    187           *
    188           * @param[in] pDownOut
    189           *   Value to set for pin in DOUT register on power down. The DOUT setting is
    190           *   important for even some input mode configurations, determining
    191           *   pull-up/down direction.
    192           *
    193           * @return
    194           *  True on success, false on failure (ran out of space)
    195           ******************************************************************************/
    196          bool halConfigRegisterGpio(GPIO_Port_TypeDef port,
    197                                     uint8_t pin,
    198                                     GPIO_Mode_TypeDef pUpMode,
    199                                     uint8_t pUpOut,
    200                                     GPIO_Mode_TypeDef pDownMode,
    201                                     uint8_t pDownOut)
    202          {
    203            int8_t index;
    204            tGpioArray gpio = { port, pin, pUpMode, pUpOut, pDownMode, pDownOut };
    205            // Found active GPIO, overwrite current settings
    206            if (halConfigFindGpio(port, pin, &index)) {
    207              halConfigGpio[index] = gpio;
    208              return true;
    209            }
    210            // Register new GPIO
    211            else if (index >= 0) {
    212              GPIOSETBIT(halConfigGpioActive, index);
    213              halConfigGpio[index] = gpio;
    214              return true;
    215            }
    216            // No space remaining
    217            return false;
    218          }
    219          
    220          /******************************************************************************/
    221          /**
    222           * @brief
    223           *   Unregister GPIO. Will diable automatic powerup/powerdown configuration.
    224           *
    225           * @param[in] port
    226           *   The GPIO port to access.
    227           *
    228           * @param[in] pin
    229           *   The pin number in the port.
    230           *
    231           * @return
    232           *  True on success, false on failure (could not find GPIO)
    233           ******************************************************************************/
    234          bool halConfigUnregisterGpio(GPIO_Port_TypeDef port, uint8_t pin)
    235          {
    236            int8_t index;
    237            if (!halConfigFindGpio(port, pin, &index)) {
    238              return false;
    239            }
    240            GPIOCLEARBIT(halConfigGpioActive, index);
    241            return true;
    242          }
    243          #endif //(HAL_GPIO_MAX==0)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halConfigInitGpio
       0   halConfigPowerDownGpio
       0   halConfigPowerUpGpio
       0   halConfigRegisterGpio
       0   halConfigUnregisterGpio


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  halConfigGpioActive
       2  halConfigInitGpio
       2  halConfigPowerDownGpio
       2  halConfigPowerUpGpio
       4  halConfigRegisterGpio
       4  halConfigUnregisterGpio

 
  4 bytes in section .bss
 14 bytes in section .text
 
 14 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
