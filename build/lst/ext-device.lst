###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:00
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\ext-device.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW733A.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\ext-device.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"ext-device.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\ext-device.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\ext-device.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\ext-device.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief External Device GPIO driver
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          #include PLATFORM_HEADER
     18          #include "stack/include/ember-types.h"
     19          #include "stack/include/error.h"
     20          #include "hal/hal.h"
     21          
     22          #include "em_device.h"
     23          #include "em_gpio.h"
     24          #include "gpiointerrupt.h"
     25          #include "em_cmu.h"
     26          #include "em_prs.h"
     27          
     28          #include "hal/micro/cortexm3/ext-device.h"         // Implement this API
     29          
     30          #ifdef  HAL_EXTDEV_ENABLE       // Driver is enabled
     31          
     32          //== LOCAL STATE ==
     33          
     34          static HalExtDeviceIrqCB halExtDeviceIntCB = NULL;
     35          static HalExtDeviceIrqCB halExtDeviceRdyCB = NULL;
     36          static uint8_t halExtDeviceIntLevel = EXT_DEVICE_INT_UNCONFIGURED;
     37          
     38          //== FUNCTION PROTOTYPE ==
     39          void halIrqxIsr(uint8_t pin);
     40          
     41          //== HELPER FUNCTIONS ==
     42          
     43          /** @brief Safe method to ensure GPIO interrupts are on at top-level
     44           *  since GPIOINT_Init() is *not* safe and could cause event lossage.
     45           */
     46          static void GPIOINT_InitSafe(void)
     47          {
     48            // Enable GPIO clock for configuring interrupts
     49            CMU_ClockEnable(cmuClock_GPIO, true);
     50          
     51            // Turn on GPIO interrupts only if they weren't enabled elsewhere
     52            if (CORE_NvicIRQDisabled(GPIO_ODD_IRQn)
     53                || CORE_NvicIRQDisabled(GPIO_EVEN_IRQn)) {
     54              GPIOINT_Init();
     55            }
     56          }
     57          
     58          /** @brief Configure and enable/disable the device ready IRQ
     59           */
     60          static void halExtDeviceRdyCfgIrq(void)
     61          {
     62          }
     63          
     64          /** @brief Configure and enable/disable the device interrupt IRQ
     65           */
     66          static void halExtDeviceIntCfgIrq(void)
     67          {
     68            /* Configure nIRQ signal to trigger Port Pin ISR */
     69            GPIO_PinModeSet((GPIO_Port_TypeDef) BSP_EXTDEV_INT_PORT,
     70                            BSP_EXTDEV_INT_PIN,
     71                            gpioModeInput,
     72                            1u);
     73            GPIO_InputSenseSet(GPIO_INSENSE_INT, GPIO_INSENSE_INT);
     74            GPIOINT_CallbackRegister(BSP_EXTDEV_INT_PIN, halIrqxIsr);
     75            GPIO_IntConfig((GPIO_Port_TypeDef) BSP_EXTDEV_INT_PORT,
     76                           BSP_EXTDEV_INT_PIN,
     77                           false,
     78                           true,
     79                           true);
     80          
     81            if (halExtDeviceIntCB == NULL) {
     82              halExtDeviceIntLevel = EXT_DEVICE_INT_UNCONFIGURED;
     83            } else {
     84              halExtDeviceIntLevel = EXT_DEVICE_INT_LEVEL_OFF;
     85              // Callers need to use halExtDeviceIntEnable() to enable top level
     86            }
     87          }
     88          
     89          //== INTERNAL ISRS ==
     90          
     91          void halIrqxIsr(uint8_t pin)
     92          {
     93            UNUSED_VAR(pin);
     94          
     95            /* Clear IT flag */
     96            GPIO_IntClear(1 << BSP_EXTDEV_INT_PIN);
     97          
     98            /* Call IT handler function if defined */
     99            if (halExtDeviceIntCB != NULL) {
    100              (*halExtDeviceIntCB)();
    101            }
    102          
    103            if (halExtDeviceIntPending()) {
    104              // Repend this INT
    105              GPIO_IntSet(1 << BSP_EXTDEV_INT_PIN);
    106            }
    107          }
    108          
    109          //== API FUNCTIONS ==
    110          
    111          //-- External Device Initialization --
    112          
    113          /** @brief Initialize External Device GPIOs
    114           * @param  deviceIntCB The callback routine for device general interrupt
    115           *                     (NULL to disable)
    116           * @param  deviceRdyCB The callback routine for device ready interrupt
    117           *                     (NULL to disable)
    118           * @return bitmask of configured features for this device
    119           * @note First initialization after bootup leaves the device powered down
    120           *       and unselected.  Subsequent inits don't touch the device powered
    121           *       or selected states and can be used to reconfigure callback(s),
    122           *       which always clears any stale/pending events.  For deviceRdyCB,
    123           *       its interrupt is enabled upon configuration; for deviceIntCB,
    124           *       halExtDeviceIntEnable() must subsequently be called to enable it.
    125           */
    126          HalExtDeviceConfig halExtDeviceInit(HalExtDeviceIrqCB deviceIntCB,
    127                                              HalExtDeviceIrqCB deviceRdyCB)
    128          {
    129            UNUSED_VAR(halExtDeviceRdyCB); // Work around potential compiler warnings
    130            UNUSED_VAR(halExtDeviceIntCB); // Work around potential compiler warnings
    131            halExtDeviceRdyCB = deviceRdyCB;
    132            halExtDeviceIntCB = deviceIntCB;
    133          
    134            CMU_ClockEnable(cmuClock_PRS, true);
    135            GPIOINT_InitSafe();
    136          
    137            /* Pin is configured to Push-pull: SDN */
    138            GPIO_PinModeSet((GPIO_Port_TypeDef) BSP_EXTDEV_SDN_PORT,
    139                            BSP_EXTDEV_SDN_PIN,
    140                            gpioModePushPull,
    141                            1u);
    142          
    143            /* Pin is configured to Push-pull: nSEL */
    144            GPIO_PinModeSet((GPIO_Port_TypeDef) BSP_EXTDEV_CS_PORT,
    145                            BSP_EXTDEV_CS_PIN,
    146                            gpioModePushPull,
    147                            1u);
    148          
    149            /* Pin PE13 is configured input: nIRQ */
    150            //GPIO_PinModeSet(BSP_EXTDEV_INT_PORT, BSP_EXTDEV_INT_PIN, gpioModeInput, 0u);
    151          
    152            halExtDeviceRdyCfgIrq();
    153            halExtDeviceIntCfgIrq();
    154          
    155            return 0;
    156          }
    157          
    158          //-- External Device Power --
    159          
    160          /** @brief Power down the external device per GPIO
    161           */
    162          void halExtDevicePowerDown(void)
    163          {
    164            /* SDN high */
    165            GPIO_PinOutSet((GPIO_Port_TypeDef) BSP_EXTDEV_SDN_PORT, BSP_EXTDEV_SDN_PIN);
    166          }
    167          
    168          /** @brief Power up the external device per GPIO
    169           */
    170          void halExtDevicePowerUp(void)
    171          {
    172            /* SDN low */
    173            GPIO_PinOutClear((GPIO_Port_TypeDef) BSP_EXTDEV_SDN_PORT, BSP_EXTDEV_SDN_PIN);
    174          }
    175          
    176          //-- External Device Ready --
    177          
    178          /** @brief Indicate if the device is ready per GPIO
    179           * @return true if device is ready, false otherwise
    180           */
    181          bool halExtDeviceIsReady(void)
    182          {
    183            return 0;
    184          }
    185          
    186          /** @brief Wait for the device to become ready per GPIO
    187           */
    188          void halExtDeviceWaitReady(void)
    189          {
    190            halResetWatchdog();
    191            while (!halExtDeviceIsReady()) {
    192              // spin
    193            }
    194            halResetWatchdog();
    195          }
    196          
    197          //-- External Device Selection --
    198          
    199          /** @brief Select the external device
    200           */
    201          void halExtDeviceSelect(void)
    202          {
    203            /* nSEL low */
    204            GPIO_PinOutClear((GPIO_Port_TypeDef) BSP_EXTDEV_CS_PORT, BSP_EXTDEV_CS_PIN);
    205          }
    206          
    207          /** @brief Unselect the external device
    208           */
    209          void halExtDeviceDeselect(void)
    210          {
    211            /* nSEL high */
    212            GPIO_PinOutSet((GPIO_Port_TypeDef) BSP_EXTDEV_CS_PORT, BSP_EXTDEV_CS_PIN);
    213          }
    214          
    215          /** @brief Indicate if the device is selected
    216           */
    217          bool halExtDeviceIsSelected(void)
    218          {
    219            return 0;
    220          }
    221          
    222          //-- External Device Interrupts --
    223          
    224          /** @brief Indicate if device interrupt GPIO is pending
    225           * @return true if device interrupt is pending, false otherwise
    226           */
    227          bool halExtDeviceIntPending(void)
    228          {
    229            return (GPIO_PinInGet((GPIO_Port_TypeDef) BSP_EXTDEV_INT_PORT,
    230                                  BSP_EXTDEV_INT_PIN) == false);
    231          }
    232          
    233          /** @brief Disable device interrupt and increment interrupt nesting level.
    234           * @return interrupt level prior to disabling (0=interrupts were enabled)
    235           */
    236          HalExtDeviceIntLevel halExtDeviceIntDisable(void)
    237          {
    238            uint8_t origLevel;
    239          
    240            // Disable interrupt with the given pin.
    241            GPIO_IntDisable(1 << BSP_EXTDEV_INT_PIN);
    242          
    243            // We don't bother with 2nd-level here
    244            {
    245              DECLARE_INTERRUPT_STATE;
    246              DISABLE_INTERRUPTS(); // disabling interrupts because these routines might be called from other ISRs
    247              origLevel = halExtDeviceIntLevel;
    248              if (origLevel != EXT_DEVICE_INT_UNCONFIGURED) {
    249                halExtDeviceIntLevel += 1;
    250              }
    251              RESTORE_INTERRUPTS();
    252            }
    253          
    254            return origLevel;
    255          }
    256          
    257          /** @brief Decrement interrupt nesting level and, if 0, enable device
    258           * interrupt.
    259           * @param  clearPending if true clears any "stale" pending interrupt just
    260           *         prior to enabling device interrupt.
    261           * @return interrupt level prior to enabling (0=interrupts were enabled)
    262           */
    263          HalExtDeviceIntLevel halExtDeviceIntEnable(bool clearPending)
    264          {
    265            uint8_t origLevel;
    266            bool justEnabled = false;
    267          
    268            {
    269              DECLARE_INTERRUPT_STATE;
    270              DISABLE_INTERRUPTS(); // disabling interrupts because these routines might be called from other ISRs
    271              origLevel = halExtDeviceIntLevel;
    272              if (origLevel != EXT_DEVICE_INT_UNCONFIGURED) {
    273                if (origLevel > EXT_DEVICE_INT_LEVEL_ON) {   // Peg at LEVEL_ON
    274                  halExtDeviceIntLevel -= 1;
    275                  justEnabled = (halExtDeviceIntLevel == EXT_DEVICE_INT_LEVEL_ON);
    276                }
    277              }
    278              RESTORE_INTERRUPTS();
    279            }
    280          
    281            if (clearPending) {
    282              // Clear out any stale state
    283              GPIO_IntClear(1 << BSP_EXTDEV_INT_PIN);
    284            }
    285          
    286            if (justEnabled) {
    287              if (halExtDeviceIntPending()) { // in case we missed edge of level int
    288                // Pend this INT
    289                GPIO_IntSet(1 << BSP_EXTDEV_INT_PIN);
    290              }
    291              GPIO_IntEnable(1 << BSP_EXTDEV_INT_PIN);
    292            }
    293            return origLevel;
    294          }
    295          
    296          #endif//HAL_EXTDEV_ENABLE       // Driver is enabled


 
 
 0 bytes of memory

Errors: none
Warnings: none
