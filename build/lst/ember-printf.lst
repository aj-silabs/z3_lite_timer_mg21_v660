###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:57
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\serial\ember-printf.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW67F8.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\serial\ember-printf.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"ember-printf.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\serial\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\ember-printf.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\ember-printf.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\serial\ember-printf.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Minimalistic implementation of printf().
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          #include PLATFORM_HEADER
     18          #include "stack/include/ember-types.h"
     19          #include "stack/include/error.h"
     20          
     21          //Host processors do not use Ember Message Buffers.
     22          #ifndef EZSP_HOST
     23            #include "stack/include/packet-buffer.h"
     24          #endif
     25          
     26          #include "hal/hal.h"
     27          #include "serial.h"
     28          
     29          #if CORTEXM3_EFM32_MICRO
     30          #include "em_device.h"
     31          #include "com.h"
     32          #endif
     33          #include "ember-printf.h"
     34          
     35          #include <stdarg.h>
     36          
     37          #ifdef EMBER_SERIAL_USE_STDIO
     38          #include <stdio.h>
     39          #endif //EMBER_SERIAL_USE_STDIO
     40          
     41          #ifdef EMBER_SERIAL_CUSTOM_STDIO
     42          #include EMBER_SERIAL_CUSTOM_STDIO
     43          #define EMBER_SERIAL_USE_STDIO
     44          #endif // EMBER_SERIAL_CUSTOM_STDIO
     45          
     46          //=============================================================================
     47          // Globals
     48          
     49          // --------------------------------
     50          // A simple printf() implementation
     51          // Supported format specifiers are:
     52          //  %% - percent sign
     53          //  %c - single byte character
     54          //  %s - ram string
     55          //  %p - flash string  (non-standard)
     56          //  %u - 2-byte unsigned decimal
     57          //  %d - 2-byte signed decimal
     58          //  %x %2x %4x - 1, 2, 4 BYTE hex value (always 0 padded) (non-standard)
     59          //    Non-standard behavior: Normally a number after a % is interpreted to be
     60          //    a minimum character width, and the value is not zero padded unless
     61          //    there is a zero before the minimum width value.
     62          //    i.e. '%2x' for the uint16_t value 0xb prints " b", while '%02x' would print
     63          //    "0b".
     64          //    Ember assumes the number after the % and before the 'x' to be the number
     65          //    of BYTES, and all hex values are left-justified zero padded.
     66          //
     67          // A few macros and a function help make this readable:
     68          //   - flush the local buffer to the output
     69          //   - ensure that there is some room in the local buffer
     70          //   - add a single byte to the local buffer
     71          //   - convert a nibble to its ascii hex character
     72          //   - convert an uint16_t to a decimal string
     73          // Most of these only work within the emPrintfInternal() function.
     74          
     75          // Current champion is %4x which writes 8 bytes.  (%s and %p can write
     76          // more, but they do their own overflow checks).
     77          #if CORTEXM3_EFM32_MICRO
     78          #define LOCAL_BUFFER_SIZE 64
     79          #else
     80          #define LOCAL_BUFFER_SIZE 16
     81          #endif
     82          #define MAX_SINGLE_COMMAND_BYTES 8
     83          

   \                                 In section .rodata, align 4
     84          static PGM uint32_t powers10[9] = {
   \                     powers10:
   \        0x0   0x3B9A'CA00        DC32 1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100
   \              0x05F5'E100  
   \              0x0098'9680  
   \              0x000F'4240  
   \              0x0001'86A0  
   \              0x0000'2710  
   \              0x0000'03E8  
   \              0x0000'0064  
   \       0x20   0x0000'000A        DC32 10
     85            1000000000,
     86            100000000,
     87            10000000,
     88            1000000,
     89            100000,
     90            10000,
     91            1000,
     92            100,
     93            10
     94          };
     95          
     96          #define flushBuffer()                                                 \
     97            do { count = localBufferPointer - localBuffer;                      \
     98                 if (flushHandler(port, localBuffer, count) != EMBER_SUCCESS) { \
     99                   goto fail; }                                                 \
    100                 total += count;                                                \
    101                 localBufferPointer = localBuffer;                              \
    102                 (void)localBufferPointer;                                      \
    103            } while (false)
    104          
    105          #define addByte(byte) \
    106            do { *(localBufferPointer ++) = (byte); } while (false)
    107          
    108          //=============================================================================
    109          

   \                                 In section .text, align 2, keep-with-next
    110          uint8_t *emWriteHexInternal(uint8_t *charBuffer, uint16_t value, uint8_t charCount)
    111          {
   \                     emWriteHexInternal: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    112            uint8_t c = charCount;
   \        0x2   0x4613             MOV      R3,R2
    113            charBuffer += charCount;
   \        0x4   0x4410             ADD      R0,R0,R2
    114            for (; c != 0U; c--) {
   \                     ??emWriteHexInternal_0: (+1)
   \        0x6   0xB2DC             UXTB     R4,R3
   \        0x8   0xB164             CBZ.N    R4,??emWriteHexInternal_1
    115              uint8_t n = value & 0x0F;
   \        0xA   0xF001 0x060F      AND      R6,R1,#0xF
    116              value = value >> 4;
   \        0xE   0x0909             LSRS     R1,R1,#+4
    117              *(--charBuffer) = n + (n < 10
    118                                     ? '0'
    119                                     : 'A' - 10);
   \       0x10   0x1E45             SUBS     R5,R0,#+1
   \       0x12   0x2E0A             CMP      R6,#+10
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0xBFAC             ITE      GE 
   \       0x18   0x2437             MOVGE    R4,#+55
   \       0x1A   0x2430             MOVLT    R4,#+48
   \       0x1C   0x19A4             ADDS     R4,R4,R6
   \       0x1E   0x702C             STRB     R4,[R5, #+0]
    120            }
   \       0x20   0x1E5B             SUBS     R3,R3,#+1
   \       0x22   0xE7F0             B.N      ??emWriteHexInternal_0
    121            return charBuffer + charCount;
   \                     ??emWriteHexInternal_1: (+1)
   \       0x24   0x4410             ADD      R0,R0,R2
   \       0x26   0xBD70             POP      {R4-R6,PC}       ;; return
    122          }
    123          
    124          // This function will write a decimal ASCII string to buffer
    125          // containing the passed 'value'.  Includes negative sign, if applicable.
    126          // Returns the number of bytes written.
    127          

   \                                 In section .text, align 2, keep-with-next
    128          uint8_t emDecimalStringWrite(uint32_t value,
    129                                       bool signedValue,
    130                                       uint8_t* buffer)
    131          {
   \                     emDecimalStringWrite: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
    132            uint8_t length = 0;
   \        0x2   0x2300             MOVS     R3,#+0
    133            if (signedValue && (value & 0x80000000UL)) {
   \        0x4   0xB141             CBZ.N    R1,??emDecimalStringWrite_0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD506             BPL.N    ??emDecimalStringWrite_0
    134              buffer[length++] = '-';
   \        0xA   0x232D             MOVS     R3,#+45
   \        0xC   0x7013             STRB     R3,[R2, #+0]
   \        0xE   0x2301             MOVS     R3,#+1
    135              // Take the absolute value.  We have already determined
    136              // whether the value is signed.  So we don't care
    137              // about the high bits anymore.
    138              // The range of 16-bit signed value is -32,768 <-> 32,767,
    139              // and for 32-bit it is -2147483648 <-> 2147483647,
    140              // so we must make an exception for -32,768 and -2147483648
    141              // which don't have a signed equivalent.
    142              if (value != 0x80000000UL) {
   \       0x10   0xF1B0 0x4F00      CMP      R0,#-2147483648
   \       0x14   0xBF18             IT       NE 
   \       0x16   0x4240             RSBNE    R0,R0,#+0
    143                value = (uint32_t) (-((int32_t) value));
    144              }
    145            }
    146          
    147            {
    148              uint8_t i;
    149              bool printedLeadingNonZeroValue = false;
   \                     ??emDecimalStringWrite_0: (+1)
   \       0x18   0x2100             MOVS     R1,#+0
    150              // To prevent using 32-bit divide or modulus,
    151              // since those operations are expensive on a 16-bit processor,
    152              // we use subtraction and a constant array with powers of 10.
    153              for (i = 0; i < 9; i++) {
   \       0x1A   0x2400             MOVS     R4,#+0
   \       0x1C   0x....             LDR.N    R5,??DataTable5_1
    154                uint8_t digit = 0;
   \                     ??emDecimalStringWrite_1: (+1)
   \       0x1E   0x2600             MOVS     R6,#+0
   \       0x20   0xE001             B.N      ??emDecimalStringWrite_2
    155                while (value >= powers10[i]) {
    156                  value -= powers10[i];
   \                     ??emDecimalStringWrite_3: (+1)
   \       0x22   0x1BC0             SUBS     R0,R0,R7
    157                  digit++;
   \       0x24   0x1C76             ADDS     R6,R6,#+1
    158                }
   \                     ??emDecimalStringWrite_2: (+1)
   \       0x26   0xF855 0x7024      LDR      R7,[R5, R4, LSL #+2]
   \       0x2A   0x42B8             CMP      R0,R7
   \       0x2C   0xD2F9             BCS.N    ??emDecimalStringWrite_3
    159                if (digit != 0 || printedLeadingNonZeroValue) {
   \       0x2E   0xB2F7             UXTB     R7,R6
   \       0x30   0xB90F             CBNZ.N   R7,??emDecimalStringWrite_4
   \       0x32   0x000F             MOVS     R7,R1
   \       0x34   0xD004             BEQ.N    ??emDecimalStringWrite_5
    160                  buffer[length++] = '0' + digit;
   \                     ??emDecimalStringWrite_4: (+1)
   \       0x36   0x3630             ADDS     R6,R6,#+48
   \       0x38   0xB2D9             UXTB     R1,R3
   \       0x3A   0x5456             STRB     R6,[R2, R1]
   \       0x3C   0x1C5B             ADDS     R3,R3,#+1
    161                  printedLeadingNonZeroValue = true;
   \       0x3E   0x2101             MOVS     R1,#+1
    162                }
    163              }
   \                     ??emDecimalStringWrite_5: (+1)
   \       0x40   0x1C64             ADDS     R4,R4,#+1
   \       0x42   0x2C09             CMP      R4,#+9
   \       0x44   0xDBEB             BLT.N    ??emDecimalStringWrite_1
    164              buffer[length++] = '0' + value;
   \       0x46   0x3030             ADDS     R0,R0,#+48
   \       0x48   0xB2D9             UXTB     R1,R3
   \       0x4A   0x5450             STRB     R0,[R2, R1]
    165            }
    166          
    167            return length;
   \       0x4C   0x1C5B             ADDS     R3,R3,#+1
   \       0x4E   0xB2D8             UXTB     R0,R3
   \       0x50   0xBDF0             POP      {R4-R7,PC}       ;; return
    168          }
    169          
    170          // Returns number of characters written

   \                                 In section .text, align 2, keep-with-next
    171          uint8_t emPrintfInternal(emPrintfFlushHandler flushHandler,
    172                                   COM_Port_t port,
    173                                   PGM_P string,
    174                                   va_list args)
    175          {
   \                     emPrintfInternal: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0xB096             SUB      SP,SP,#+88
    176            uint8_t localBuffer[LOCAL_BUFFER_SIZE + MAX_SINGLE_COMMAND_BYTES];
    177            uint8_t *localBufferPointer = localBuffer;
    178            uint8_t *localBufferLimit = localBuffer + LOCAL_BUFFER_SIZE;
    179            uint8_t count;
    180            uint8_t total = 0;
    181            bool stillInsideFormatSpecifier = false;
   \        0x8   0xA814             ADD      R0,SP,#+80
   \        0xA   0x4689             MOV      R9,R1
   \        0xC   0x4615             MOV      R5,R2
   \        0xE   0x469B             MOV      R11,R3
   \       0x10   0xAF04             ADD      R7,SP,#+16
   \       0x12   0xF04F 0x0A00      MOV      R10,#+0
   \       0x16   0x2400             MOVS     R4,#+0
   \       0x18   0x9001             STR      R0,[SP, #+4]
   \       0x1A   0xE013             B.N      ??emPrintfInternal_0
    182          
    183            while (*string != '\0') {
    184              uint8_t next = *string;
    185              if (next != '%' && !(stillInsideFormatSpecifier)) {
    186                addByte(next);
    187              } else {
    188                if (stillInsideFormatSpecifier) {
    189                  stillInsideFormatSpecifier = false;
    190                } else {
    191                  string += 1;
    192                }
    193                switch (*string) {
    194                  case '%':
    195                    // escape for printing "%"
    196                    addByte('%');
    197                    break;
    198                  case 'b': {
    199                    const uint8_t *bytes = va_arg(args, const uint8_t *);
    200                    uint32_t length = va_arg(args, unsigned int);
    201                    uint32_t i;
    202          
    203                    for (i = 0; i < length; i++) {
    204                      localBufferPointer =
    205                        emWriteHexInternal(localBufferPointer, bytes[i], 2);
    206          
    207                      if (localBufferLimit <= localBufferPointer) {
    208                        flushBuffer();
    209                      }
    210          
    211                      if (i < length - 1) {
    212                        addByte(' ');
    213                      }
    214          
    215                      if (localBufferLimit <= localBufferPointer) {
    216                        flushBuffer();
    217                      }
    218                    }
    219                    break;
    220                  }
    221                  case 'c':
    222                    // character
    223                    addByte(va_arg(args, unsigned int) & 0xFF);
    224                    break;
    225                  case 'p':
    226                    // only avr needs to special-case the pgm handling, all other current
    227                    //  platforms fall through to standard string handling.
    228                  #ifdef AVR_ATMEGA
    229                    {
    230                      // flash string
    231                      PGM_P arg = va_arg(args, PGM_P);
    232                      while (true) {
    233                        uint8_t ch = *arg++;
    234                        if (ch == '\0') {
    235                          break;
    236                        }
    237                        *(localBufferPointer++) = ch;
    238                        if (localBufferLimit <= localBufferPointer) {
    239                          flushBuffer();
    240                        }
    241                      }
    242                      break;
    243                    }
    244                  #endif
    245                  case 's': {
    246                    // string
    247                    uint8_t len;
    248                    uint8_t *arg = va_arg(args, uint8_t *);
    249                    flushBuffer();
    250                    for (len = 0; arg[len] != '\0'; len++) {
    251                    }
    252                    ;
    253                    if (flushHandler(port, arg, len) != EMBER_SUCCESS) {
    254                      goto fail;
    255                    }
    256                    total += len;
    257                    break;
    258                  }
    259          
    260                  case 'l':       // 4-byte, %l and %ld = signed, %lu = unsigned
    261                  case 'u':       // unsigned 2-byte
    262                  case 'd': {     // signed 2-byte
    263                    uint32_t value;
    264                    bool signedValue;
    265                    if (*string == 'l') {
    266                      value = va_arg(args, long int);
    267                      signedValue = (string[1] != 'u');
    268                      if (string[1] == 'u' || string[1] == 'd') {
    269                        string += 1;
    270                      }
    271                    } else if (*string == 'u') { // Need when sizeof(int) != sizeof(uint16_t)
    272                      value = va_arg(args, unsigned int);
    273                      signedValue = false;
    274                    } else {
    275                      value = va_arg(args, int);
    276                      signedValue = true;
    277                    }
    278                    localBufferPointer += emDecimalStringWrite(value,
    279                                                               signedValue,
    280                                                               localBufferPointer);
    281                    break;
    282                  }
    283                  case 'x':
    284                  case 'X': {
    285                    // single hex byte (always prints 2 chars, ex: 0A)
    286                    uint8_t data = va_arg(args, int);
    287          
    288                    localBufferPointer = emWriteHexInternal(localBufferPointer, data, 2);
    289                    break;
    290                  }
    291          
    292                  case '0':
    293                  case '1':
    294                  case '3':
    295                  case '5':
    296                  case '6':
    297                  case '7':
    298                  case '8':
    299                  case '9':
    300                  // We don't support width specifiers, but we want to accept
    301                  // them so they can be ignored and thus we are compatible with
    302                  // code that tries to use them.
    303          
    304                  case '2':
    305                  // %2x only, 2 hex bytes (always prints 4 chars)
    306                  case '4':
    307                    // %4x only, 4 hex bytes (always prints 8 chars)
    308          
    309                    stillInsideFormatSpecifier = true;
    310                    if (*(string + 1) == 'x' || *(string + 1) == 'X') {
    311                      string++;
    312                      stillInsideFormatSpecifier = false;
    313                      if (*(string - 1) == '2') {
    314                        uint16_t data = va_arg(args, int);
    315                        localBufferPointer = emWriteHexInternal(localBufferPointer, data, 4);
    316                      } else if (*(string - 1) == '4') {
    317                        uint32_t data = va_arg(args, uint32_t);
    318                        // On the AVR at least, the code size is smaller if we limit the
    319                        // emWriteHexInternal() code to 16-bit numbers and call it twice in
    320                        // this case.  Other processors may have a different tradeoff.
    321                        localBufferPointer = emWriteHexInternal(localBufferPointer,
    322                                                                (uint16_t) (data >> 16),
    323                                                                4);
    324                        localBufferPointer = emWriteHexInternal(localBufferPointer,
    325                                                                (uint16_t) data,
    326                                                                4);
    327                      } else {
    328                        stillInsideFormatSpecifier = true;
   \                     ??emPrintfInternal_1: (+1)
   \       0x1C   0x2401             MOVS     R4,#+1
    329                        string--;
   \       0x1E   0x4605             MOV      R5,R0
   \       0x20   0xE000             B.N      ??emPrintfInternal_2
    330                      }
   \                     ??emPrintfInternal_3: (+1)
   \       0x22   0x4607             MOV      R7,R0
    331                    }
    332          
    333                    break;
    334                  case '\0':
    335                    goto done;
    336                  default: {
    337                  }
    338                } //close switch.
    339              } // close else
    340              if (localBufferLimit <= localBufferPointer) {
   \                     ??emPrintfInternal_2: (+1)
   \       0x24   0x9801             LDR      R0,[SP, #+4]
   \       0x26   0x4287             CMP      R7,R0
   \       0x28   0xD30B             BCC.N    ??emPrintfInternal_4
    341                flushBuffer();
   \       0x2A   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \       0x2E   0xA904             ADD      R1,SP,#+16
   \       0x30   0x4648             MOV      R0,R9
   \       0x32   0x1ABF             SUBS     R7,R7,R2
   \       0x34   0xB2FA             UXTB     R2,R7
   \       0x36   0x47C0             BLX      R8
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD150             BNE.N    ??emPrintfInternal_5
   \       0x3C   0xB2FF             UXTB     R7,R7
   \       0x3E   0x44BA             ADD      R10,R7,R10
   \       0x40   0xAF04             ADD      R7,SP,#+16
    342              }
    343              string++;
   \                     ??emPrintfInternal_4: (+1)
   \       0x42   0x1C6D             ADDS     R5,R5,#+1
   \                     ??emPrintfInternal_0: (+1)
   \       0x44   0xA804             ADD      R0,SP,#+16
   \       0x46   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \       0x4A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x4E   0x7829             LDRB     R1,[R5, #+0]
   \       0x50   0x1A38             SUBS     R0,R7,R0
   \       0x52   0x2900             CMP      R1,#+0
   \       0x54   0xD00B             BEQ.N    ??emPrintfInternal_6
   \       0x56   0x2925             CMP      R1,#+37
   \       0x58   0xD003             BEQ.N    ??emPrintfInternal_7
   \       0x5A   0xB914             CBNZ.N   R4,??emPrintfInternal_7
   \       0x5C   0xF807 0x1B01      STRB     R1,[R7], #+1
   \       0x60   0xE7E0             B.N      ??emPrintfInternal_2
   \                     ??emPrintfInternal_7: (+1)
   \       0x62   0x2C00             CMP      R4,#+0
   \       0x64   0xBF14             ITE      NE 
   \       0x66   0x2400             MOVNE    R4,#+0
   \       0x68   0x1C6D             ADDEQ    R5,R5,#+1
   \       0x6A   0x7829             LDRB     R1,[R5, #+0]
   \       0x6C   0x000A             MOVS     R2,R1
   \                     ??emPrintfInternal_6: (+1)
   \       0x6E   0xF000 0x80AA      BEQ.W    ??emPrintfInternal_8
   \       0x72   0xF1B1 0x0225      SUBS     R2,R1,#+37
   \       0x76   0xD016             BEQ.N    ??emPrintfInternal_9
   \       0x78   0x3A0B             SUBS     R2,R2,#+11
   \       0x7A   0x2A09             CMP      R2,#+9
   \       0x7C   0xF240 0x8085      BLS.W    ??emPrintfInternal_10
   \       0x80   0x3A28             SUBS     R2,R2,#+40
   \       0x82   0xD07A             BEQ.N    ??emPrintfInternal_11
   \       0x84   0x3A0A             SUBS     R2,R2,#+10
   \       0x86   0xD012             BEQ.N    ??emPrintfInternal_12
   \       0x88   0x1E52             SUBS     R2,R2,#+1
   \       0x8A   0xD03F             BEQ.N    ??emPrintfInternal_13
   \       0x8C   0x1E52             SUBS     R2,R2,#+1
   \       0x8E   0xD05C             BEQ.N    ??emPrintfInternal_14
   \       0x90   0x3A08             SUBS     R2,R2,#+8
   \       0x92   0xD05A             BEQ.N    ??emPrintfInternal_14
   \       0x94   0x1F12             SUBS     R2,R2,#+4
   \       0x96   0xD03C             BEQ.N    ??emPrintfInternal_15
   \       0x98   0x1ED2             SUBS     R2,R2,#+3
   \       0x9A   0xD03A             BEQ.N    ??emPrintfInternal_15
   \       0x9C   0x1E92             SUBS     R2,R2,#+2
   \       0x9E   0xD054             BEQ.N    ??emPrintfInternal_14
   \       0xA0   0x1ED2             SUBS     R2,R2,#+3
   \       0xA2   0xD06A             BEQ.N    ??emPrintfInternal_11
   \       0xA4   0xE7BE             B.N      ??emPrintfInternal_2
   \                     ??emPrintfInternal_9: (+1)
   \       0xA6   0x2025             MOVS     R0,#+37
   \                     ??emPrintfInternal_16: (+1)
   \       0xA8   0xF807 0x0B01      STRB     R0,[R7], #+1
   \       0xAC   0xE7BA             B.N      ??emPrintfInternal_2
   \                     ??emPrintfInternal_12: (+1)
   \       0xAE   0xF8DB 0x1000      LDR      R1,[R11, #+0]
   \       0xB2   0xF8DB 0x2004      LDR      R2,[R11, #+4]
   \       0xB6   0x4638             MOV      R0,R7
   \       0xB8   0xF10B 0x0B08      ADD      R11,R11,#+8
   \       0xBC   0x9103             STR      R1,[SP, #+12]
   \       0xBE   0x9202             STR      R2,[SP, #+8]
   \       0xC0   0x2700             MOVS     R7,#+0
   \                     ??emPrintfInternal_17: (+1)
   \       0xC2   0x9A02             LDR      R2,[SP, #+8]
   \       0xC4   0x4297             CMP      R7,R2
   \       0xC6   0xD2AC             BCS.N    ??emPrintfInternal_3
   \       0xC8   0x9903             LDR      R1,[SP, #+12]
   \       0xCA   0x2202             MOVS     R2,#+2
   \       0xCC   0x5DC9             LDRB     R1,[R1, R7]
   \       0xCE   0x....'....        BL       emWriteHexInternal
   \       0xD2   0x9901             LDR      R1,[SP, #+4]
   \       0xD4   0x4288             CMP      R0,R1
   \       0xD6   0xD306             BCC.N    ??emPrintfInternal_18
   \       0xD8   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xDC   0x2800             CMP      R0,#+0
   \                     ??emPrintfInternal_5: (+1)
   \       0xDE   0xD17C             BNE.N    ??emPrintfInternal_19
   \       0xE0   0xB2F6             UXTB     R6,R6
   \       0xE2   0x44B2             ADD      R10,R6,R10
   \       0xE4   0xA804             ADD      R0,SP,#+16
   \                     ??emPrintfInternal_18: (+1)
   \       0xE6   0x9902             LDR      R1,[SP, #+8]
   \       0xE8   0x1E49             SUBS     R1,R1,#+1
   \       0xEA   0x428F             CMP      R7,R1
   \       0xEC   0xBF3C             ITT      CC 
   \       0xEE   0x2220             MOVCC    R2,#+32
   \       0xF0   0xF800 0x2B01      STRBCC   R2,[R0], #+1
   \       0xF4   0x9901             LDR      R1,[SP, #+4]
   \       0xF6   0x4288             CMP      R0,R1
   \       0xF8   0xD306             BCC.N    ??emPrintfInternal_20
   \       0xFA   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD16B             BNE.N    ??emPrintfInternal_19
   \      0x102   0xB2F6             UXTB     R6,R6
   \      0x104   0x44B2             ADD      R10,R6,R10
   \      0x106   0xA804             ADD      R0,SP,#+16
   \                     ??emPrintfInternal_20: (+1)
   \      0x108   0x1C7F             ADDS     R7,R7,#+1
   \      0x10A   0xE7DA             B.N      ??emPrintfInternal_17
   \                     ??emPrintfInternal_13: (+1)
   \      0x10C   0xF85B 0x0B04      LDR      R0,[R11], #+4
   \      0x110   0xE7CA             B.N      ??emPrintfInternal_16
   \                     ??emPrintfInternal_15: (+1)
   \      0x112   0x4607             MOV      R7,R0
   \      0x114   0xF85B 0x6B04      LDR      R6,[R11], #+4
   \      0x118   0xB2FA             UXTB     R2,R7
   \      0x11A   0xA904             ADD      R1,SP,#+16
   \      0x11C   0x4648             MOV      R0,R9
   \      0x11E   0x47C0             BLX      R8
   \      0x120   0x2800             CMP      R0,#+0
   \      0x122   0xD15A             BNE.N    ??emPrintfInternal_19
   \      0x124   0xB2FF             UXTB     R7,R7
   \      0x126   0x44BA             ADD      R10,R7,R10
   \      0x128   0x4631             MOV      R1,R6
   \      0x12A   0xAF04             ADD      R7,SP,#+16
   \      0x12C   0x4606             MOV      R6,R0
   \      0x12E   0xE000             B.N      ??emPrintfInternal_21
   \                     ??emPrintfInternal_22: (+1)
   \      0x130   0x1C76             ADDS     R6,R6,#+1
   \                     ??emPrintfInternal_21: (+1)
   \      0x132   0xB2F0             UXTB     R0,R6
   \      0x134   0x5C08             LDRB     R0,[R1, R0]
   \      0x136   0x2800             CMP      R0,#+0
   \      0x138   0xD1FA             BNE.N    ??emPrintfInternal_22
   \      0x13A   0xB2F2             UXTB     R2,R6
   \      0x13C   0x4648             MOV      R0,R9
   \      0x13E   0x47C0             BLX      R8
   \      0x140   0x2800             CMP      R0,#+0
   \      0x142   0xD14A             BNE.N    ??emPrintfInternal_19
   \      0x144   0xB2F6             UXTB     R6,R6
   \      0x146   0x44B2             ADD      R10,R6,R10
   \      0x148   0xE76C             B.N      ??emPrintfInternal_2
   \                     ??emPrintfInternal_14: (+1)
   \      0x14A   0x296C             CMP      R1,#+108
   \      0x14C   0xD10A             BNE.N    ??emPrintfInternal_23
   \      0x14E   0x786A             LDRB     R2,[R5, #+1]
   \      0x150   0xF85B 0x0B04      LDR      R0,[R11], #+4
   \      0x154   0x2A75             CMP      R2,#+117
   \      0x156   0xBF0E             ITEE     EQ 
   \      0x158   0x2100             MOVEQ    R1,#+0
   \      0x15A   0x2101             MOVNE    R1,#+1
   \      0x15C   0x2A64             CMPNE    R2,#+100
   \      0x15E   0xD107             BNE.N    ??emPrintfInternal_24
   \      0x160   0x1C6D             ADDS     R5,R5,#+1
   \      0x162   0xE005             B.N      ??emPrintfInternal_24
   \                     ??emPrintfInternal_23: (+1)
   \      0x164   0x2975             CMP      R1,#+117
   \      0x166   0xF85B 0x0B04      LDR      R0,[R11], #+4
   \      0x16A   0xBF0C             ITE      EQ 
   \      0x16C   0x2100             MOVEQ    R1,#+0
   \      0x16E   0x2101             MOVNE    R1,#+1
   \                     ??emPrintfInternal_24: (+1)
   \      0x170   0x463A             MOV      R2,R7
   \      0x172   0x....'....        BL       emDecimalStringWrite
   \      0x176   0x4407             ADD      R7,R7,R0
   \                     ??emPrintfInternal_25: (+1)
   \      0x178   0xE754             B.N      ??emPrintfInternal_2
   \                     ??emPrintfInternal_11: (+1)
   \      0x17A   0xF85B 0x1B04      LDR      R1,[R11], #+4
   \      0x17E   0x2202             MOVS     R2,#+2
   \      0x180   0x4638             MOV      R0,R7
   \      0x182   0xB2C9             UXTB     R1,R1
   \                     ??emPrintfInternal_26: (+1)
   \      0x184   0x....'....        BL       emWriteHexInternal
   \      0x188   0xE74B             B.N      ??emPrintfInternal_3
   \                     ??emPrintfInternal_10: (+1)
   \      0x18A   0x7868             LDRB     R0,[R5, #+1]
   \      0x18C   0x2401             MOVS     R4,#+1
   \      0x18E   0x2878             CMP      R0,#+120
   \      0x190   0xBF18             IT       NE 
   \      0x192   0x2858             CMPNE    R0,#+88
   \      0x194   0xD1F0             BNE.N    ??emPrintfInternal_25
   \      0x196   0x1C6D             ADDS     R5,R5,#+1
   \      0x198   0x2400             MOVS     R4,#+0
   \      0x19A   0x1E68             SUBS     R0,R5,#+1
   \      0x19C   0x2932             CMP      R1,#+50
   \      0x19E   0xD105             BNE.N    ??emPrintfInternal_27
   \      0x1A0   0xF85B 0x0B04      LDR      R0,[R11], #+4
   \      0x1A4   0x2204             MOVS     R2,#+4
   \      0x1A6   0xB281             UXTH     R1,R0
   \      0x1A8   0x4638             MOV      R0,R7
   \      0x1AA   0xE7EB             B.N      ??emPrintfInternal_26
   \                     ??emPrintfInternal_27: (+1)
   \      0x1AC   0x2934             CMP      R1,#+52
   \      0x1AE   0xF47F 0xAF35      BNE.W    ??emPrintfInternal_1
   \      0x1B2   0xF85B 0x6B04      LDR      R6,[R11], #+4
   \      0x1B6   0x2204             MOVS     R2,#+4
   \      0x1B8   0x4638             MOV      R0,R7
   \      0x1BA   0x0C31             LSRS     R1,R6,#+16
   \      0x1BC   0x....'....        BL       emWriteHexInternal
   \      0x1C0   0x2204             MOVS     R2,#+4
   \      0x1C2   0xB2B1             UXTH     R1,R6
   \      0x1C4   0xE7DE             B.N      ??emPrintfInternal_26
    344            } // close while
    345          
    346            done:
    347            flushBuffer();
   \                     ??emPrintfInternal_8: (+1)
   \      0x1C6   0x4605             MOV      R5,R0
   \      0x1C8   0xB2EA             UXTB     R2,R5
   \      0x1CA   0xA904             ADD      R1,SP,#+16
   \      0x1CC   0x4648             MOV      R0,R9
   \      0x1CE   0x47C0             BLX      R8
   \      0x1D0   0xB918             CBNZ.N   R0,??emPrintfInternal_19
    348            return total;
   \      0x1D2   0x44AA             ADD      R10,R5,R10
   \      0x1D4   0xFA5F 0xF08A      UXTB     R0,R10
   \      0x1D8   0xE000             B.N      ??emPrintfInternal_28
    349          
    350            fail:
    351            return 0;
   \                     ??emPrintfInternal_19: (+1)
   \      0x1DA   0x2000             MOVS     R0,#+0
   \                     ??emPrintfInternal_28: (+1)
   \      0x1DC   0xB017             ADD      SP,SP,#+92
   \      0x1DE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    352          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \        0x4   0xA904             ADD      R1,SP,#+16
   \        0x6   0x1A86             SUBS     R6,R0,R2
   \        0x8   0xB2F2             UXTB     R2,R6
   \        0xA   0x4648             MOV      R0,R9
   \        0xC   0x4740             BX       R8
    353          

   \                                 In section .text, align 2, keep-with-next
    354          EmberStatus emberSerialPrintBytes(uint8_t port,
    355                                            PGM_P prefix,
    356                                            const uint8_t *bytes,
    357                                            uint16_t count)
    358          {
   \                     emberSerialPrintBytes: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x4615             MOV      R5,R2
   \        0x8   0x461E             MOV      R6,R3
    359            EmberStatus status;
    360            uint16_t i;
    361            status = emberSerialWriteString(port, prefix);
   \        0xA   0x....'....        BL       emberSerialWriteString
    362            if (status != EMBER_SUCCESS) {
   \        0xE   0x0001             MOVS     R1,R0
   \       0x10   0xD116             BNE.N    ??emberSerialPrintBytes_0
    363              return status;
    364            }
    365            for (i = 0; i < count; i++) {
   \       0x12   0x2700             MOVS     R7,#+0
   \       0x14   0x....'....        LDR.W    R8,??DataTable5_2
   \       0x18   0x....'....        LDR.W    R10,??DataTable5_3
   \       0x1C   0x....             ADR.N    R4,??DataTable5  ;; " "
   \       0x1E   0xE007             B.N      ??emberSerialPrintBytes_1
    366              status = emberSerialPrintf(port,
    367                                         "%x%s",
    368                                         bytes[i],
    369                                         (i < count - 1
    370                                          ? " "
    371                                          : ""));
   \                     ??emberSerialPrintBytes_2: (+1)
   \       0x20   0x5DEA             LDRB     R2,[R5, R7]
   \       0x22   0x4641             MOV      R1,R8
   \       0x24   0x4648             MOV      R0,R9
   \       0x26   0x....'....        BL       emberSerialPrintf
    372              if (status != EMBER_SUCCESS) {
   \       0x2A   0x0001             MOVS     R1,R0
   \       0x2C   0xD108             BNE.N    ??emberSerialPrintBytes_0
   \       0x2E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??emberSerialPrintBytes_1: (+1)
   \       0x30   0x42B7             CMP      R7,R6
   \       0x32   0xDA05             BGE.N    ??emberSerialPrintBytes_0
   \       0x34   0x1E70             SUBS     R0,R6,#+1
   \       0x36   0x4287             CMP      R7,R0
   \       0x38   0xBFB4             ITE      LT 
   \       0x3A   0x4623             MOVLT    R3,R4
   \       0x3C   0x4653             MOVGE    R3,R10
   \       0x3E   0xE7EF             B.N      ??emberSerialPrintBytes_2
    373                return status;
    374              }
    375            }
    376            return status;
   \                     ??emberSerialPrintBytes_0: (+1)
   \       0x40   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    377          }
    378          

   \                                 In section .text, align 2, keep-with-next
    379          EmberStatus emberSerialPrintBytesLine(uint8_t port,
    380                                                PGM_P prefix,
    381                                                const uint8_t *bytes,
    382                                                uint16_t count)
    383          {
   \                     emberSerialPrintBytesLine: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    384            EmberStatus result = emberSerialPrintBytes(port, prefix, bytes, count);
   \        0x4   0x....'....        BL       emberSerialPrintBytes
    385          
    386            if (result != EMBER_SUCCESS) {
   \        0x8   0x0001             MOVS     R1,R0
   \        0xA   0xD104             BNE.N    ??emberSerialPrintBytesLine_0
    387              return result;
    388            }
    389          
    390            return emberSerialPrintfLine(port, "");
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x....             LDR.N    R1,??DataTable5_3
   \       0x10   0xE8BD 0x4010      POP      {R4,LR}
   \       0x14   0x....             B.N      emberSerialPrintfLine
   \                     ??emberSerialPrintBytesLine_0: (+1)
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
    391          }
    392          

   \                                 In section .text, align 2, keep-with-next
    393          EmberStatus emberSerialPrintCarriageReturn(uint8_t port)
    394          {
    395            return emberSerialPrintf(port, "\r\n");
   \                     emberSerialPrintCarriageReturn: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_4
   \        0x2   0x....             B.N      emberSerialPrintf
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          EmberStatus emberSerialPrintfLine(uint8_t port, PGM_P formatString, ...)
    399          {
   \                     emberSerialPrintfLine: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB538             PUSH     {R3-R5,LR}
   \        0x4   0x4604             MOV      R4,R0
    400            EmberStatus stat;
    401            va_list ap;
    402            va_start(ap, formatString);
   \        0x6   0xAA04             ADD      R2,SP,#+16
    403            stat = emberSerialPrintfVarArg(port, formatString, ap);
   \        0x8   0x....'....        BL       emberSerialPrintfVarArg
   \        0xC   0x4605             MOV      R5,R0
    404            va_end(ap);
    405            emberSerialPrintCarriageReturn(port);
   \        0xE   0x....             LDR.N    R1,??DataTable5_4
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       emberSerialPrintf
    406            return stat;
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0xBC32             POP      {R1,R4,R5}
   \       0x1A   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          EmberStatus emberSerialPrintf(uint8_t port, PGM_P formatString, ...)
    410          {
   \                     emberSerialPrintf: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB580             PUSH     {R7,LR}
    411            EmberStatus stat;
    412            va_list ap;
    413            va_start(ap, formatString);
   \        0x4   0xAA02             ADD      R2,SP,#+8
    414            stat = emberSerialPrintfVarArg(port, formatString, ap);
    415            va_end(ap);
    416            return stat;
   \        0x6   0x....'....        BL       emberSerialPrintfVarArg
   \        0xA   0xBC02             POP      {R1}
   \        0xC   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    417          }
    418          
    419          #ifndef EMBER_MANAGEMENT_SERIAL
    420            #if CORTEXM3_EFM32_MICRO
    421          

   \                                 In section .text, align 2, keep-with-next
    422          EmberStatus emberSerialWriteHex(uint8_t port, uint8_t dataByte)
    423          {
   \                     emberSerialWriteHex: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    424            return COM_WriteHex((COM_Port_t) port, dataByte);
   \        0x2   0x....'....        BL       COM_WriteHex
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
    425          }
    426          

   \                                 In section .text, align 2, keep-with-next
    427          EmberStatus emberSerialPrintfVarArg(uint8_t port, PGM_P formatString, va_list ap)
    428          {
   \                     emberSerialPrintfVarArg: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    429            return COM_PrintfVarArg((COM_Port_t) port, formatString, ap);
   \        0x2   0x....'....        BL       COM_PrintfVarArg
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
    430          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     powers10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x78          DC8 "%x%s"
   \              0x25 0x73    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2
   \        0x0   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 1
   \                     ?_2:
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \        0x3   0x00               DC8 0
    431          
    432            #else //CORTEXM3_EFM32_MICRO
    433          
    434          EmberStatus emberSerialWriteHex(uint8_t port, uint8_t dataByte)
    435          {
    436            uint8_t hex[2];
    437            emWriteHexInternal(hex, dataByte, 2);
    438            return emberSerialWriteData(port, hex, 2);
    439          }
    440          
    441          EmberStatus emberSerialPrintfVarArg(uint8_t port, PGM_P formatString, va_list ap)
    442          {
    443            EmberStatus stat = EMBER_SUCCESS;
    444          
    445            #ifdef EMBER_SERIAL_USE_STDIO
    446            if (!emPrintfInternal(emberSerialWriteData, port, formatString, ap)) {
    447              stat = EMBER_ERR_FATAL;
    448            }
    449            #else //EMBER_SERIAL_USE_STDIO
    450          
    451            switch (emSerialPortModes[port]) {
    452            #ifdef EM_ENABLE_SERIAL_FIFO
    453              case EMBER_SERIAL_FIFO: {
    454                if (!emPrintfInternal(emberSerialWriteData, port, formatString, ap)) {
    455                  stat = EMBER_ERR_FATAL;
    456                }
    457                break;
    458              }
    459            #endif
    460            #ifdef EM_ENABLE_SERIAL_BUFFER
    461              case EMBER_SERIAL_BUFFER: {
    462                EmberMessageBuffer buff = emberAllocateStackBuffer();
    463                if (buff == EMBER_NULL_MESSAGE_BUFFER) {
    464                  stat = EMBER_NO_BUFFERS;
    465                  break;
    466                }
    467                if (emPrintfInternal(emberAppendToLinkedBuffers,
    468                                     buff,
    469                                     formatString,
    470                                     ap)) {
    471                  stat = emberSerialWriteBuffer(port, buff, 0, emberMessageBufferLength(buff));
    472                } else {
    473                  stat = EMBER_NO_BUFFERS;
    474                }
    475                // Refcounts may be manipulated in ISR if DMA used
    476                {
    477                  DECLARE_INTERRUPT_STATE;
    478                  DISABLE_INTERRUPTS();
    479                  emberReleaseMessageBuffer(buff);
    480                  RESTORE_INTERRUPTS();
    481                }
    482          
    483                break;
    484              }
    485            #endif
    486              default: {
    487              }
    488            }   //close switch.
    489            #endif //EMBER_SERIAL_USE_STDIO
    490            return stat;
    491          }
    492          
    493            #endif //CORTEXM3_EFM32_MICRO
    494          #endif //EMBER_MANAGEMENT_SERIAL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   emDecimalStringWrite
     128   emPrintfInternal
       128   -- Indirect call
       128   -> emDecimalStringWrite
       128   -> emWriteHexInternal
      16   emWriteHexInternal
      32   emberSerialPrintBytes
        32   -> emberSerialPrintf
        32   -> emberSerialWriteString
       8   emberSerialPrintBytesLine
         8   -> emberSerialPrintBytes
         0   -> emberSerialPrintfLine
       0   emberSerialPrintCarriageReturn
         0   -> emberSerialPrintf
      16   emberSerialPrintf
        16   -> emberSerialPrintfVarArg
      24   emberSerialPrintfLine
        24   -> emberSerialPrintf
        24   -> emberSerialPrintfVarArg
       8   emberSerialPrintfVarArg
         8   -> COM_PrintfVarArg
       8   emberSerialWriteHex
         8   -> COM_WriteHex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      14  ?Subroutine0
       8  ?_0
       2  ?_1
       1  ?_2
       4  ?_3
      82  emDecimalStringWrite
     482  emPrintfInternal
      40  emWriteHexInternal
      68  emberSerialPrintBytes
      24  emberSerialPrintBytesLine
       4  emberSerialPrintCarriageReturn
      16  emberSerialPrintf
      30  emberSerialPrintfLine
      10  emberSerialPrintfVarArg
      10  emberSerialWriteHex
      36  powers10

 
  51 bytes in section .rodata
 800 bytes in section .text
 
 800 bytes of CODE  memory
  51 bytes of CONST memory

Errors: none
Warnings: none
