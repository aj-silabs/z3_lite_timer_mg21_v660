###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:17
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md4.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWB945.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md4.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"md4.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\md4.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\md4.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\md4.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  RFC 1186/1320 compliant MD4 implementation
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           *  The MD4 algorithm was designed by Ron Rivest in 1990.
     35           *
     36           *  http://www.ietf.org/rfc/rfc1186.txt
     37           *  http://www.ietf.org/rfc/rfc1320.txt
     38           */
     39          
     40          #if !defined(MBEDTLS_CONFIG_FILE)
     41          #include "mbedtls/config.h"
     42          #else
     43          #include MBEDTLS_CONFIG_FILE
     44          #endif
     45          
     46          #if defined(MBEDTLS_MD4_C)
     47          
     48          #include "mbedtls/md4.h"
     49          
     50          #include <string.h>
     51          
     52          #if defined(MBEDTLS_SELF_TEST)
     53          #if defined(MBEDTLS_PLATFORM_C)
     54          #include "mbedtls/platform.h"
     55          #else
     56          #include <stdio.h>
     57          #define mbedtls_printf printf
     58          #endif /* MBEDTLS_PLATFORM_C */
     59          #endif /* MBEDTLS_SELF_TEST */
     60          
     61          #if !defined(MBEDTLS_MD4_ALT)
     62          
     63          /* Implementation that should never be optimized out by the compiler */
     64          static void mbedtls_zeroize( void *v, size_t n ) {
     65              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     66          }
     67          
     68          /*
     69           * 32-bit integer manipulation macros (little endian)
     70           */
     71          #ifndef GET_UINT32_LE
     72          #define GET_UINT32_LE(n,b,i)                            \
     73          {                                                       \
     74              (n) = ( (uint32_t) (b)[(i)    ]       )             \
     75                  | ( (uint32_t) (b)[(i) + 1] <<  8 )             \
     76                  | ( (uint32_t) (b)[(i) + 2] << 16 )             \
     77                  | ( (uint32_t) (b)[(i) + 3] << 24 );            \
     78          }
     79          #endif
     80          
     81          #ifndef PUT_UINT32_LE
     82          #define PUT_UINT32_LE(n,b,i)                                    \
     83          {                                                               \
     84              (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \
     85              (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \
     86              (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \
     87              (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
     88          }
     89          #endif
     90          
     91          void mbedtls_md4_init( mbedtls_md4_context *ctx )
     92          {
     93              memset( ctx, 0, sizeof( mbedtls_md4_context ) );
     94          }
     95          
     96          void mbedtls_md4_free( mbedtls_md4_context *ctx )
     97          {
     98              if( ctx == NULL )
     99                  return;
    100          
    101              mbedtls_zeroize( ctx, sizeof( mbedtls_md4_context ) );
    102          }
    103          
    104          void mbedtls_md4_clone( mbedtls_md4_context *dst,
    105                                  const mbedtls_md4_context *src )
    106          {
    107              *dst = *src;
    108          }
    109          
    110          /*
    111           * MD4 context setup
    112           */
    113          int mbedtls_md4_starts_ret( mbedtls_md4_context *ctx )
    114          {
    115              ctx->total[0] = 0;
    116              ctx->total[1] = 0;
    117          
    118              ctx->state[0] = 0x67452301;
    119              ctx->state[1] = 0xEFCDAB89;
    120              ctx->state[2] = 0x98BADCFE;
    121              ctx->state[3] = 0x10325476;
    122          
    123              return( 0 );
    124          }
    125          
    126          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    127          void mbedtls_md4_starts( mbedtls_md4_context *ctx )
    128          {
    129              mbedtls_md4_starts_ret( ctx );
    130          }
    131          #endif
    132          
    133          #if !defined(MBEDTLS_MD4_PROCESS_ALT)
    134          int mbedtls_internal_md4_process( mbedtls_md4_context *ctx,
    135                                            const unsigned char data[64] )
    136          {
    137              uint32_t X[16], A, B, C, D;
    138          
    139              GET_UINT32_LE( X[ 0], data,  0 );
    140              GET_UINT32_LE( X[ 1], data,  4 );
    141              GET_UINT32_LE( X[ 2], data,  8 );
    142              GET_UINT32_LE( X[ 3], data, 12 );
    143              GET_UINT32_LE( X[ 4], data, 16 );
    144              GET_UINT32_LE( X[ 5], data, 20 );
    145              GET_UINT32_LE( X[ 6], data, 24 );
    146              GET_UINT32_LE( X[ 7], data, 28 );
    147              GET_UINT32_LE( X[ 8], data, 32 );
    148              GET_UINT32_LE( X[ 9], data, 36 );
    149              GET_UINT32_LE( X[10], data, 40 );
    150              GET_UINT32_LE( X[11], data, 44 );
    151              GET_UINT32_LE( X[12], data, 48 );
    152              GET_UINT32_LE( X[13], data, 52 );
    153              GET_UINT32_LE( X[14], data, 56 );
    154              GET_UINT32_LE( X[15], data, 60 );
    155          
    156          #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
    157          
    158              A = ctx->state[0];
    159              B = ctx->state[1];
    160              C = ctx->state[2];
    161              D = ctx->state[3];
    162          
    163          #define F(x, y, z) ((x & y) | ((~x) & z))
    164          #define P(a,b,c,d,x,s) { a += F(b,c,d) + x; a = S(a,s); }
    165          
    166              P( A, B, C, D, X[ 0],  3 );
    167              P( D, A, B, C, X[ 1],  7 );
    168              P( C, D, A, B, X[ 2], 11 );
    169              P( B, C, D, A, X[ 3], 19 );
    170              P( A, B, C, D, X[ 4],  3 );
    171              P( D, A, B, C, X[ 5],  7 );
    172              P( C, D, A, B, X[ 6], 11 );
    173              P( B, C, D, A, X[ 7], 19 );
    174              P( A, B, C, D, X[ 8],  3 );
    175              P( D, A, B, C, X[ 9],  7 );
    176              P( C, D, A, B, X[10], 11 );
    177              P( B, C, D, A, X[11], 19 );
    178              P( A, B, C, D, X[12],  3 );
    179              P( D, A, B, C, X[13],  7 );
    180              P( C, D, A, B, X[14], 11 );
    181              P( B, C, D, A, X[15], 19 );
    182          
    183          #undef P
    184          #undef F
    185          
    186          #define F(x,y,z) ((x & y) | (x & z) | (y & z))
    187          #define P(a,b,c,d,x,s) { a += F(b,c,d) + x + 0x5A827999; a = S(a,s); }
    188          
    189              P( A, B, C, D, X[ 0],  3 );
    190              P( D, A, B, C, X[ 4],  5 );
    191              P( C, D, A, B, X[ 8],  9 );
    192              P( B, C, D, A, X[12], 13 );
    193              P( A, B, C, D, X[ 1],  3 );
    194              P( D, A, B, C, X[ 5],  5 );
    195              P( C, D, A, B, X[ 9],  9 );
    196              P( B, C, D, A, X[13], 13 );
    197              P( A, B, C, D, X[ 2],  3 );
    198              P( D, A, B, C, X[ 6],  5 );
    199              P( C, D, A, B, X[10],  9 );
    200              P( B, C, D, A, X[14], 13 );
    201              P( A, B, C, D, X[ 3],  3 );
    202              P( D, A, B, C, X[ 7],  5 );
    203              P( C, D, A, B, X[11],  9 );
    204              P( B, C, D, A, X[15], 13 );
    205          
    206          #undef P
    207          #undef F
    208          
    209          #define F(x,y,z) (x ^ y ^ z)
    210          #define P(a,b,c,d,x,s) { a += F(b,c,d) + x + 0x6ED9EBA1; a = S(a,s); }
    211          
    212              P( A, B, C, D, X[ 0],  3 );
    213              P( D, A, B, C, X[ 8],  9 );
    214              P( C, D, A, B, X[ 4], 11 );
    215              P( B, C, D, A, X[12], 15 );
    216              P( A, B, C, D, X[ 2],  3 );
    217              P( D, A, B, C, X[10],  9 );
    218              P( C, D, A, B, X[ 6], 11 );
    219              P( B, C, D, A, X[14], 15 );
    220              P( A, B, C, D, X[ 1],  3 );
    221              P( D, A, B, C, X[ 9],  9 );
    222              P( C, D, A, B, X[ 5], 11 );
    223              P( B, C, D, A, X[13], 15 );
    224              P( A, B, C, D, X[ 3],  3 );
    225              P( D, A, B, C, X[11],  9 );
    226              P( C, D, A, B, X[ 7], 11 );
    227              P( B, C, D, A, X[15], 15 );
    228          
    229          #undef F
    230          #undef P
    231          
    232              ctx->state[0] += A;
    233              ctx->state[1] += B;
    234              ctx->state[2] += C;
    235              ctx->state[3] += D;
    236          
    237              return( 0 );
    238          }
    239          
    240          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    241          void mbedtls_md4_process( mbedtls_md4_context *ctx,
    242                                    const unsigned char data[64] )
    243          {
    244              mbedtls_internal_md4_process( ctx, data );
    245          }
    246          #endif
    247          #endif /* !MBEDTLS_MD4_PROCESS_ALT */
    248          
    249          /*
    250           * MD4 process buffer
    251           */
    252          int mbedtls_md4_update_ret( mbedtls_md4_context *ctx,
    253                                      const unsigned char *input,
    254                                      size_t ilen )
    255          {
    256              int ret;
    257              size_t fill;
    258              uint32_t left;
    259          
    260              if( ilen == 0 )
    261                  return( 0 );
    262          
    263              left = ctx->total[0] & 0x3F;
    264              fill = 64 - left;
    265          
    266              ctx->total[0] += (uint32_t) ilen;
    267              ctx->total[0] &= 0xFFFFFFFF;
    268          
    269              if( ctx->total[0] < (uint32_t) ilen )
    270                  ctx->total[1]++;
    271          
    272              if( left && ilen >= fill )
    273              {
    274                  memcpy( (void *) (ctx->buffer + left),
    275                          (void *) input, fill );
    276          
    277                  if( ( ret = mbedtls_internal_md4_process( ctx, ctx->buffer ) ) != 0 )
    278                      return( ret );
    279          
    280                  input += fill;
    281                  ilen  -= fill;
    282                  left = 0;
    283              }
    284          
    285              while( ilen >= 64 )
    286              {
    287                  if( ( ret = mbedtls_internal_md4_process( ctx, input ) ) != 0 )
    288                      return( ret );
    289          
    290                  input += 64;
    291                  ilen  -= 64;
    292              }
    293          
    294              if( ilen > 0 )
    295              {
    296                  memcpy( (void *) (ctx->buffer + left),
    297                          (void *) input, ilen );
    298              }
    299          
    300              return( 0 );
    301          }
    302          
    303          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    304          void mbedtls_md4_update( mbedtls_md4_context *ctx,
    305                                   const unsigned char *input,
    306                                   size_t ilen )
    307          {
    308              mbedtls_md4_update_ret( ctx, input, ilen );
    309          }
    310          #endif
    311          
    312          static const unsigned char md4_padding[64] =
    313          {
    314           0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    315              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    316              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    317              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    318          };
    319          
    320          /*
    321           * MD4 final digest
    322           */
    323          int mbedtls_md4_finish_ret( mbedtls_md4_context *ctx,
    324                                      unsigned char output[16] )
    325          {
    326              int ret;
    327              uint32_t last, padn;
    328              uint32_t high, low;
    329              unsigned char msglen[8];
    330          
    331              high = ( ctx->total[0] >> 29 )
    332                   | ( ctx->total[1] <<  3 );
    333              low  = ( ctx->total[0] <<  3 );
    334          
    335              PUT_UINT32_LE( low,  msglen, 0 );
    336              PUT_UINT32_LE( high, msglen, 4 );
    337          
    338              last = ctx->total[0] & 0x3F;
    339              padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    340          
    341              ret = mbedtls_md4_update_ret( ctx, (unsigned char *)md4_padding, padn );
    342              if( ret != 0 )
    343                  return( ret );
    344          
    345              if( ( ret = mbedtls_md4_update_ret( ctx, msglen, 8 ) ) != 0 )
    346                  return( ret );
    347          
    348          
    349              PUT_UINT32_LE( ctx->state[0], output,  0 );
    350              PUT_UINT32_LE( ctx->state[1], output,  4 );
    351              PUT_UINT32_LE( ctx->state[2], output,  8 );
    352              PUT_UINT32_LE( ctx->state[3], output, 12 );
    353          
    354              return( 0 );
    355          }
    356          
    357          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    358          void mbedtls_md4_finish( mbedtls_md4_context *ctx,
    359                                   unsigned char output[16] )
    360          {
    361              mbedtls_md4_finish_ret( ctx, output );
    362          }
    363          #endif
    364          
    365          #endif /* !MBEDTLS_MD4_ALT */
    366          
    367          /*
    368           * output = MD4( input buffer )
    369           */
    370          int mbedtls_md4_ret( const unsigned char *input,
    371                               size_t ilen,
    372                               unsigned char output[16] )
    373          {
    374              int ret;
    375              mbedtls_md4_context ctx;
    376          
    377              mbedtls_md4_init( &ctx );
    378          
    379              if( ( ret = mbedtls_md4_starts_ret( &ctx ) ) != 0 )
    380                  goto exit;
    381          
    382              if( ( ret = mbedtls_md4_update_ret( &ctx, input, ilen ) ) != 0 )
    383                  goto exit;
    384          
    385              if( ( ret = mbedtls_md4_finish_ret( &ctx, output ) ) != 0 )
    386                  goto exit;
    387          
    388          exit:
    389              mbedtls_md4_free( &ctx );
    390          
    391              return( ret );
    392          }
    393          
    394          #if !defined(MBEDTLS_DEPRECATED_REMOVED)
    395          void mbedtls_md4( const unsigned char *input,
    396                            size_t ilen,
    397                            unsigned char output[16] )
    398          {
    399              mbedtls_md4_ret( input, ilen, output );
    400          }
    401          #endif
    402          
    403          #if defined(MBEDTLS_SELF_TEST)
    404          
    405          /*
    406           * RFC 1320 test vectors
    407           */
    408          static const unsigned char md4_test_str[7][81] =
    409          {
    410              { "" },
    411              { "a" },
    412              { "abc" },
    413              { "message digest" },
    414              { "abcdefghijklmnopqrstuvwxyz" },
    415              { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    416              { "12345678901234567890123456789012345678901234567890123456789012"
    417                "345678901234567890" }
    418          };
    419          
    420          static const size_t md4_test_strlen[7] =
    421          {
    422              0, 1, 3, 14, 26, 62, 80
    423          };
    424          
    425          static const unsigned char md4_test_sum[7][16] =
    426          {
    427              { 0x31, 0xD6, 0xCF, 0xE0, 0xD1, 0x6A, 0xE9, 0x31,
    428                0xB7, 0x3C, 0x59, 0xD7, 0xE0, 0xC0, 0x89, 0xC0 },
    429              { 0xBD, 0xE5, 0x2C, 0xB3, 0x1D, 0xE3, 0x3E, 0x46,
    430                0x24, 0x5E, 0x05, 0xFB, 0xDB, 0xD6, 0xFB, 0x24 },
    431              { 0xA4, 0x48, 0x01, 0x7A, 0xAF, 0x21, 0xD8, 0x52,
    432                0x5F, 0xC1, 0x0A, 0xE8, 0x7A, 0xA6, 0x72, 0x9D },
    433              { 0xD9, 0x13, 0x0A, 0x81, 0x64, 0x54, 0x9F, 0xE8,
    434                0x18, 0x87, 0x48, 0x06, 0xE1, 0xC7, 0x01, 0x4B },
    435              { 0xD7, 0x9E, 0x1C, 0x30, 0x8A, 0xA5, 0xBB, 0xCD,
    436                0xEE, 0xA8, 0xED, 0x63, 0xDF, 0x41, 0x2D, 0xA9 },
    437              { 0x04, 0x3F, 0x85, 0x82, 0xF2, 0x41, 0xDB, 0x35,
    438                0x1C, 0xE6, 0x27, 0xE1, 0x53, 0xE7, 0xF0, 0xE4 },
    439              { 0xE3, 0x3B, 0x4D, 0xDC, 0x9C, 0x38, 0xF2, 0x19,
    440                0x9C, 0x3E, 0x7B, 0x16, 0x4F, 0xCC, 0x05, 0x36 }
    441          };
    442          
    443          /*
    444           * Checkup routine
    445           */
    446          int mbedtls_md4_self_test( int verbose )
    447          {
    448              int i, ret = 0;
    449              unsigned char md4sum[16];
    450          
    451              for( i = 0; i < 7; i++ )
    452              {
    453                  if( verbose != 0 )
    454                      mbedtls_printf( "  MD4 test #%d: ", i + 1 );
    455          
    456                  ret = mbedtls_md4_ret( md4_test_str[i], md4_test_strlen[i], md4sum );
    457                  if( ret != 0 )
    458                      goto fail;
    459          
    460                  if( memcmp( md4sum, md4_test_sum[i], 16 ) != 0 )
    461                  {
    462                      ret = 1;
    463                      goto fail;
    464                  }
    465          
    466                  if( verbose != 0 )
    467                      mbedtls_printf( "passed\n" );
    468              }
    469          
    470              if( verbose != 0 )
    471                  mbedtls_printf( "\n" );
    472          
    473              return( 0 );
    474          
    475          fail:
    476              if( verbose != 0 )
    477                  mbedtls_printf( "failed\n" );
    478          
    479              return( ret );
    480          }
    481          
    482          #endif /* MBEDTLS_SELF_TEST */
    483          
    484          #endif /* MBEDTLS_MD4_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
