###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:20:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\plugin\zll-commissioning-common\zll-commissioning-common.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW8738.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\plugin\zll-commissioning-common\zll-commissioning-common.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"zll-commissioning-common.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\plugin\zll-commissioning-common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\zll-commissioning-common.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\zll-commissioning-common.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\plugin\zll-commissioning-common\zll-commissioning-common.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Routines for the ZLL Commissioning Common plugin, which defines
      4           *        functions common to both server and client sides of the ZLL protocol.
      5           *******************************************************************************
      6           * # License
      7           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      8           *******************************************************************************
      9           *
     10           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     11           * software is governed by the terms of Silicon Labs Master Software License
     12           * Agreement (MSLA) available at
     13           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     14           * software is distributed to you in Source Code format and is governed by the
     15           * sections of the MSLA applicable to Source Code.
     16           *
     17           ******************************************************************************/
     18          
     19          #include "app/framework/include/af.h"
     20          #include "app/framework/util/af-main.h"
     21          #include "app/framework/util/common.h"
     22          #include "zll-commissioning-common.h"
     23          
     24          // AppBuilder already prevents multi-network ZLL configurations.  This is here
     25          // as a reminder that the code below assumes that there is exactly one network
     26          // and that it is ZigBee PRO.
     27          #if EMBER_SUPPORTED_NETWORKS != 1
     28            #error ZLL is not supported with multiple networks.
     29          #endif
     30          
     31          #ifdef EMBER_AF_PLUGIN_NETWORK_CREATOR
     32            #include EMBER_AF_API_NETWORK_CREATOR
     33          #endif
     34          
     35          //------------------------------------------------------------------------------
     36          // Globals
     37          
     38          #define isFactoryNew(state) ((state) & EMBER_ZLL_STATE_FACTORY_NEW)
     39          
     40          // The target network - used by both client and server sides, the latter mainly for
     41          // the touchlink complete callback to the application.

   \                                 In section .bss, align 4
     42          EmberZllNetwork emAfZllNetwork;
   \                     emAfZllNetwork:
   \        0x0                      DS8 44
     43          
     44          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT
     45          // Sub-device info (mainly for client, but server needs to initialize the count)
     46          EmberZllDeviceInfoRecord emAfZllSubDevices[EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT_SUB_DEVICE_TABLE_SIZE];
     47          uint8_t emAfZllSubDeviceCount = 0;
     48          #endif
     49          
     50          // The module state for both client and server.

   \                                 In section .bss, align 2
     51          uint16_t emAfZllFlags = INITIAL;
   \                     emAfZllFlags:
   \        0x0                      DS8 2
     52          
     53          #ifdef PLUGIN_DEBUG
     54          static const uint8_t emAfZllCommissioningPluginName[] = "ZLL Commissioning Common";
     55          #define PLUGIN_NAME emAfZllCommissioningPluginName
     56          #endif
     57          
     58          // Private ZLL commissioning functions
     59          void emAfZllFinishNetworkFormationForRouter(EmberStatus status);
     60          void emAfZllAbortTouchLink(EmberAfZllCommissioningStatus reason);
     61          void emAfZllStackStatus(EmberStatus status);
     62          void emAfZllInitializeRadio(void);
     63          bool emAfZllStealingAllowed(void);
     64          
     65          // Forward references
     66          bool emAfZllAmFactoryNew(void);
     67          #ifdef EZSP_HOST
     68          void emberAfPluginZllCommissioningCommonNcpInitCallback(bool memoryAllocation);
     69          #else
     70          void emberAfPluginZllCommissioningCommonInitCallback(void);
     71          #endif
     72          
     73          //------------------------------------------------------------------------------
     74          // Module private functions
     75          
     76          static void setProfileInteropState(void)
     77          {
     78            EmberTokTypeStackZllData token;
     79          
     80            emberZllGetTokenStackZllData(&token);
     81            token.bitmask |= EMBER_ZLL_STATE_PROFILE_INTEROP;
     82            emberZllSetTokenStackZllData(&token);
     83          }
     84          
     85          static void initFactoryNew(void)
     86          {
     87            // The initialization is only performed if we are factory new in the BDB sense,
     88            // i.e. not joined to a centralized or distributed network.
     89            if (emAfZllAmFactoryNew()) {
     90              emberAfAppPrintln("ZllCommInit - device is not joined to a network");
     91          
     92              // Set the default ZLL node type for both client and server, for Scan Request
     93              // and Scan Response messages respectively.
     94              emberSetZllNodeType((emAfCurrentZigbeeProNetwork->nodeType
     95                                   == EMBER_COORDINATOR)
     96                                  ? EMBER_ROUTER
     97                                  : emAfCurrentZigbeeProNetwork->nodeType);
     98          
     99          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_SERVER
    100              emAfZllInitializeRadio();
    101          #endif
    102          
    103          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT
    104              // Set the address assignment capability bit to true for a client in all cases.
    105              emberSetZllAdditionalState(EMBER_ZLL_STATE_ADDRESS_ASSIGNMENT_CAPABLE);
    106          #endif
    107          
    108          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_ZIGBEE3_SUPPORT
    109              // Set interop bit here if we support Zigbee 3.0.
    110              setProfileInteropState();
    111          #endif
    112          
    113              // Set the security state here, in case of incoming scan requests, to ensure
    114              // that our security key bitmask matches that of the initiator, or in case
    115              // we initiate a touchlink after joining by classical commissioning.
    116              emberAfZllSetInitialSecurityState();
    117          
    118              // Set the default power for a new network in all cases.
    119              emberSetRadioPower(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_RADIO_TX_POWER);
    120            }
    121          }
    122          

   \                                 In section .text, align 2, keep-with-next
    123          static void completeResetToFactoryNew(void)
    124          {
   \                     completeResetToFactoryNew: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    125            emberAfAppPrintln("Resetting to factory new");
   \        0x2   0x....             LDR.N    R1,??DataTable7
   \        0x4   0x2002             MOVS     R0,#+2
   \        0x6   0x....'....        BL       emberAfPrintln
    126            emberAfResetAttributes(EMBER_BROADCAST_ENDPOINT);
   \        0xA   0x20FF             MOVS     R0,#+255
   \        0xC   0x....'....        BL       emberAfResetAttributes
    127            emberAfGroupsClusterClearGroupTableCallback(EMBER_BROADCAST_ENDPOINT);
   \       0x10   0x20FF             MOVS     R0,#+255
   \       0x12   0x....'....        BL       emberAfGroupsClusterClearGroupTableCallback
    128            emberAfScenesClusterClearSceneTableCallback(EMBER_BROADCAST_ENDPOINT);
   \       0x16   0x20FF             MOVS     R0,#+255
   \       0x18   0x....'....        BL       emberAfScenesClusterClearSceneTableCallback
    129          #ifdef EZSP_HOST
    130            emberAfPluginZllCommissioningCommonNcpInitCallback(false);
    131          #else
    132            emberAfPluginZllCommissioningCommonInitCallback();
   \       0x1C   0x....'....        BL       emberAfPluginZllCommissioningCommonInitCallback
    133          #endif
    134            emberAfPluginZllCommissioningCommonResetToFactoryNewCallback();
   \       0x20   0x....'....        BL       emberAfPluginZllCommissioningCommonResetToFactoryNewCallback
    135            emAfZllFlags = INITIAL;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x....             LDR.N    R1,??DataTable7_1
   \       0x28   0x8008             STRH     R0,[R1, #+0]
    136          }
   \       0x2A   0xBD01             POP      {R0,PC}          ;; return
    137          
    138          //------------------------------------------------------------------------------
    139          // ZLL commissioning private functions
    140          

   \                                 In section .text, align 2, keep-with-next
    141          bool emAfZllAmFactoryNew(void)
    142          {
   \                     emAfZllAmFactoryNew: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    143            EmberTokTypeStackZllData token;
    144            emberZllGetTokenStackZllData(&token);
   \        0x2   0x....'....        BL       ?Subroutine0
    145            return isFactoryNew(token.bitmask);
   \                     ??CrossCallReturnLabel_3: (+1)
   \        0x6   0x9800             LDR      R0,[SP, #+0]
   \        0x8   0xB005             ADD      SP,SP,#+20
   \        0xA   0xF000 0x0001      AND      R0,R0,#0x1
   \        0xE   0xBD00             POP      {PC}             ;; return
    146          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4668             MOV      R0,SP
   \        0x2   0x....'....        B.W      emberZllGetTokenStackZllData
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void emAfZllTouchLinkComplete(void)
    149          {
   \                     emAfZllTouchLinkComplete: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
    150            EmberNodeType nodeType;
    151            EmberNetworkParameters parameters;
    152            emAfZllFlags = INITIAL;
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x....             LDR.N    R3,??DataTable7_1
   \        0x8   0x801A             STRH     R2,[R3, #+0]
    153            emberAfGetNetworkParameters(&nodeType, &parameters);
   \        0xA   0xA901             ADD      R1,SP,#+4
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       emberAfGetNetworkParameters
    154            emAfZllNetwork.zigbeeNetwork.channel = parameters.radioChannel;
   \       0x12   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \       0x16   0x....             LDR.N    R4,??DataTable7_2
    155            emAfZllNetwork.zigbeeNetwork.panId = parameters.panId;
    156            MEMMOVE(emAfZllNetwork.zigbeeNetwork.extendedPanId,
    157                    parameters.extendedPanId,
    158                    EXTENDED_PAN_ID_SIZE);
   \       0x18   0x2208             MOVS     R2,#+8
   \       0x1A   0x70A0             STRB     R0,[R4, #+2]
   \       0x1C   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \       0x20   0xA901             ADD      R1,SP,#+4
   \       0x22   0x8020             STRH     R0,[R4, #+0]
   \       0x24   0x1D20             ADDS     R0,R4,#+4
   \       0x26   0x....'....        BL       halCommonMemMove
    159            emAfZllNetwork.zigbeeNetwork.nwkUpdateId = parameters.nwkUpdateId;
   \       0x2A   0xF89D 0x0014      LDRB     R0,[SP, #+20]
    160          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT
    161            emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback(&emAfZllNetwork,
    162                                                                         emAfZllSubDeviceCount,
    163                                                                         (emAfZllSubDeviceCount == 0
    164                                                                          ? NULL
    165                                                                          : emAfZllSubDevices));
    166          #else
    167            emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback(&emAfZllNetwork, 0, NULL);
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0x2100             MOVS     R1,#+0
   \       0x32   0x7360             STRB     R0,[R4, #+13]
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback
    168          #endif //EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT
    169          }
   \       0x3A   0xB008             ADD      SP,SP,#+32
   \       0x3C   0xBD10             POP      {R4,PC}          ;; return
    170          

   \                                 In section .text, align 2, keep-with-next
    171          EmberNodeType emAfZllGetLogicalNodeType(void)
    172          {
   \                     emAfZllGetLogicalNodeType: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    173            EmberNodeType nodeType;
    174            EmberStatus status = emberAfGetNodeType(&nodeType);
    175          
    176            // Note, we only report as a coordinator if we are a currently
    177            // coordinator on a centralized network.
    178            if (status == EMBER_NOT_JOINED) {
   \        0x2   0x4668             MOV      R0,SP
   \        0x4   0x....'....        BL       emberAfGetNodeType
   \        0x8   0x2893             CMP      R0,#+147
   \        0xA   0xD109             BNE.N    ??emAfZllGetLogicalNodeType_0
    179              nodeType = emAfCurrentZigbeeProNetwork->nodeType;
   \        0xC   0x....             LDR.N    R0,??DataTable7_3
   \        0xE   0x6801             LDR      R1,[R0, #+0]
   \       0x10   0x780A             LDRB     R2,[R1, #+0]
    180              if (nodeType == EMBER_COORDINATOR) {
   \       0x12   0x2A01             CMP      R2,#+1
   \       0x14   0xF88D 0x2000      STRB     R2,[SP, #+0]
   \       0x18   0xBF04             ITT      EQ 
   \       0x1A   0x2102             MOVEQ    R1,#+2
   \       0x1C   0xF88D 0x1000      STRBEQ   R1,[SP, #+0]
    181                nodeType = EMBER_ROUTER;
    182              }
    183            }
    184            return nodeType;
   \                     ??emAfZllGetLogicalNodeType_0: (+1)
   \       0x20   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x24   0xBD02             POP      {R1,PC}          ;; return
    185          }
    186          
    187          //------------------------------------------------------------------------------
    188          // Public functions
    189          

   \                                 In section .text, align 2, keep-with-next
    190          void emberAfPluginZllCommissioningCommonInitCallback(void)
    191          {
   \                     emberAfPluginZllCommissioningCommonInitCallback: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    192          #ifndef EZSP_HOST
    193            // Set the policy for both server and client.
    194          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_SERVER
    195            EmberZllPolicy policy = (emAfZllStealingAllowed() ? EMBER_ZLL_POLICY_ENABLED : EMBER_ZLL_POLICY_NO_TOUCHLINK_FOR_NFN);
   \        0x2   0x....'....        BL       emAfZllStealingAllowed
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xBF14             ITE      NE 
   \        0xA   0x2000             MOVNE    R0,#+0
   \        0xC   0x2002             MOVEQ    R0,#+2
    196          #else
    197            EmberZllPolicy policy = EMBER_ZLL_POLICY_ENABLED;
    198          #endif
    199            emberZllSetPolicy(policy);
   \        0xE   0x....'....        BL       emberZllSetPolicy
    200          
    201            // Set the primary and secondary channel masks for both server and client.
    202            emberSetZllPrimaryChannelMask(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_PRIMARY_CHANNEL_MASK);
   \       0x12   0x....             LDR.N    R0,??DataTable7_4  ;; 0x2108800
   \       0x14   0x....'....        BL       emberSetZllPrimaryChannelMask
    203          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_SECONDARY_CHANNEL_MASK
    204            emberSetZllSecondaryChannelMask(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_SECONDARY_CHANNEL_MASK);
   \       0x18   0x....             LDR.N    R0,??DataTable7_5  ;; 0x5ef7000
   \       0x1A   0x....'....        BL       emberSetZllSecondaryChannelMask
    205          #endif
    206          
    207            // Factory new initialization
    208            initFactoryNew();
   \       0x1E   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x22   0x9800             LDR      R0,[SP, #+0]
   \       0x24   0x07C1             LSLS     R1,R0,#+31
   \       0x26   0xD51B             BPL.N    ??emberAfPluginZllCommissioningCommonInitCallba_0
   \       0x28   0x....             LDR.N    R1,??DataTable7_6
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0x....'....        BL       emberAfPrintln
   \       0x30   0x....             LDR.N    R0,??DataTable7_3
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0x7808             LDRB     R0,[R1, #+0]
   \       0x36   0x2801             CMP      R0,#+1
   \       0x38   0xBF08             IT       EQ 
   \       0x3A   0x2002             MOVEQ    R0,#+2
   \       0x3C   0x....'....        BL       emberSetZllNodeType
   \       0x40   0x....'....        BL       emAfZllInitializeRadio
   \       0x44   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x48   0x9800             LDR      R0,[SP, #+0]
   \       0x4A   0xF040 0x0080      ORR      R0,R0,#0x80
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0x4668             MOV      R0,SP
   \       0x52   0x....'....        BL       emberZllSetTokenStackZllData
   \       0x56   0x....'....        BL       emberAfZllSetInitialSecurityState
   \       0x5A   0x2003             MOVS     R0,#+3
   \       0x5C   0x....'....        BL       emberSetRadioPower
    209          #endif // #ifndef EZSP_HOST
    210          }
   \                     ??emberAfPluginZllCommissioningCommonInitCallba_0: (+1)
   \       0x60   0xB005             ADD      SP,SP,#+20
   \       0x62   0xBD00             POP      {PC}             ;; return
    211          

   \                                 In section .text, align 2, keep-with-next
    212          void emberAfPluginZllCommissioningCommonNcpInitCallback(bool memoryAllocation)
    213          {
    214          #ifdef EZSP_HOST
    215            if (!memoryAllocation) {
    216              // Set the policy for both server and client.
    217          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_SERVER
    218              EmberZllPolicy policy = (emAfZllStealingAllowed() ? EMBER_ZLL_POLICY_ENABLED : EMBER_ZLL_POLICY_NO_TOUCHLINK_FOR_NFN);
    219          #else
    220              EmberZllPolicy policy = EMBER_ZLL_POLICY_ENABLED;
    221          #endif
    222              emberAfSetEzspPolicy(EZSP_ZLL_POLICY,
    223                                   policy,
    224                                   "ZLL policy",
    225                                   "enable");
    226          
    227              // Set the primary and secondary channel masks for both server and client.
    228              emberSetZllPrimaryChannelMask(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_PRIMARY_CHANNEL_MASK);
    229          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_SECONDARY_CHANNEL_MASK
    230              emberSetZllSecondaryChannelMask(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_COMMON_SECONDARY_CHANNEL_MASK);
    231          #endif
    232          
    233              // Factory new initialization
    234              initFactoryNew();
    235            }
    236          #endif // #ifdef EZSP_HOST
    237          }
   \                     emberAfPluginZllCommissioningCommonNcpInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    238          

   \                                 In section .text, align 2, keep-with-next
    239          EmberStatus emberAfZllSetInitialSecurityState(void)
    240          {
   \                     emberAfZllSetInitialSecurityState: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
    241            EmberKeyData networkKey;
    242            EmberZllInitialSecurityState securityState = {
    243              0, // bitmask - unused
    244              EMBER_ZLL_KEY_INDEX_CERTIFICATION,
    245              EMBER_ZLL_CERTIFICATION_ENCRYPTION_KEY,
    246              EMBER_ZLL_CERTIFICATION_PRECONFIGURED_LINK_KEY,
    247            };
   \        0x4   0xA805             ADD      R0,SP,#+20
   \        0x6   0x....             LDR.N    R1,??DataTable7_7
   \        0x8   0x2228             MOVS     R2,#+40
   \        0xA   0x....'....        BL       __aeabi_memcpy4
    248            EmberStatus status;
    249          
    250            // We can only initialize security information while not on a network - this
    251            // also covers the case where we are joined as a coordinator.
    252            if (emberAfNetworkState() != EMBER_NO_NETWORK) {
   \        0xE   0x....'....        BL       emberAfNetworkState
   \       0x12   0xB108             CBZ.N    R0,??emberAfZllSetInitialSecurityState_0
    253              return EMBER_SUCCESS;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xE01A             B.N      ??emberAfZllSetInitialSecurityState_1
    254            }
    255          
    256            status = emberAfGenerateRandomKey(&networkKey);
   \                     ??emberAfZllSetInitialSecurityState_0: (+1)
   \       0x18   0xA801             ADD      R0,SP,#+4
   \       0x1A   0x....'....        BL       emberGenerateRandomKey
   \       0x1E   0x0004             MOVS     R4,R0
    257            if (status != EMBER_SUCCESS) {
   \       0x20   0x....             LDR.N    R5,??DataTable7_8
   \       0x22   0x....             LDR.N    R6,??DataTable7_9
   \       0x24   0xD002             BEQ.N    ??emberAfZllSetInitialSecurityState_2
    258              emberAfAppPrintln("%p%p failed 0x%x",
    259                                "Error: ",
    260                                "Generating random key",
    261                                status);
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x....             LDR.N    R3,??DataTable7_10
   \       0x2A   0xE00A             B.N      ??emberAfZllSetInitialSecurityState_3
    262              return status;
    263            }
    264          
    265            emberAfPluginZllCommissioningCommonInitialSecurityStateCallback(&securityState);
   \                     ??emberAfZllSetInitialSecurityState_2: (+1)
   \       0x2C   0xA805             ADD      R0,SP,#+20
   \       0x2E   0x....'....        BL       emberAfPluginZllCommissioningCommonInitialSecurityStateCallback
    266            status = emberZllSetInitialSecurityState(&networkKey, &securityState);
   \       0x32   0xA905             ADD      R1,SP,#+20
   \       0x34   0xA801             ADD      R0,SP,#+4
   \       0x36   0x....'....        BL       emberZllSetInitialSecurityState
   \       0x3A   0x0004             MOVS     R4,R0
    267          
    268            if (status != EMBER_SUCCESS) {
   \       0x3C   0xD006             BEQ.N    ??emberAfZllSetInitialSecurityState_4
    269              emberAfAppPrintln("%p%p failed 0x%x",
    270                                "Error: ",
    271                                "Initializing security",
    272                                status);
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0x....             LDR.N    R3,??DataTable7_11
   \                     ??emberAfZllSetInitialSecurityState_3: (+1)
   \       0x42   0x4632             MOV      R2,R6
   \       0x44   0x4629             MOV      R1,R5
   \       0x46   0x2002             MOVS     R0,#+2
   \       0x48   0x....'....        BL       emberAfPrintln
    273            }
    274            return status;
   \                     ??emberAfZllSetInitialSecurityState_4: (+1)
   \       0x4C   0x4620             MOV      R0,R4
   \                     ??emberAfZllSetInitialSecurityState_1: (+1)
   \       0x4E   0xB010             ADD      SP,SP,#+64
   \       0x50   0xBD70             POP      {R4-R6,PC}       ;; return
    275          }
    276          

   \                                 In section .text, align 2, keep-with-next
    277          bool emberAfZllTouchLinkInProgress(void)
    278          {
    279            return touchLinkInProgress();
   \                     emberAfZllTouchLinkInProgress: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7_1
   \        0x2   0x7801             LDRB     R1,[R0, #+0]
   \        0x4   0xF011 0x008F      ANDS     R0,R1,#0x8F
   \        0x8   0xBF18             IT       NE 
   \        0xA   0x2001             MOVNE    R0,#+1
   \        0xC   0x4770             BX       LR               ;; return
    280          }
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void emberAfZllResetToFactoryNew(void)
    283          {
   \                     emberAfZllResetToFactoryNew: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    284            // The leave will cause the ZLL state to be set to 'factory new',
    285            // but after a short delay.
    286            emAfZllFlags |= RESETTING_TO_FACTORY_NEW;
   \        0x2   0x....             LDR.N    R0,??DataTable7_1
   \        0x4   0x8801             LDRH     R1,[R0, #+0]
   \        0x6   0xF441 0x7100      ORR      R1,R1,#0x200
   \        0xA   0x8001             STRH     R1,[R0, #+0]
    287            EmberStatus status = emberLeaveNetwork();
   \        0xC   0x....'....        BL       emberLeaveNetwork
    288            if (status != EMBER_SUCCESS) {
   \       0x10   0xB148             CBZ.N    R0,??emberAfZllResetToFactoryNew_0
    289              emberAfAppPrintln("Error: Failed to leave network, status: 0x%X",
    290                                status);
   \       0x12   0x4602             MOV      R2,R0
   \       0x14   0x....             LDR.N    R1,??DataTable7_12
   \       0x16   0x2002             MOVS     R0,#+2
   \       0x18   0x....'....        BL       emberAfPrintln
    291              emberZllClearTokens();
   \       0x1C   0x....'....        BL       emberZllClearTokens
    292              completeResetToFactoryNew();
   \       0x20   0xE8BD 0x4001      POP      {R0,LR}
   \       0x24   0x....             B.N      completeResetToFactoryNew
    293            }
    294          }
   \                     ??emberAfZllResetToFactoryNew_0: (+1)
   \       0x26   0xBD01             POP      {R0,PC}          ;; return
    295          

   \                                 In section .text, align 2, keep-with-next
    296          void emberAfPluginZllCommissioningCommonStackStatusCallback(EmberStatus status)
    297          {
   \                     emberAfPluginZllCommissioningCommonStackStatusCallback: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    298            // If we are forming a network for a router initiator, then we handle
    299            // this status separately.
    300            // During touch linking, EMBER_NETWORK_UP means the process is complete.  Any
    301            // other status, unless we're busy joining or rejoining, means that the touch
    302            // link failed.
    303            debugPrintln("%p: ZllCommStackStatus: status = %X, flags = %X", PLUGIN_NAME, status, emAfZllFlags);
    304          
    305          #if defined(EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT) && defined(EMBER_AF_PLUGIN_NETWORK_CREATOR)
    306            if (formingNetwork()) {
    307              emAfZllFinishNetworkFormationForRouter(status);
    308            } else
    309          #endif
    310          
    311            if (touchLinkInProgress()) { // including TOUCH_LINK_TARGET
   \        0x4   0x....             LDR.N    R0,??DataTable7_1
   \        0x6   0x8800             LDRH     R0,[R0, #+0]
   \        0x8   0xF010 0x0F8F      TST      R0,#0x8F
   \        0xC   0xD011             BEQ.N    ??emberAfPluginZllCommissioningCommonStackStatu_0
    312              if (status == EMBER_NETWORK_UP) {
   \        0xE   0x2C90             CMP      R4,#+144
   \       0x10   0xD102             BNE.N    ??emberAfPluginZllCommissioningCommonStackStatu_1
    313                emAfZllTouchLinkComplete();
   \       0x12   0x....'....        BL       emAfZllTouchLinkComplete
   \       0x16   0xBD1F             POP      {R0-R4,PC}
    314              } else if (status == EMBER_NETWORK_DOWN) {
   \                     ??emberAfPluginZllCommissioningCommonStackStatu_1: (+1)
   \       0x18   0x2C91             CMP      R4,#+145
   \       0x1A   0xD025             BEQ.N    ??emberAfPluginZllCommissioningCommonStackStatu_2
    315                // We don't do anything here for a network down.
    316              } else {
    317                emberAfAppPrintln("%p%p%p: status = %X, flags = %X",
    318                                  "Error: ",
    319                                  "Touch linking failed: ",
    320                                  "joining failed",
    321                                  status, emAfZllFlags);
   \       0x1C   0x9002             STR      R0,[SP, #+8]
   \       0x1E   0x....             LDR.N    R0,??DataTable7_13
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x9401             STR      R4,[SP, #+4]
   \       0x24   0x....             LDR.N    R3,??DataTable7_14
   \       0x26   0x....             LDR.N    R2,??DataTable7_9
   \       0x28   0x....             LDR.N    R1,??DataTable7_15
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0x....'....        BL       emberAfPrintln
   \       0x30   0xBD1F             POP      {R0-R4,PC}
    322          #ifdef EMBER_AF_PLUGIN_ZLL_COMMISSIONING_CLIENT
    323                if (!touchLinkTarget()) {
    324                  emAfZllAbortTouchLink(EMBER_AF_ZLL_JOINING_FAILED);
    325                }
    326          #endif
    327              }
    328            } else if (resettingToFactoryNew()) {
   \                     ??emberAfPluginZllCommissioningCommonStackStatu_0: (+1)
   \       0x32   0x0580             LSLS     R0,R0,#+22
   \       0x34   0xD504             BPL.N    ??emberAfPluginZllCommissioningCommonStackStatu_3
    329              if (status == EMBER_NETWORK_DOWN) {
   \       0x36   0x2C91             CMP      R4,#+145
   \       0x38   0xD116             BNE.N    ??emberAfPluginZllCommissioningCommonStackStatu_2
    330                completeResetToFactoryNew();
   \       0x3A   0x....'....        BL       completeResetToFactoryNew
   \       0x3E   0xBD1F             POP      {R0-R4,PC}
    331              }
    332            } else {
    333              // Here we catch all fresh non-ZLL network joins, and set the ZLL state accordingly.
    334              EmberTokTypeStackZllData token;
    335              emberZllGetTokenStackZllData(&token);
   \                     ??emberAfPluginZllCommissioningCommonStackStatu_3: (+1)
   \       0x40   0x....'....        BL       ?Subroutine0
    336          
    337              if (status == EMBER_NETWORK_UP && (token.bitmask & EMBER_ZLL_STATE_FACTORY_NEW)) {
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x44   0x2C90             CMP      R4,#+144
   \       0x46   0xD10F             BNE.N    ??emberAfPluginZllCommissioningCommonStackStatu_2
   \       0x48   0x9800             LDR      R0,[SP, #+0]
   \       0x4A   0x07C1             LSLS     R1,R0,#+31
   \       0x4C   0xD50C             BPL.N    ??emberAfPluginZllCommissioningCommonStackStatu_2
    338                // When either a router or an end device joins a non-ZLL network, it is
    339                // no longer factory new.  On a non-ZLL network, ZLL devices that are
    340                // normally address assignment capable do not have free network or group
    341                // addresses nor do they have a range of group addresses for themselves.
    342                // (Note, to ensure that ZLL devices will always operate as ZigBee 3.0 applications,
    343                // we need to set the ZLL profile interop bit even when the application
    344                // joins a classical ZigBee network. This way, if the device is stolen from
    345                // a classical ZigBee network to a ZLL network, it will operate as a
    346                // ZigBee 3.0 device. This is now set at plugin initialization time.)
    347                token.bitmask &= ~EMBER_ZLL_STATE_FACTORY_NEW;
   \       0x4E   0x0842             LSRS     R2,R0,#+1
   \       0x50   0x0052             LSLS     R2,R2,#+1
   \       0x52   0x9200             STR      R2,[SP, #+0]
    348                token.freeNodeIdMin = token.freeNodeIdMax = EMBER_ZLL_NULL_NODE_ID;
   \       0x54   0x2100             MOVS     R1,#+0
   \       0x56   0x9101             STR      R1,[SP, #+4]
    349                token.myGroupIdMin = EMBER_ZLL_NULL_GROUP_ID;
   \       0x58   0x9102             STR      R1,[SP, #+8]
    350                token.freeGroupIdMin = token.freeGroupIdMax = EMBER_ZLL_NULL_GROUP_ID;
   \       0x5A   0xF8AD 0x100C      STRH     R1,[SP, #+12]
    351                emberZllSetTokenStackZllData(&token);
   \       0x5E   0x4668             MOV      R0,SP
   \       0x60   0x....'....        BL       emberZllSetTokenStackZllData
    352                emberZllSetNonZllNetwork();
   \       0x64   0x....'....        BL       emberZllSetNonZllNetwork
    353              }
    354              // Otherwise, we just ignore the status, for example, a network up
    355              // from a rejoin or a join at startup.
    356            }
    357          }
   \                     ??emberAfPluginZllCommissioningCommonStackStatu_2: (+1)
   \       0x68   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x....'....        DC32     emAfZllFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     emAfZllNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     emAfCurrentZigbeeProNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x0210'8800        DC32     0x2108800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x05EF'7000        DC32     0x5ef7000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x5A 0x6C          DC8 "ZllCommInit - device is not joined to a network"
   \              0x6C 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x2D 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6A 0x6F    
   \              0x69 0x6E    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x61 0x20    
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x52 0x65          DC8 "Resetting to factory new"
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x66    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x0000'0000        DC32 0
   \        0x4   0x0F 0xC0          DC8 15, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204
   \              0xC1 0xC2    
   \              0xC3 0xC4    
   \              0xC5 0xC6    
   \              0xC7 0xC8    
   \              0xC9 0xCA    
   \              0xCB 0xCC    
   \       0x12   0xCD 0xCE          DC8 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217
   \              0xCF 0xD0    
   \              0xD1 0xD2    
   \              0xD3 0xD4    
   \              0xD5 0xD6    
   \              0xD7 0xD8    
   \              0xD9         
   \       0x1F   0xDA 0xDB          DC8 218, 219, 220, 221, 222, 223, 0, 0, 0
   \              0xDC 0xDD    
   \              0xDE 0xDF    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x25 0x70          DC8 "%p%p failed 0x%x"
   \              0x25 0x70    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x45 0x72          DC8 "Error: "
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x47 0x65          DC8 "Generating random key"
   \              0x6E 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x61 0x6E    
   \              0x64 0x6F    
   \              0x6D 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x49 0x6E          DC8 "Initializing security"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x75 0x72    
   \              0x69 0x74    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x45 0x72          DC8 "Error: Failed to leave network, status: 0x%X"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x6C    
   \              0x65 0x61    
   \              0x76 0x65    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x25 0x70          DC8 "%p%p%p: status = %X, flags = %X"
   \              0x25 0x70    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x58 0x2C    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x73    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x58 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x54 0x6F          DC8 "Touch linking failed: "
   \              0x75 0x63    
   \              0x68 0x20    
   \              0x6C 0x69    
   \              0x6E 0x6B    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x6A 0x6F          DC8 "joining failed"
   \              0x69 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \        0xF   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   completeResetToFactoryNew
         8   -> emberAfGroupsClusterClearGroupTableCallback
         8   -> emberAfPluginZllCommissioningCommonInitCallback
         8   -> emberAfPluginZllCommissioningCommonResetToFactoryNewCallback
         8   -> emberAfPrintln
         8   -> emberAfResetAttributes
         8   -> emberAfScenesClusterClearSceneTableCallback
      24   emAfZllAmFactoryNew
        24   -> emberZllGetTokenStackZllData
       8   emAfZllGetLogicalNodeType
         8   -> emberAfGetNodeType
      40   emAfZllTouchLinkComplete
        40   -> emberAfGetNetworkParameters
        40   -> emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback
        40   -> halCommonMemMove
      24   emberAfPluginZllCommissioningCommonInitCallback
        24   -> emAfZllInitializeRadio
        24   -> emAfZllStealingAllowed
        24   -> emberAfPrintln
        24   -> emberAfZllSetInitialSecurityState
        24   -> emberSetRadioPower
        24   -> emberSetZllNodeType
        24   -> emberSetZllPrimaryChannelMask
        24   -> emberSetZllSecondaryChannelMask
        24   -> emberZllGetTokenStackZllData
        24   -> emberZllSetPolicy
        24   -> emberZllSetTokenStackZllData
       0   emberAfPluginZllCommissioningCommonNcpInitCallback
      24   emberAfPluginZllCommissioningCommonStackStatusCallback
        24   -> completeResetToFactoryNew
        24   -> emAfZllTouchLinkComplete
        24   -> emberAfPrintln
        24   -> emberZllGetTokenStackZllData
        24   -> emberZllSetNonZllNetwork
        24   -> emberZllSetTokenStackZllData
       8   emberAfZllResetToFactoryNew
         0   -> completeResetToFactoryNew
         8   -> emberAfPrintln
         8   -> emberLeaveNetwork
         8   -> emberZllClearTokens
      80   emberAfZllSetInitialSecurityState
        80   -> __aeabi_memcpy4
        80   -> emberAfNetworkState
        80   -> emberAfPluginZllCommissioningCommonInitialSecurityStateCallback
        80   -> emberAfPrintln
        80   -> emberGenerateRandomKey
        80   -> emberZllSetInitialSecurityState
       0   emberAfZllTouchLinkInProgress


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       6  ?Subroutine0
      48  ?_0
      28  ?_1
      16  ?_10
      40  ?_2
      20  ?_3
       8  ?_4
      24  ?_5
      24  ?_6
      48  ?_7
      32  ?_8
      24  ?_9
      44  completeResetToFactoryNew
      16  emAfZllAmFactoryNew
       2  emAfZllFlags
      38  emAfZllGetLogicalNodeType
      44  emAfZllNetwork
      62  emAfZllTouchLinkComplete
     100  emberAfPluginZllCommissioningCommonInitCallback
       2  emberAfPluginZllCommissioningCommonNcpInitCallback
     106  emberAfPluginZllCommissioningCommonStackStatusCallback
      40  emberAfZllResetToFactoryNew
      82  emberAfZllSetInitialSecurityState
      14  emberAfZllTouchLinkInProgress

 
  46 bytes in section .bss
 312 bytes in section .rodata
 574 bytes in section .text
 
 574 bytes of CODE  memory
 312 bytes of CONST memory
  46 bytes of DATA  memory

Errors: none
Warnings: none
