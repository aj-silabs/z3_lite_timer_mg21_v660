###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:53
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cache.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW44E9.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cache.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"ssl_cache.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0
#        -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\ssl_cache.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\ssl_cache.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_cache.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  SSL session cache implementation
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           * These session callbacks use a simple chained list
     35           * to store and retrieve the session information.
     36           */
     37          
     38          #if !defined(MBEDTLS_CONFIG_FILE)
     39          #include "mbedtls/config.h"
     40          #else
     41          #include MBEDTLS_CONFIG_FILE
     42          #endif
     43          
     44          #if defined(MBEDTLS_SSL_CACHE_C)
     45          
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #include <stdlib.h>
     50          #define mbedtls_calloc    calloc
     51          #define mbedtls_free      free
     52          #endif
     53          
     54          #include "mbedtls/ssl_cache.h"
     55          
     56          #include <string.h>
     57          
     58          void mbedtls_ssl_cache_init( mbedtls_ssl_cache_context *cache )
     59          {
     60              memset( cache, 0, sizeof( mbedtls_ssl_cache_context ) );
     61          
     62              cache->timeout = MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT;
     63              cache->max_entries = MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES;
     64          
     65          #if defined(MBEDTLS_THREADING_C)
     66              mbedtls_mutex_init( &cache->mutex );
     67          #endif
     68          }
     69          
     70          int mbedtls_ssl_cache_get( void *data, mbedtls_ssl_session *session )
     71          {
     72              int ret = 1;
     73          #if defined(MBEDTLS_HAVE_TIME)
     74              mbedtls_time_t t = mbedtls_time( NULL );
     75          #endif
     76              mbedtls_ssl_cache_context *cache = (mbedtls_ssl_cache_context *) data;
     77              mbedtls_ssl_cache_entry *cur, *entry;
     78          
     79          #if defined(MBEDTLS_THREADING_C)
     80              if( mbedtls_mutex_lock( &cache->mutex ) != 0 )
     81                  return( 1 );
     82          #endif
     83          
     84              cur = cache->chain;
     85              entry = NULL;
     86          
     87              while( cur != NULL )
     88              {
     89                  entry = cur;
     90                  cur = cur->next;
     91          
     92          #if defined(MBEDTLS_HAVE_TIME)
     93                  if( cache->timeout != 0 &&
     94                      (int) ( t - entry->timestamp ) > cache->timeout )
     95                      continue;
     96          #endif
     97          
     98                  if( session->ciphersuite != entry->session.ciphersuite ||
     99                      session->compression != entry->session.compression ||
    100                      session->id_len != entry->session.id_len )
    101                      continue;
    102          
    103                  if( memcmp( session->id, entry->session.id,
    104                              entry->session.id_len ) != 0 )
    105                      continue;
    106          
    107                  memcpy( session->master, entry->session.master, 48 );
    108          
    109                  session->verify_result = entry->session.verify_result;
    110          
    111          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    112                  /*
    113                   * Restore peer certificate (without rest of the original chain)
    114                   */
    115                  if( entry->peer_cert.p != NULL )
    116                  {
    117                      if( ( session->peer_cert = mbedtls_calloc( 1,
    118                                           sizeof(mbedtls_x509_crt) ) ) == NULL )
    119                      {
    120                          ret = 1;
    121                          goto exit;
    122                      }
    123          
    124                      mbedtls_x509_crt_init( session->peer_cert );
    125                      if( mbedtls_x509_crt_parse( session->peer_cert, entry->peer_cert.p,
    126                                          entry->peer_cert.len ) != 0 )
    127                      {
    128                          mbedtls_free( session->peer_cert );
    129                          session->peer_cert = NULL;
    130                          ret = 1;
    131                          goto exit;
    132                      }
    133                  }
    134          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    135          
    136                  ret = 0;
    137                  goto exit;
    138              }
    139          
    140          exit:
    141          #if defined(MBEDTLS_THREADING_C)
    142              if( mbedtls_mutex_unlock( &cache->mutex ) != 0 )
    143                  ret = 1;
    144          #endif
    145          
    146              return( ret );
    147          }
    148          
    149          int mbedtls_ssl_cache_set( void *data, const mbedtls_ssl_session *session )
    150          {
    151              int ret = 1;
    152          #if defined(MBEDTLS_HAVE_TIME)
    153              mbedtls_time_t t = mbedtls_time( NULL ), oldest = 0;
    154              mbedtls_ssl_cache_entry *old = NULL;
    155          #endif
    156              mbedtls_ssl_cache_context *cache = (mbedtls_ssl_cache_context *) data;
    157              mbedtls_ssl_cache_entry *cur, *prv;
    158              int count = 0;
    159          
    160          #if defined(MBEDTLS_THREADING_C)
    161              if( ( ret = mbedtls_mutex_lock( &cache->mutex ) ) != 0 )
    162                  return( ret );
    163          #endif
    164          
    165              cur = cache->chain;
    166              prv = NULL;
    167          
    168              while( cur != NULL )
    169              {
    170                  count++;
    171          
    172          #if defined(MBEDTLS_HAVE_TIME)
    173                  if( cache->timeout != 0 &&
    174                      (int) ( t - cur->timestamp ) > cache->timeout )
    175                  {
    176                      cur->timestamp = t;
    177                      break; /* expired, reuse this slot, update timestamp */
    178                  }
    179          #endif
    180          
    181                  if( memcmp( session->id, cur->session.id, cur->session.id_len ) == 0 )
    182                      break; /* client reconnected, keep timestamp for session id */
    183          
    184          #if defined(MBEDTLS_HAVE_TIME)
    185                  if( oldest == 0 || cur->timestamp < oldest )
    186                  {
    187                      oldest = cur->timestamp;
    188                      old = cur;
    189                  }
    190          #endif
    191          
    192                  prv = cur;
    193                  cur = cur->next;
    194              }
    195          
    196              if( cur == NULL )
    197              {
    198          #if defined(MBEDTLS_HAVE_TIME)
    199                  /*
    200                   * Reuse oldest entry if max_entries reached
    201                   */
    202                  if( count >= cache->max_entries )
    203                  {
    204                      if( old == NULL )
    205                      {
    206                          ret = 1;
    207                          goto exit;
    208                      }
    209          
    210                      cur = old;
    211                  }
    212          #else /* MBEDTLS_HAVE_TIME */
    213                  /*
    214                   * Reuse first entry in chain if max_entries reached,
    215                   * but move to last place
    216                   */
    217                  if( count >= cache->max_entries )
    218                  {
    219                      if( cache->chain == NULL )
    220                      {
    221                          ret = 1;
    222                          goto exit;
    223                      }
    224          
    225                      cur = cache->chain;
    226                      cache->chain = cur->next;
    227                      cur->next = NULL;
    228                      prv->next = cur;
    229                  }
    230          #endif /* MBEDTLS_HAVE_TIME */
    231                  else
    232                  {
    233                      /*
    234                       * max_entries not reached, create new entry
    235                       */
    236                      cur = mbedtls_calloc( 1, sizeof(mbedtls_ssl_cache_entry) );
    237                      if( cur == NULL )
    238                      {
    239                          ret = 1;
    240                          goto exit;
    241                      }
    242          
    243                      if( prv == NULL )
    244                          cache->chain = cur;
    245                      else
    246                          prv->next = cur;
    247                  }
    248          
    249          #if defined(MBEDTLS_HAVE_TIME)
    250                  cur->timestamp = t;
    251          #endif
    252              }
    253          
    254              memcpy( &cur->session, session, sizeof( mbedtls_ssl_session ) );
    255          
    256          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    257              /*
    258               * If we're reusing an entry, free its certificate first
    259               */
    260              if( cur->peer_cert.p != NULL )
    261              {
    262                  mbedtls_free( cur->peer_cert.p );
    263                  memset( &cur->peer_cert, 0, sizeof(mbedtls_x509_buf) );
    264              }
    265          
    266              /*
    267               * Store peer certificate
    268               */
    269              if( session->peer_cert != NULL )
    270              {
    271                  cur->peer_cert.p = mbedtls_calloc( 1, session->peer_cert->raw.len );
    272                  if( cur->peer_cert.p == NULL )
    273                  {
    274                      ret = 1;
    275                      goto exit;
    276                  }
    277          
    278                  memcpy( cur->peer_cert.p, session->peer_cert->raw.p,
    279                          session->peer_cert->raw.len );
    280                  cur->peer_cert.len = session->peer_cert->raw.len;
    281          
    282                  cur->session.peer_cert = NULL;
    283              }
    284          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    285          
    286              ret = 0;
    287          
    288          exit:
    289          #if defined(MBEDTLS_THREADING_C)
    290              if( mbedtls_mutex_unlock( &cache->mutex ) != 0 )
    291                  ret = 1;
    292          #endif
    293          
    294              return( ret );
    295          }
    296          
    297          #if defined(MBEDTLS_HAVE_TIME)
    298          void mbedtls_ssl_cache_set_timeout( mbedtls_ssl_cache_context *cache, int timeout )
    299          {
    300              if( timeout < 0 ) timeout = 0;
    301          
    302              cache->timeout = timeout;
    303          }
    304          #endif /* MBEDTLS_HAVE_TIME */
    305          
    306          void mbedtls_ssl_cache_set_max_entries( mbedtls_ssl_cache_context *cache, int max )
    307          {
    308              if( max < 0 ) max = 0;
    309          
    310              cache->max_entries = max;
    311          }
    312          
    313          void mbedtls_ssl_cache_free( mbedtls_ssl_cache_context *cache )
    314          {
    315              mbedtls_ssl_cache_entry *cur, *prv;
    316          
    317              cur = cache->chain;
    318          
    319              while( cur != NULL )
    320              {
    321                  prv = cur;
    322                  cur = cur->next;
    323          
    324                  mbedtls_ssl_session_free( &prv->session );
    325          
    326          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    327                  mbedtls_free( prv->peer_cert.p );
    328          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    329          
    330                  mbedtls_free( prv );
    331              }
    332          
    333          #if defined(MBEDTLS_THREADING_C)
    334              mbedtls_mutex_free( &cache->mutex );
    335          #endif
    336              cache->chain = NULL;
    337          }
    338          
    339          #endif /* MBEDTLS_SSL_CACHE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
