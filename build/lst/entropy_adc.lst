###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:58
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\entropy_adc.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW6DB7.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\entropy_adc.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"entropy_adc.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\entropy_adc.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\entropy_adc.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\entropy_adc.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Collect entropy from the ADC on Silicon Labs devices.
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: APACHE-2.0
     10           *
     11           * This software is subject to an open source license and is distributed by
     12           * Silicon Laboratories Inc. pursuant to the terms of the Apache License,
     13           * Version 2.0 available at https://www.apache.org/licenses/LICENSE-2.0.
     14           * Such terms and conditions may be further supplemented by the Silicon Labs
     15           * Master Software License Agreement (MSLA) available at www.silabs.com and its
     16           * sections applicable to open source software.
     17           *
     18           ******************************************************************************/
     19          
     20          #if !defined(MBEDTLS_CONFIG_FILE)
     21          #include "mbedtls/config.h"
     22          #else
     23          #include MBEDTLS_CONFIG_FILE
     24          #endif
     25          
     26          #if defined(MBEDTLS_ENTROPY_ADC_C)
     27          
     28          #include "em_device.h"
     29          
     30          #if defined(ADC_PRESENT)
     31          
     32          #if defined(_ADC_SINGLECTRLX_VREFSEL_VENTROPY)
     33          
     34          #include "entropy_adc.h"
     35          #include <string.h>
     36          #include <stdint.h>
     37          
     38          #define VIN_ATTENUATION_FACTOR      (1)
     39          
     40          void mbedtls_entropy_adc_init( mbedtls_entropy_adc_context *ctx )
     41          {
     42              memset(ctx, 0, sizeof(mbedtls_entropy_adc_context));
     43          }
     44          
     45          int mbedtls_entropy_adc_set_instance( mbedtls_entropy_adc_context *ctx,
     46          				       unsigned int adc_inst)
     47          {
     48              /* Base the ADC configuration on the default setup. */
     49              ADC_Init_TypeDef       init       = ADC_INIT_DEFAULT;
     50              ADC_InitSingle_TypeDef initsingle = ADC_INITSINGLE_DEFAULT;
     51          
     52              if (adc_inst == 0)
     53              {
     54                  ctx->adc = ADC0;
     55                  ctx->clk = cmuClock_ADC0;
     56              }
     57              else
     58              {
     59          #if ADC_COUNT==2
     60                  if (adc_inst == 1)
     61                  {
     62                      ctx->adc = ADC1;
     63                      ctx->clk = cmuClock_ADC1;
     64                  }
     65          #else
     66                  /* Invalid ADC instance, set ADC pointer to 0 and return error. */
     67                  ctx->adc = 0;
     68                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
     69          #endif
     70              }
     71          
     72              /* Enable HFPER clock */
     73              CMU_ClockEnable(cmuClock_HFPER, true);
     74          
     75              /* Enable ADC clock */
     76              CMU_ClockEnable(ctx->clk, true);
     77          
     78              /* Initialize timebases */
     79              init.timebase = ADC_TimebaseCalc(0);
     80            
     81              /* Set ADC prescaler to generate the conversion clock (adc_clk_sar) and the
     82                 acquisition clock (adc_clk_samp) with cycle time longer than the minimal
     83                 acquisition time of 187.5ns, i.e. 1/187.5ns = 5333333 Hz clock frequency.
     84                 Use the desired ADC clock frequency of 5000000 Hz to make sure the cycle
     85                 time is longer than 187.5ns. Then we can use acquisition time of 1 cycle.
     86              */
     87              init.prescale = ADC_PrescaleCalc(5000000, 0);
     88            
     89              /* Make sure warmup mode is normal, i.e. warms up before each conversion
     90                 which results in best entropy. */
     91              init.warmUpMode = adcWarmupNormal;
     92          
     93              ADC_Init(ctx->adc, &init);
     94          
     95              /* Set input to the builtin entropy source. */
     96              initsingle.reference   = adcRefVEntropy;
     97              initsingle.resolution  = adcRes12Bit;
     98              initsingle.diff        = true;
     99              initsingle.posSel      = adcPosSelVSS;
    100              initsingle.negSel      = adcNegSelVSS;
    101              initsingle.acqTime     = adcAcqTime1;
    102          
    103              ADC_InitSingle(ctx->adc, &initsingle);
    104          
    105              /* Set attenuation factor to 1 for optimal entropy. */
    106              ctx->adc->SINGLECTRLX &= ~_ADC_SINGLECTRLX_VINATT_MASK;
    107              ctx->adc->SINGLECTRLX |= VIN_ATTENUATION_FACTOR << _ADC_SINGLECTRLX_VINATT_SHIFT;
    108          
    109              return 0;
    110          }
    111          
    112          void mbedtls_entropy_adc_free( mbedtls_entropy_adc_context *ctx )
    113          {
    114              if ( ctx->adc != 0 )
    115              {
    116                  /* Reset ADC. */
    117                  ADC_Reset(ctx->adc);
    118          
    119                  /* Disable ADC clock. */
    120                  CMU_ClockEnable(ctx->clk, false);
    121              }
    122              /* Clear context structure. */
    123              memset(ctx, 0, sizeof(mbedtls_entropy_adc_context));
    124          }
    125          
    126          /*
    127           * \brief Get one sample from the ADC.
    128           *
    129           * \return ADC sample value
    130           */
    131          static uint32_t mbedtls_entropy_adc_sample_get(mbedtls_entropy_adc_context *ctx)
    132          {
    133              ADC_Start(ctx->adc, adcStartSingle);
    134            
    135              /* Wait for ADC conversion to complete. */
    136              while ( ( ctx->adc->STATUS & ADC_STATUS_SINGLEDV ) == 0 ){}
    137            
    138              /* ADC has finished conversion, read and return sample. */
    139              return ADC_DataSingleGet(ctx->adc);
    140          }
    141          
    142          /*
    143           * \brief Jenkins hash function
    144           *
    145           * \details Takes data buffer of any size and hashes it to a 32-bit data.
    146           *
    147           * \param buf    Pointer to data buffer to hash.
    148           * \param len    Size of data buffer in bytes.
    149           *
    150           * \return       The 32 bits hash value.
    151           */
    152          static uint32_t mbedtls_jenkins_hash(uint8_t *buf, unsigned int len)
    153          {
    154              uint32_t hash, i;
    155          
    156              /* Jenkins hash algorithm */
    157              for (hash = i = 0; i < len; ++i)
    158              {
    159                  hash += buf[i];
    160                  hash += (hash << 10);
    161                  hash ^= (hash >> 6);
    162              }
    163              hash += (hash << 3);
    164              hash ^= (hash >> 11);
    165              hash += (hash << 15);
    166          
    167              return hash;
    168          }
    169          
    170          int mbedtls_entropy_adc_poll( mbedtls_entropy_adc_context *ctx,
    171                                        unsigned char *output, size_t len, size_t *olen )
    172          {
    173              uint32_t sample, entropy, hash, i;
    174          
    175              *olen = len;
    176          
    177              /* Generate 32-bit words and apply Jenkins hash whitening function to
    178                 each word. */
    179              while ( len > 0 )
    180              {
    181                  /* Generate 10 samples and extract 3 bits from each, then finally
    182                     extract 2 bits from one last sample to generate one 32-bit word.*/
    183                  entropy = 0;
    184                  for (i=0; i<10; i++)
    185                  {
    186                      sample = mbedtls_entropy_adc_sample_get(ctx);
    187                      entropy |= (sample & 0x7) << (i*3);
    188                  }
    189                  sample = mbedtls_entropy_adc_sample_get(ctx);
    190                  entropy |= (sample & 0x3) << 30;
    191          
    192                  /* Jenkins hash. */
    193                  hash = mbedtls_jenkins_hash((uint8_t*)&entropy, sizeof(entropy));
    194          
    195                  /* Copy to output buffer and update parsms. */
    196                  i = len > sizeof(hash) ? sizeof(hash) : len;
    197                  memcpy(output, &hash, i);
    198          
    199                  output += i;
    200                  len    -= i;
    201              }
    202          
    203              return 0;
    204          }
    205          
    206          #endif /* #if defined(_ADC_SINGLECTRLX_VREFSEL_VENTROPY) */
    207          
    208          #endif /* #if defined(ADC_PRESENT) */
    209          
    210          #endif /* #if defined(MBEDTLS_ENTROPY_ADC_C) */


 
 
 0 bytes of memory

Errors: none
Warnings: none
