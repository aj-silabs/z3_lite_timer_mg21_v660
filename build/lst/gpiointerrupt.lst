###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:02
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emdrv\gpiointerrupt\src\gpiointerrupt.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW7D11.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emdrv\gpiointerrupt\src\gpiointerrupt.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"gpiointerrupt.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emdrv\gpiointerrupt\src\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\gpiointerrupt.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\gpiointerrupt.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\emdrv\gpiointerrupt\src\gpiointerrupt.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief GPIOINT API implementation
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          #include "em_gpio.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x408A             LSLS     R2,R2,R1
   \        0xC   0x....             LDR.N    R3,??DataTable5  ;; 0xe000e100
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_ClearPendingIRQ(IRQn_Type)
   \                     __NVIC_ClearPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??__NVIC_ClearPendingIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x408A             LSLS     R2,R2,R1
   \        0xC   0x....             LDR.N    R3,??DataTable5_1  ;; 0xe000e280
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \                     ??__NVIC_ClearPendingIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return
     19          #include "em_core.h"
     20          #include "gpiointerrupt.h"
     21          #include "em_assert.h"
     22          #include "em_common.h"
     23          
     24          /*******************************************************************************
     25           ********************************   MACROS   ***********************************
     26           ******************************************************************************/
     27          
     28          /*******************************************************************************
     29           *******************************   STRUCTS   ***********************************
     30           ******************************************************************************/
     31          
     32          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     33          
     34          typedef struct {
     35            /* Pin interrupt number in range of 0 to 15 */
     36            uint32_t intNo;
     37          
     38            /* Pointer to the callback function */
     39            GPIOINT_IrqCallbackPtr_t callback;
     40          } GPIOINT_CallbackDesc_t;
     41          
     42          /*******************************************************************************
     43           ********************************   GLOBALS   **********************************
     44           ******************************************************************************/
     45          
     46          /* Array of user callbacks. One for each pin interrupt number. */

   \                                 In section .bss, align 4
     47          static GPIOINT_IrqCallbackPtr_t gpioCallbacks[16] = { 0 };
   \                     gpioCallbacks:
   \        0x0                      DS8 64
     48          
     49          /*******************************************************************************
     50           ******************************   PROTOTYPES   *********************************
     51           ******************************************************************************/
     52          static void GPIOINT_IRQDispatcher(uint32_t iflags);
     53          
     54          /** @endcond */
     55          
     56          /*******************************************************************************
     57           ***************************   GLOBAL FUNCTIONS   ******************************
     58           ******************************************************************************/
     59          
     60          /***************************************************************************//**
     61           * @brief
     62           *   Initialization of GPIOINT module.
     63           *
     64           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void GPIOINT_Init(void)
     66          {
   \                     GPIOINT_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     67            NVIC_ClearPendingIRQ(GPIO_ODD_IRQn);
   \        0x2   0x2019             MOVS     R0,#+25
   \        0x4   0x....'....        BL       __NVIC_ClearPendingIRQ
     68            NVIC_EnableIRQ(GPIO_ODD_IRQn);
   \        0x8   0x2019             MOVS     R0,#+25
   \        0xA   0x....'....        BL       __NVIC_EnableIRQ
     69            NVIC_ClearPendingIRQ(GPIO_EVEN_IRQn);
   \        0xE   0x201A             MOVS     R0,#+26
   \       0x10   0x....'....        BL       __NVIC_ClearPendingIRQ
     70            NVIC_EnableIRQ(GPIO_EVEN_IRQn);
   \       0x14   0x201A             MOVS     R0,#+26
   \       0x16   0xE8BD 0x4002      POP      {R1,LR}
   \       0x1A   0x....             B.N      __NVIC_EnableIRQ
     71          }
     72          
     73          /***************************************************************************//**
     74           * @brief
     75           *   Registers user callback for given pin interrupt number.
     76           *
     77           * @details
     78           *   Use this function to register a callback which shall be called upon
     79           *   interrupt generated for a given pin interrupt number.
     80           *   Interrupt itself must be configured externally. Function overwrites previously
     81           *   registered callback.
     82           *
     83           * @param[in] pin
     84           *   Pin number for the callback.
     85           * @param[in] callbackPtr
     86           *   A pointer to callback function.
     87           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          void GPIOINT_CallbackRegister(uint8_t intNo, GPIOINT_IrqCallbackPtr_t callbackPtr)
     89          {
   \                     GPIOINT_CallbackRegister: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     90            CORE_ATOMIC_SECTION(
     91              /* Dispatcher is used */
     92              gpioCallbacks[intNo] = callbackPtr;
     93              )
   \        0x6   0x....'....        BL       CORE_EnterAtomic
   \        0xA   0x....             LDR.N    R1,??DataTable5_2
   \        0xC   0xF841 0x5024      STR      R5,[R1, R4, LSL #+2]
   \       0x10   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \       0x14   0x....'....        B.W      CORE_ExitAtomic
     94          }
     95          
     96          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     97          
     98          /***************************************************************************//**
     99           * @brief
    100           *   Function calls users callback for registered pin interrupts.
    101           *
    102           * @details
    103           *   This function is called when GPIO interrupts are handled by the dispatcher.
    104           *   Function gets even or odd interrupt flags and calls user callback
    105           *   registered for that pin. Function iterates on flags starting from MSB.
    106           *
    107           * @param iflags
    108           *  Interrupt flags which shall be handled by the dispatcher.
    109           *
    110           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    111          static void GPIOINT_IRQDispatcher(uint32_t iflags)
    112          {
   \                     GPIOINT_IRQDispatcher: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x....             LDR.N    R5,??DataTable5_2
   \        0x6   0xE00C             B.N      ??GPIOINT_IRQDispatcher_0
    113            uint32_t irqIdx;
    114            GPIOINT_IrqCallbackPtr_t callback;
    115          
    116            /* check for all flags set in IF register */
    117            while (iflags != 0U) {
    118              irqIdx = SL_CTZ(iflags);
   \                     ??GPIOINT_IRQDispatcher_1: (+1)
   \        0x8   0xFA94 0xF0A4      RBIT     R0,R4
   \        0xC   0xFAB0 0xF080      CLZ      R0,R0
    119          
    120              /* clear flag*/
    121              iflags &= ~(1 << irqIdx);
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0x4081             LSLS     R1,R1,R0
   \       0x14   0x438C             BICS     R4,R4,R1
    122          
    123              callback = gpioCallbacks[irqIdx];
   \       0x16   0xF855 0x1020      LDR      R1,[R5, R0, LSL #+2]
    124              if (callback) {
   \       0x1A   0x000A             MOVS     R2,R1
   \       0x1C   0xBF1C             ITT      NE 
    125                /* call user callback */
    126                callback(irqIdx);
   \       0x1E   0xB2C0             UXTBNE   R0,R0
   \       0x20   0x4788             BLXNE    R1
    127              }
    128            }
   \                     ??GPIOINT_IRQDispatcher_0: (+1)
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD1F0             BNE.N    ??GPIOINT_IRQDispatcher_1
    129          }
   \       0x26   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    130          
    131          /***************************************************************************//**
    132           * @brief
    133           *   GPIO EVEN interrupt handler. Interrupt handler clears all IF even flags and
    134           *   call the dispatcher passing the flags which triggered the interrupt.
    135           *
    136           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    137          void GPIO_EVEN_IRQHandler(void)
    138          {
    139            uint32_t iflags;
    140          
    141            /* Get all even interrupts. */
    142            iflags = GPIO_IntGetEnabled() & 0x00005555;
   \                     GPIO_EVEN_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003c420
   \        0x2   0x6848             LDR      R0,[R1, #+4]
   \        0x4   0x6809             LDR      R1,[R1, #+0]
    143          
    144            /* Clean only even interrupts. */
    145            GPIO_IntClear(iflags);
   \        0x6   0x....             LDR.N    R2,??DataTable5_4  ;; 0x4003e420
   \        0x8   0x4008             ANDS     R0,R0,R1
   \        0xA   0xF245 0x5155      MOVW     R1,#+21845
   \        0xE   0x....             B.N      ?Subroutine0
    146          
    147            GPIOINT_IRQDispatcher(iflags);
    148          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4008             ANDS     R0,R1,R0
   \        0x2   0x6010             STR      R0,[R2, #+0]
   \        0x4   0x....             B.N      GPIOINT_IRQDispatcher
    149          
    150          /***************************************************************************//**
    151           * @brief
    152           *   GPIO ODD interrupt handler. Interrupt handler clears all IF odd flags and
    153           *   call the dispatcher passing the flags which triggered the interrupt.
    154           *
    155           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    156          void GPIO_ODD_IRQHandler(void)
    157          {
    158            uint32_t iflags;
    159          
    160            /* Get all odd interrupts. */
    161            iflags = GPIO_IntGetEnabled() & 0x0000AAAA;
   \                     GPIO_ODD_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003c420
   \        0x2   0x6848             LDR      R0,[R1, #+4]
   \        0x4   0x6809             LDR      R1,[R1, #+0]
    162          
    163            /* Clean only odd interrupts. */
    164            GPIO_IntClear(iflags);
   \        0x6   0x....             LDR.N    R2,??DataTable5_4  ;; 0x4003e420
   \        0x8   0x4008             ANDS     R0,R0,R1
   \        0xA   0xF64A 0x21AA      MOVW     R1,#+43690
   \        0xE                      REQUIRE ?Subroutine0
   \        0xE                      ;; // Fall through to label ?Subroutine0
    165          
    166            GPIOINT_IRQDispatcher(iflags);
    167          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     gpioCallbacks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x4003'C420        DC32     0x4003c420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x4003'E420        DC32     0x4003e420
    168          
    169          /** @endcond */
    170          
    171          /** @} (end addtogroup GPIOINT */
    172          /** @} (end addtogroup emdrv) */
    173          
    174          /* *INDENT-OFF* */
    175          /******** THE REST OF THE FILE IS DOCUMENTATION ONLY !**********************//**
    176           * @addtogroup emdrv
    177           * @{
    178           * @addtogroup GPIOINT
    179           * @brief GPIOINT General Purpose Input/Output Interrupt dispatcher
    180           * @{
    181          
    182             @details
    183             The source files for the GPIO interrupt dispatcher library resides in the
    184             emdrv/gpiointerrupt folder, and are named gpiointerrupt.c and gpiointerrupt.h.
    185          
    186             @li @ref gpioint_intro
    187             @li @ref gpioint_api
    188             @li @ref gpioint_example
    189          
    190             @n @section gpioint_intro Introduction
    191           * EFM32/EZR32/EFR32 has two GPIO interrupts lines, Odd and Even. If more
    192           * than two interrupts are used then interrupt routine must dispatch from a callback
    193           * register. This module provides small dispatcher for both GPIO interrupts enabling
    194           * handling of up to 16 GPIO pin interrupts.
    195           *
    196           * It is up to the user to configure and enable interrupt on given pin. This can be done
    197           * using the GPIO library (emlib). This module handles the dispatch register and clearing of
    198           * interrupt flags.
    199           *
    200           * In order to use this dispatcher, it has to be initialized first by
    201           * calling GPIOINT_Init(). Then each pin interrupt number must be configured by first
    202           * registering the callback function for given interrupt number and then configure and
    203           * enabling the interrupt number in the GPIO module.
    204          
    205             @n @section gpioint_api The API
    206             This section contain brief descriptions of the functions in the API. You will
    207             find detailed information on parameters by clicking on the hyperlinked function names.
    208          
    209             Your application code must include one header file: @em gpiointerrupt.h.
    210          
    211             @ref GPIOINT_Init() @n
    212              This functions initializes the dispatcher register. Typically
    213              @htmlonly GPIOINT_Init() @endhtmlonly is called once in your startup code.
    214          
    215             @ref GPIOINT_CallbackRegister() @n
    216              Register a callback function on a pin interrupt number.
    217          
    218             @ref GPIOINT_CallbackUnRegister() @n
    219              Un-register a callback function on a pin interrupt number.
    220          
    221             @n @section gpioint_example Example
    222             @verbatim
    223          
    224          #include "em_gpio.h"
    225          #include "em_int.h"
    226          #include "gpiointerrupt.h"
    227          
    228          int main(void)
    229          {
    230            CHIP_Init();
    231          
    232            // Enable clock for GPIO module, initialize GPIOINT
    233            CMU_ClockEnable(cmuClock_GPIO, true);
    234            GPIOINT_Init();
    235          
    236            // Register callback functions and enable interrupts
    237            GPIOINT_CallbackRegister(1, gpioCallback1);
    238            GPIOINT_CallbackRegister(3, gpioCallback3);
    239            GPIOINT_CallbackRegister(8, gpioCallback8);
    240            GPIO_IntEnable(1<<1 | 1<<3 | 1<<8);
    241          
    242            while(true);
    243          }
    244          
    245             @endverbatim
    246          
    247           * @} end group GPIOINT *******************************************************
    248           * @} end group emdrv ****************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   GPIOINT_CallbackRegister
        16   -> CORE_EnterAtomic
         0   -> CORE_ExitAtomic
      16   GPIOINT_IRQDispatcher
        16   -- Indirect call
       8   GPIOINT_Init
         8   -> __NVIC_ClearPendingIRQ
         0   -> __NVIC_EnableIRQ
         8   -> __NVIC_EnableIRQ
       0   GPIO_EVEN_IRQHandler
         0   -> GPIOINT_IRQDispatcher
       0   GPIO_ODD_IRQHandler
         0   -> GPIOINT_IRQDispatcher
       0   __NVIC_ClearPendingIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       6  ?Subroutine0
      24  GPIOINT_CallbackRegister
      40  GPIOINT_IRQDispatcher
      28  GPIOINT_Init
      16  GPIO_EVEN_IRQHandler
      14  GPIO_ODD_IRQHandler
      22  __NVIC_ClearPendingIRQ
      22  __NVIC_EnableIRQ
      64  gpioCallbacks

 
  64 bytes in section .bss
 192 bytes in section .text
 
 192 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: none
