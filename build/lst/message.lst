###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:20
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\message.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWC129.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\message.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"message.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0
#        -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\message.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\message.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\protocol\zigbee\app\framework\util\message.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Code for manipulating the incoming and outgoing messages in a flat
      4           * memory buffer.
      5           *******************************************************************************
      6           * # License
      7           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      8           *******************************************************************************
      9           *
     10           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     11           * software is governed by the terms of Silicon Labs Master Software License
     12           * Agreement (MSLA) available at
     13           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     14           * software is distributed to you in Source Code format and is governed by the
     15           * sections of the MSLA applicable to Source Code.
     16           *
     17           ******************************************************************************/
     18          
     19          #include "app/framework/include/af.h"
     20          #include "app/framework/util/util.h"
     21          #include "app/framework/util/config.h"
     22          
     23          //------------------------------------------------------------------------------
     24          
     25          // these variables are for storing responses that are created by zcl-utils
     26          // in functions called from emberIncomingMsgHandler. The response is sent
     27          // from emberAfTick (meant to be called immediately after emberTick).
     28          // There is only space for one response as each call to emberTick will
     29          // only result in a single call to emberIncomingMsgHandler. If the device
     30          // receives multiple ZCL messages, the stack will queue these and hand
     31          // these to the application via emberIncomingMsgHandler one at a time.

   \                                 In section .bss, align 4
     32          EmberApsFrame      emberAfResponseApsFrame;
   \                     emberAfResponseApsFrame:
   \        0x0                      DS8 12

   \                                 In section .bss, align 2
     33          EmberNodeId        emberAfResponseDestination;
   \                     emberAfResponseDestination:
   \        0x0                      DS8 2

   \                                 In section .bss, align 4
     34          uint8_t  appResponseData[EMBER_AF_RESPONSE_BUFFER_LEN];
   \                     appResponseData:
   \        0x0                      DS8 84

   \                                 In section .bss, align 2
     35          uint16_t  appResponseLength;
   \                     appResponseLength:
   \        0x0                      DS8 2
     36          
     37          // Used for empty string

   \                                 In section .bss, align 2
     38          static uint16_t zeroLenByte = 0;
   \                     zeroLenByte:
   \        0x0                      DS8 2

   \                                 In section .data, align 4
   \        0x0   0x....'....        DC32 zeroLenByte
     39          static uint8_t* zeroLenBytePtr = (uint8_t *)&zeroLenByte;
     40          
     41          //------------------------------------------------------------------------------
     42          // Utilities for adding bytes to the response buffer: appResponseData. These
     43          // functions take care of incrementing appResponseLength.
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void emberAfClearResponseData(void)
     46          {
   \                     emberAfClearResponseData: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     47            emberAfResponseType = ZCL_UTIL_RESP_NORMAL;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable4
   \        0x6   0x7008             STRB     R0,[R1, #+0]
     48            // To prevent accidentally sending to someone else,
     49            // set the destination to ourselves.
     50            emberAfResponseDestination = emberAfGetNodeId();
   \        0x8   0x....'....        BL       emberAfGetNodeId
   \        0xC   0x....             LDR.N    R2,??DataTable4_1
   \        0xE   0x8010             STRH     R0,[R2, #+0]
     51            MEMSET(appResponseData, 0, EMBER_AF_RESPONSE_BUFFER_LEN);
   \       0x10   0x2252             MOVS     R2,#+82
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x....             LDR.N    R0,??DataTable4_2
   \       0x16   0x....'....        BL       halCommonMemSet
     52            appResponseLength = 0;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x....             LDR.N    R1,??DataTable4_3
   \       0x1E   0x8008             STRH     R0,[R1, #+0]
     53            MEMSET(&emberAfResponseApsFrame, 0, sizeof(EmberApsFrame));
   \       0x20   0x220C             MOVS     R2,#+12
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x....             LDR.N    R0,??DataTable4_4
   \       0x26   0xE8BD 0x4008      POP      {R3,LR}
   \       0x2A   0x....'....        B.W      halCommonMemSet
     54          }
     55          

   \                                 In section .text, align 2, keep-with-next
     56          uint8_t * emberAfPutInt8uInResp(uint8_t value)
     57          {
   \                     emberAfPutInt8uInResp: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     58            //emberAfDebugPrint("try %x max %x\r\n", appResponseLength, EMBER_AF_RESPONSE_BUFFER_LEN);
     59            if (appResponseLength < EMBER_AF_RESPONSE_BUFFER_LEN) {
   \        0x2   0x....             LDR.N    R1,??DataTable4_3
   \        0x4   0x880A             LDRH     R2,[R1, #+0]
   \        0x6   0x2A52             CMP      R2,#+82
   \        0x8   0xDA07             BGE.N    ??emberAfPutInt8uInResp_0
     60              //emberAfDebugPrint("put %x at spot %x\r\n", value, appResponseLength);
     61              appResponseData[appResponseLength] = value;
   \        0xA   0x....             LDR.N    R4,??DataTable4_2
   \        0xC   0x54A0             STRB     R0,[R4, R2]
     62              appResponseLength++;
   \        0xE   0x1C52             ADDS     R2,R2,#+1
   \       0x10   0x800A             STRH     R2,[R1, #+0]
     63              return &appResponseData[appResponseLength - 1];
   \       0x12   0xB292             UXTH     R2,R2
   \       0x14   0x18A0             ADDS     R0,R4,R2
   \       0x16   0x1E40             SUBS     R0,R0,#+1
   \       0x18   0xBD10             POP      {R4,PC}
     64            }
     65          
     66            return NULL;
   \                     ??emberAfPutInt8uInResp_0: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
     67          }
     68          

   \                                 In section .text, align 2, keep-with-next
     69          uint16_t * emberAfPutInt16uInResp(uint16_t value)
     70          {
   \                     emberAfPutInt16uInResp: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
     71            uint8_t * low = emberAfPutInt8uInResp(LOW_BYTE(value));
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x....'....        BL       emberAfPutInt8uInResp
   \        0xA   0x4604             MOV      R4,R0
     72            uint8_t * high = emberAfPutInt8uInResp(HIGH_BYTE(value));
   \        0xC   0x0A28             LSRS     R0,R5,#+8
   \        0xE   0x....'....        BL       emberAfPutInt8uInResp
     73          
     74            if (low && high) {
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xBF18             IT       NE 
   \       0x16   0x2800             CMPNE    R0,#+0
   \       0x18   0xD001             BEQ.N    ??emberAfPutInt16uInResp_0
     75              return (uint16_t *) low;
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}
     76            } else {
     77              return NULL;
   \                     ??emberAfPutInt16uInResp_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     78            }
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          uint32_t * emberAfPutInt32uInResp(uint32_t value)
     82          {
   \                     emberAfPutInt32uInResp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4607             MOV      R7,R0
     83            uint8_t * a =  emberAfPutInt8uInResp(BYTE_0(value));
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x....'....        BL       emberAfPutInt8uInResp
   \        0xA   0x4606             MOV      R6,R0
     84            uint8_t * b =  emberAfPutInt8uInResp(BYTE_1(value));
   \        0xC   0x0438             LSLS     R0,R7,#+16
   \        0xE   0x0E00             LSRS     R0,R0,#+24
   \       0x10   0x....'....        BL       emberAfPutInt8uInResp
   \       0x14   0x4605             MOV      R5,R0
     85            uint8_t * c =  emberAfPutInt8uInResp(BYTE_2(value));
   \       0x16   0x0238             LSLS     R0,R7,#+8
   \       0x18   0x0E00             LSRS     R0,R0,#+24
   \       0x1A   0x....'....        BL       emberAfPutInt8uInResp
   \       0x1E   0x4604             MOV      R4,R0
     86            uint8_t * d =  emberAfPutInt8uInResp(BYTE_3(value));
   \       0x20   0x0E38             LSRS     R0,R7,#+24
   \       0x22   0x....'....        BL       emberAfPutInt8uInResp
     87          
     88            if (a && b && c && d) {
   \       0x26   0x2E00             CMP      R6,#+0
   \       0x28   0xBF18             IT       NE 
   \       0x2A   0x2D00             CMPNE    R5,#+0
   \       0x2C   0xD005             BEQ.N    ??emberAfPutInt32uInResp_0
   \       0x2E   0x2C00             CMP      R4,#+0
   \       0x30   0xBF18             IT       NE 
   \       0x32   0x2800             CMPNE    R0,#+0
   \       0x34   0xD001             BEQ.N    ??emberAfPutInt32uInResp_0
     89              return (uint32_t *)a;
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0xBDF2             POP      {R1,R4-R7,PC}
     90            } else {
     91              return NULL;
   \                     ??emberAfPutInt32uInResp_0: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     92            }
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          uint32_t * emberAfPutInt24uInResp(uint32_t value)
     96          {
   \                     emberAfPutInt24uInResp: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
     97            uint8_t * a = emberAfPutInt8uInResp(BYTE_0(value));
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x....'....        BL       emberAfPutInt8uInResp
   \        0xA   0x4605             MOV      R5,R0
     98            uint8_t * b = emberAfPutInt8uInResp(BYTE_1(value));
   \        0xC   0x0430             LSLS     R0,R6,#+16
   \        0xE   0x0E00             LSRS     R0,R0,#+24
   \       0x10   0x....'....        BL       emberAfPutInt8uInResp
   \       0x14   0x4604             MOV      R4,R0
     99            uint8_t * c = emberAfPutInt8uInResp(BYTE_2(value));
   \       0x16   0x0236             LSLS     R6,R6,#+8
   \       0x18   0x0E30             LSRS     R0,R6,#+24
   \       0x1A   0x....'....        BL       emberAfPutInt8uInResp
    100          
    101            if (a && b && c) {
   \       0x1E   0x2D00             CMP      R5,#+0
   \       0x20   0xBF18             IT       NE 
   \       0x22   0x2C00             CMPNE    R4,#+0
   \       0x24   0xD002             BEQ.N    ??emberAfPutInt24uInResp_0
   \       0x26   0xB108             CBZ.N    R0,??emberAfPutInt24uInResp_0
    102              return (uint32_t *) a;
   \       0x28   0x4628             MOV      R0,R5
   \       0x2A   0xBD70             POP      {R4-R6,PC}
    103            } else {
    104              return NULL;
   \                     ??emberAfPutInt24uInResp_0: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD70             POP      {R4-R6,PC}       ;; return
    105            }
    106          }
    107          

   \                                 In section .text, align 2, keep-with-next
    108          uint8_t * emberAfPutBlockInResp(const uint8_t* data, uint16_t length)
    109          {
   \                     emberAfPutBlockInResp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    110            if ((appResponseLength + length) < EMBER_AF_RESPONSE_BUFFER_LEN) {
   \        0x2   0x....             LDR.N    R5,??DataTable4_3
   \        0x4   0x882B             LDRH     R3,[R5, #+0]
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4626             MOV      R6,R4
   \        0xA   0x18F7             ADDS     R7,R6,R3
   \        0xC   0x2F52             CMP      R7,#+82
   \        0xE   0xDA0C             BGE.N    ??emberAfPutBlockInResp_0
    111              MEMMOVE(appResponseData + appResponseLength, data, length);
   \       0x10   0x....             LDR.N    R7,??DataTable4_2
   \       0x12   0x4601             MOV      R1,R0
   \       0x14   0x4622             MOV      R2,R4
   \       0x16   0x18F8             ADDS     R0,R7,R3
   \       0x18   0x....'....        BL       halCommonMemMove
    112              appResponseLength += length;
   \       0x1C   0x882B             LDRH     R3,[R5, #+0]
   \       0x1E   0x18E4             ADDS     R4,R4,R3
   \       0x20   0x802C             STRH     R4,[R5, #+0]
    113              return &appResponseData[appResponseLength - length];
   \       0x22   0xB2A4             UXTH     R4,R4
   \       0x24   0x1BA4             SUBS     R4,R4,R6
   \       0x26   0x1938             ADDS     R0,R7,R4
   \       0x28   0xBDF2             POP      {R1,R4-R7,PC}
    114            } else {
    115              return NULL;
   \                     ??emberAfPutBlockInResp_0: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    116            }
    117          }
    118          

   \                                 In section .text, align 2, keep-with-next
    119          uint8_t * emberAfPutStringInResp(const uint8_t *buffer)
    120          {
    121            uint8_t length = emberAfStringLength(buffer);
   \                     emberAfPutStringInResp: (+1)
   \        0x0   0x7801             LDRB     R1,[R0, #+0]
   \        0x2   0x29FF             CMP      R1,#+255
   \        0x4   0xBF0C             ITE      EQ 
   \        0x6   0x2101             MOVEQ    R1,#+1
   \        0x8   0x1C49             ADDNE    R1,R1,#+1
    122            return emberAfPutBlockInResp(buffer, length + 1);
   \        0xA   0xB289             UXTH     R1,R1
   \        0xC   0x....             B.N      emberAfPutBlockInResp
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          uint8_t * emberAfPutDateInResp(EmberAfDate *value)
    126          {
   \                     emberAfPutDateInResp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4607             MOV      R7,R0
    127            uint8_t * a = emberAfPutInt8uInResp(value->year);
   \        0x4   0x7838             LDRB     R0,[R7, #+0]
   \        0x6   0x....'....        BL       emberAfPutInt8uInResp
   \        0xA   0x4606             MOV      R6,R0
    128            uint8_t * b = emberAfPutInt8uInResp(value->month);
   \        0xC   0x7878             LDRB     R0,[R7, #+1]
   \        0xE   0x....'....        BL       emberAfPutInt8uInResp
   \       0x12   0x4605             MOV      R5,R0
    129            uint8_t * c = emberAfPutInt8uInResp(value->dayOfMonth);
   \       0x14   0x78B8             LDRB     R0,[R7, #+2]
   \       0x16   0x....'....        BL       emberAfPutInt8uInResp
   \       0x1A   0x4604             MOV      R4,R0
    130            uint8_t * d = emberAfPutInt8uInResp(value->dayOfWeek);
   \       0x1C   0x78F8             LDRB     R0,[R7, #+3]
   \       0x1E   0x....'....        BL       emberAfPutInt8uInResp
    131          
    132            if (a && b && c && d) {
   \       0x22   0x2E00             CMP      R6,#+0
   \       0x24   0xBF18             IT       NE 
   \       0x26   0x2D00             CMPNE    R5,#+0
   \       0x28   0xD005             BEQ.N    ??emberAfPutDateInResp_0
   \       0x2A   0x2C00             CMP      R4,#+0
   \       0x2C   0xBF18             IT       NE 
   \       0x2E   0x2800             CMPNE    R0,#+0
   \       0x30   0xD001             BEQ.N    ??emberAfPutDateInResp_0
    133              return a;
   \       0x32   0x4630             MOV      R0,R6
   \       0x34   0xBDF2             POP      {R1,R4-R7,PC}
    134            } else {
    135              return NULL;
   \                     ??emberAfPutDateInResp_0: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    136            }
    137          }
    138          
    139          // ------------------------------------
    140          // Utilities for reading from RAM buffers (reading from incoming message
    141          // buffer)
    142          // ------------------------------------
    143          
    144          // retrieves an uint32_t which contains between 1 and 4 bytes of relevent data
    145          // depending on number of bytes requested.

   \                                 In section .text, align 2, keep-with-next
    146          uint32_t emberAfGetInt(const uint8_t* message,
    147                                 uint16_t currentIndex,
    148                                 uint16_t msgLen,
    149                                 uint8_t bytes)
    150          {
   \                     emberAfGetInt: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    151            uint32_t result = 0;
    152            uint8_t i = bytes;
   \        0x4   0x461D             MOV      R5,R3
   \        0x6   0x2000             MOVS     R0,#+0
    153            if ((currentIndex + bytes) > msgLen) {
   \        0x8   0x185B             ADDS     R3,R3,R1
   \        0xA   0x429A             CMP      R2,R3
   \        0xC   0xDA07             BGE.N    ??emberAfGetInt_0
    154              emberAfDebugPrintln("GetInt, %x bytes short", bytes);
    155              emberAfDebugFlush();
    156              return 0;
   \        0xE   0xBD30             POP      {R4,R5,PC}
    157            }
    158            while (i > 0) {
    159              result = (result << 8) + message[(currentIndex + i) - 1];
   \                     ??emberAfGetInt_1: (+1)
   \       0x10   0x1852             ADDS     R2,R2,R1
   \       0x12   0x4422             ADD      R2,R4,R2
   \       0x14   0xF812 0x3C01      LDRB     R3,[R2, #-1]
    160              i--;
   \       0x18   0x1E6D             SUBS     R5,R5,#+1
   \       0x1A   0xEB03 0x2000      ADD      R0,R3,R0, LSL #+8
    161            }
   \                     ??emberAfGetInt_0: (+1)
   \       0x1E   0xB2EA             UXTB     R2,R5
   \       0x20   0x2A00             CMP      R2,#+0
   \       0x22   0xD1F5             BNE.N    ??emberAfGetInt_1
    162            return result;
   \       0x24   0xBD30             POP      {R4,R5,PC}       ;; return
    163          }
    164          

   \                                 In section .text, align 2, keep-with-next
    165          uint32_t emberAfGetInt32u(const uint8_t* message, uint16_t currentIndex, uint16_t msgLen)
    166          {
    167            return emberAfGetInt(message, currentIndex, msgLen, 4);
   \                     emberAfGetInt32u: (+1)
   \        0x0   0x2304             MOVS     R3,#+4
   \        0x2   0x....             B.N      emberAfGetInt
    168          }
    169          

   \                                 In section .text, align 2, keep-with-next
    170          uint32_t emberAfGetInt24u(const uint8_t* message, uint16_t currentIndex, uint16_t msgLen)
    171          {
    172            return emberAfGetInt(message, currentIndex, msgLen, 3);
   \                     emberAfGetInt24u: (+1)
   \        0x0   0x2303             MOVS     R3,#+3
   \        0x2   0x....             B.N      emberAfGetInt
    173          }
    174          

   \                                 In section .text, align 2, keep-with-next
    175          uint16_t emberAfGetInt16u(const uint8_t* message, uint16_t currentIndex, uint16_t msgLen)
    176          {
   \                     emberAfGetInt16u: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    177            return (uint16_t)emberAfGetInt(message, currentIndex, msgLen, 2);
   \        0x2   0x2302             MOVS     R3,#+2
   \        0x4   0x....'....        BL       emberAfGetInt
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0xBD02             POP      {R1,PC}          ;; return
    178          }
    179          

   \                                 In section .text, align 2, keep-with-next
    180          uint8_t* emberAfGetString(uint8_t* message, uint16_t currentIndex, uint16_t msgLen)
    181          {
   \                     emberAfGetString: (+1)
   \        0x0   0x4603             MOV      R3,R0
   \        0x2   0x....             LDR.N    R0,??DataTable4_5
   \        0x4   0x4291             CMP      R1,R2
   \        0x6   0xD300             BCC.N    ??emberAfGetString_0
   \        0x8   0x4770             BX       LR
   \                     ??emberAfGetString_0: (+1)
   \        0xA   0xB510             PUSH     {R4,LR}
    182            // Strings must contain at least one byte for the length.
    183            if (msgLen <= currentIndex) {
    184              emberAfDebugPrintln("GetString: %p", "buffer too short");
    185              return zeroLenBytePtr;
    186            }
    187          
    188            // Starting from the current index, there must be enough bytes in the message
    189            // for the string and the length byte.
    190            if (msgLen < currentIndex + emberAfStringLength(&message[currentIndex]) + 1) {
   \        0xC   0x5C5C             LDRB     R4,[R3, R1]
   \        0xE   0x2CFF             CMP      R4,#+255
   \       0x10   0xBF08             IT       EQ 
   \       0x12   0x2400             MOVEQ    R4,#+0
   \       0x14   0x1864             ADDS     R4,R4,R1
   \       0x16   0x1C64             ADDS     R4,R4,#+1
   \       0x18   0x42A2             CMP      R2,R4
   \       0x1A   0xBFA8             IT       GE 
   \       0x1C   0x1858             ADDGE    R0,R3,R1
    191              emberAfDebugPrintln("GetString: %p", "len byte wrong");
    192              return zeroLenBytePtr;
    193            }
    194          
    195            return &message[currentIndex];
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    196          }
    197          

   \                                 In section .text, align 2, keep-with-next
    198          uint8_t* emberAfGetLongString(uint8_t* message, uint16_t currentIndex, uint16_t msgLen)
    199          {
   \                     emberAfGetLongString: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
    200            // Long strings must contain at least two bytes for the length.
    201            if (msgLen <= currentIndex + 1) {
   \        0x6   0x1C61             ADDS     R1,R4,#+1
   \        0x8   0x....             LDR.N    R6,??DataTable4_5
   \        0xA   0x42A9             CMP      R1,R5
   \        0xC   0xDA07             BGE.N    ??emberAfGetLongString_0
    202              emberAfDebugPrintln("GetLongString: %p", "buffer too short");
    203              return zeroLenBytePtr;
    204            }
    205          
    206            // Starting from the current index, there must be enough bytes in the message
    207            // for the string and the length bytes.
    208            if (msgLen
    209                < currentIndex + emberAfLongStringLength(&message[currentIndex]) + 2) {
   \        0xE   0x1907             ADDS     R7,R0,R4
   \       0x10   0x4638             MOV      R0,R7
   \       0x12   0x....'....        BL       emberAfLongStringLength
   \       0x16   0x1904             ADDS     R4,R0,R4
   \       0x18   0x1CA4             ADDS     R4,R4,#+2
   \       0x1A   0x42A5             CMP      R5,R4
   \       0x1C   0xDA01             BGE.N    ??emberAfGetLongString_1
    210              emberAfDebugPrintln("GetLongString: %p", "len bytes wrong");
    211              return zeroLenBytePtr;
   \                     ??emberAfGetLongString_0: (+1)
   \       0x1E   0x4630             MOV      R0,R6
   \       0x20   0xBDF2             POP      {R1,R4-R7,PC}
    212            }
    213          
    214            return &message[currentIndex];
   \                     ??emberAfGetLongString_1: (+1)
   \       0x22   0x4638             MOV      R0,R7
   \       0x24   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    215          }
    216          

   \                                 In section .text, align 2, keep-with-next
    217          uint8_t emberAfStringLength(const uint8_t *buffer)
    218          {
    219            // The first byte specifies the length of the string.  A length of 0xFF means
    220            // the string is invalid and there is no character data.
    221            return (buffer[0] == 0xFF ? 0 : buffer[0]);
   \                     emberAfStringLength: (+1)
   \        0x0   0x7800             LDRB     R0,[R0, #+0]
   \        0x2   0x28FF             CMP      R0,#+255
   \        0x4   0xBF08             IT       EQ 
   \        0x6   0x2000             MOVEQ    R0,#+0
   \        0x8   0x4770             BX       LR               ;; return
    222          }
    223          

   \                                 In section .text, align 2, keep-with-next
    224          uint16_t emberAfLongStringLength(const uint8_t *buffer)
    225          {
   \                     emberAfLongStringLength: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    226            // The first two bytes specify the length of the long string.  A length of
    227            // 0xFFFF means the string is invalid and there is no character data.
    228            uint16_t length = emberAfGetInt16u(buffer, 0, 2);
   \        0x2   0x2202             MOVS     R2,#+2
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x....'....        BL       emberAfGetInt16u
    229            return (length == 0xFFFF ? 0 : length);
   \        0xA   0xF64F 0x72FF      MOVW     R2,#+65535
   \        0xE   0x4290             CMP      R0,R2
   \       0x10   0xBF08             IT       EQ 
   \       0x12   0x2000             MOVEQ    R0,#+0
   \       0x14   0xBD02             POP      {R1,PC}          ;; return
    230          }
    231          

   \                                 In section .text, align 2, keep-with-next
    232          uint8_t emberAfGetDate(uint8_t* message,
    233                                 uint16_t currentIndex,
    234                                 uint16_t msgLen,
    235                                 EmberAfDate *destination)
    236          {
   \                     emberAfGetDate: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    237            if ((currentIndex + 4) > msgLen) {
   \        0x2   0x1D0C             ADDS     R4,R1,#+4
   \        0x4   0x42A2             CMP      R2,R4
   \        0x6   0xDA01             BGE.N    ??emberAfGetDate_0
    238              emberAfDebugPrintln("GetDate, %x bytes short", 4);
    239              emberAfDebugFlush();
    240              return 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xBD10             POP      {R4,PC}
    241            }
    242            destination->year       = message[(currentIndex + 0)];
   \                     ??emberAfGetDate_0: (+1)
   \        0xC   0x4408             ADD      R0,R0,R1
   \        0xE   0x7801             LDRB     R1,[R0, #+0]
   \       0x10   0x7019             STRB     R1,[R3, #+0]
    243            destination->month      = message[(currentIndex + 1)];
   \       0x12   0x7842             LDRB     R2,[R0, #+1]
   \       0x14   0x705A             STRB     R2,[R3, #+1]
    244            destination->dayOfMonth = message[(currentIndex + 2)];
   \       0x16   0x7881             LDRB     R1,[R0, #+2]
   \       0x18   0x7099             STRB     R1,[R3, #+2]
    245            destination->dayOfWeek  = message[(currentIndex + 3)];
   \       0x1A   0x78C0             LDRB     R0,[R0, #+3]
   \       0x1C   0x70D8             STRB     R0,[R3, #+3]
    246            return 4;
   \       0x1E   0x2004             MOVS     R0,#+4
   \       0x20   0xBD10             POP      {R4,PC}          ;; return
    247          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     emberAfResponseType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     emberAfResponseDestination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     appResponseData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     emberAfResponseApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     zeroLenByte

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfClearResponseData
         8   -> emberAfGetNodeId
         0   -> halCommonMemSet
         8   -> halCommonMemSet
       8   emberAfGetDate
      12   emberAfGetInt
       8   emberAfGetInt16u
         8   -> emberAfGetInt
       0   emberAfGetInt24u
         0   -> emberAfGetInt
       0   emberAfGetInt32u
         0   -> emberAfGetInt
      24   emberAfGetLongString
        24   -> emberAfLongStringLength
       8   emberAfGetString
       8   emberAfLongStringLength
         8   -> emberAfGetInt16u
      24   emberAfPutBlockInResp
        24   -> halCommonMemMove
      24   emberAfPutDateInResp
        24   -> emberAfPutInt8uInResp
      16   emberAfPutInt16uInResp
        16   -> emberAfPutInt8uInResp
      16   emberAfPutInt24uInResp
        16   -> emberAfPutInt8uInResp
      24   emberAfPutInt32uInResp
        24   -> emberAfPutInt8uInResp
       8   emberAfPutInt8uInResp
       0   emberAfPutStringInResp
         0   -> emberAfPutBlockInResp
       0   emberAfStringLength


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      84  appResponseData
       2  appResponseLength
      46  emberAfClearResponseData
      34  emberAfGetDate
      38  emberAfGetInt
      12  emberAfGetInt16u
       4  emberAfGetInt24u
       4  emberAfGetInt32u
      38  emberAfGetLongString
      32  emberAfGetString
      22  emberAfLongStringLength
      46  emberAfPutBlockInResp
      58  emberAfPutDateInResp
      34  emberAfPutInt16uInResp
      48  emberAfPutInt24uInResp
      62  emberAfPutInt32uInResp
      30  emberAfPutInt8uInResp
      14  emberAfPutStringInResp
      12  emberAfResponseApsFrame
       2  emberAfResponseDestination
      10  emberAfStringLength
       2  zeroLenByte
       4  zeroLenBytePtr

 
 102 bytes in section .bss
   4 bytes in section .data
 556 bytes in section .text
 
 556 bytes of CODE memory
 106 bytes of DATA memory

Errors: none
Warnings: none
