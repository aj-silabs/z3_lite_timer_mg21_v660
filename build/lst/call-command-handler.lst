###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:23
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\call-command-handler.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWDD86.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\call-command-handler.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"call-command-handler.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\call-command-handler.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\call-command-handler.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\call-command-handler.c
      1          // This file is generated by Simplicity Studio.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This is a set of generated functions that parse the
      6          // the incomming message, and call appropriate command handler.
      7          
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #ifdef EZSP_HOST
     12          // Includes needed for ember related functions for the EZSP host
     13          #include "stack/include/error.h"
     14          #include "stack/include/ember-types.h"
     15          #include "app/util/ezsp/ezsp-protocol.h"
     16          #include "app/util/ezsp/ezsp.h"
     17          #include "app/util/ezsp/ezsp-utils.h"
     18          #include "app/util/ezsp/serial-interface.h"
     19          #else
     20          // Includes needed for ember related functions for the EM250
     21          #include "stack/include/ember.h"
     22          #endif // EZSP_HOST
     23          
     24          #include "app/framework/util/util.h"
     25          #include "af-structs.h"
     26          #include "call-command-handler.h"
     27          #include "command-id.h"
     28          #include "callback.h"
     29          

   \                                 In section .text, align 2, keep-with-next
     30          static EmberAfStatus status(bool wasHandled, bool clusterExists, bool mfgSpecific)
     31          {
     32            if (wasHandled) {
   \                     status: (+1)
   \        0x0   0xB108             CBZ.N    R0,??status_0
     33              return EMBER_ZCL_STATUS_SUCCESS;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x4770             BX       LR
     34            } else if (mfgSpecific) {
   \                     ??status_0: (+1)
   \        0x6   0xB10A             CBZ.N    R2,??status_1
     35              return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
   \        0x8   0x2083             MOVS     R0,#+131
   \        0xA   0x4770             BX       LR
     36            } else if (clusterExists) {
   \                     ??status_1: (+1)
   \        0xC   0xB109             CBZ.N    R1,??status_2
     37              return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \        0xE   0x2081             MOVS     R0,#+129
   \       0x10   0x4770             BX       LR
     38            } else {
     39              return EMBER_ZCL_STATUS_UNSUPPORTED_CLUSTER;
   \                     ??status_2: (+1)
   \       0x12   0x20C3             MOVS     R0,#+195
   \       0x14   0x4770             BX       LR               ;; return
     40            }
     41          }
     42          
     43          // Main command parsing controller.

   \                                 In section .text, align 2, keep-with-next
     44          EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand *cmd)
     45          {
   \                     emberAfClusterSpecificCommandParse: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
     46            EmberAfStatus result = status(false, false, cmd->mfgSpecific);
   \        0x4   0x7BEA             LDRB     R2,[R5, #+15]
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....'....        BL       status
   \        0xE   0x4604             MOV      R4,R0
     47            if (cmd->direction == (uint8_t)ZCL_DIRECTION_SERVER_TO_CLIENT
     48                && emberAfContainsClientWithMfgCode(cmd->apsFrame->destinationEndpoint,
     49                                         cmd->apsFrame->clusterId,
     50                                         cmd->mfgCode)) {
   \       0x10   0x7D68             LDRB     R0,[R5, #+21]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD10E             BNE.N    ??emberAfClusterSpecificCommandParse_0
   \       0x16   0x6828             LDR      R0,[R5, #+0]
   \       0x18   0x8A2A             LDRH     R2,[R5, #+16]
   \       0x1A   0x8841             LDRH     R1,[R0, #+2]
   \       0x1C   0x7940             LDRB     R0,[R0, #+5]
   \       0x1E   0x....'....        BL       emberAfContainsClientWithMfgCode
   \       0x22   0xB138             CBZ.N    R0,??emberAfClusterSpecificCommandParse_0
     51              switch (cmd->apsFrame->clusterId) {
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0x8841             LDRH     R1,[R0, #+2]
   \       0x28   0x2921             CMP      R1,#+33
   \       0x2A   0xD142             BNE.N    ??emberAfClusterSpecificCommandParse_1
     52              case ZCL_GREEN_POWER_CLUSTER_ID:
     53                result = emberAfGreenPowerClusterClientCommandParse(cmd);
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       emberAfGreenPowerClusterClientCommandParse
   \       0x32   0xE03D             B.N      ??emberAfClusterSpecificCommandParse_2
     54                break;
     55              default:
     56                // Unrecognized cluster ID, error status will apply.
     57                break;
     58              }
     59            } else if (cmd->direction == (uint8_t)ZCL_DIRECTION_CLIENT_TO_SERVER
     60                       && emberAfContainsServerWithMfgCode(cmd->apsFrame->destinationEndpoint,
     61                                                 cmd->apsFrame->clusterId,
     62                                                 cmd->mfgCode)) {
   \                     ??emberAfClusterSpecificCommandParse_0: (+1)
   \       0x34   0x7D68             LDRB     R0,[R5, #+21]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD13B             BNE.N    ??emberAfClusterSpecificCommandParse_1
   \       0x3A   0x6828             LDR      R0,[R5, #+0]
   \       0x3C   0x8A2A             LDRH     R2,[R5, #+16]
   \       0x3E   0x8841             LDRH     R1,[R0, #+2]
   \       0x40   0x7940             LDRB     R0,[R0, #+5]
   \       0x42   0x....'....        BL       emberAfContainsServerWithMfgCode
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD033             BEQ.N    ??emberAfClusterSpecificCommandParse_1
     63              switch (cmd->apsFrame->clusterId) {
   \       0x4A   0x6828             LDR      R0,[R5, #+0]
   \       0x4C   0x8841             LDRH     R1,[R0, #+2]
   \       0x4E   0xB181             CBZ.N    R1,??emberAfClusterSpecificCommandParse_3
   \       0x50   0x2903             CMP      R1,#+3
   \       0x52   0xD012             BEQ.N    ??emberAfClusterSpecificCommandParse_4
   \       0x54   0x2904             CMP      R1,#+4
   \       0x56   0xD014             BEQ.N    ??emberAfClusterSpecificCommandParse_5
   \       0x58   0x2905             CMP      R1,#+5
   \       0x5A   0xD016             BEQ.N    ??emberAfClusterSpecificCommandParse_6
   \       0x5C   0x2906             CMP      R1,#+6
   \       0x5E   0xD018             BEQ.N    ??emberAfClusterSpecificCommandParse_7
   \       0x60   0x2908             CMP      R1,#+8
   \       0x62   0xD01A             BEQ.N    ??emberAfClusterSpecificCommandParse_8
   \       0x64   0xF5B1 0x7F40      CMP      R1,#+768
   \       0x68   0xD01B             BEQ.N    ??emberAfClusterSpecificCommandParse_9
   \       0x6A   0xF5B1 0x5F80      CMP      R1,#+4096
   \       0x6E   0xD01C             BEQ.N    ??emberAfClusterSpecificCommandParse_10
   \       0x70   0xE01F             B.N      ??emberAfClusterSpecificCommandParse_1
     64              case ZCL_BASIC_CLUSTER_ID:
     65                result = emberAfBasicClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_3: (+1)
   \       0x72   0x4628             MOV      R0,R5
   \       0x74   0x....'....        BL       emberAfBasicClusterServerCommandParse
   \       0x78   0xE01A             B.N      ??emberAfClusterSpecificCommandParse_2
     66                break;
     67              case ZCL_IDENTIFY_CLUSTER_ID:
     68                result = emberAfIdentifyClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_4: (+1)
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       emberAfIdentifyClusterServerCommandParse
   \       0x80   0xE016             B.N      ??emberAfClusterSpecificCommandParse_2
     69                break;
     70              case ZCL_GROUPS_CLUSTER_ID:
     71                result = emberAfGroupsClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_5: (+1)
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       emberAfGroupsClusterServerCommandParse
   \       0x88   0xE012             B.N      ??emberAfClusterSpecificCommandParse_2
     72                break;
     73              case ZCL_SCENES_CLUSTER_ID:
     74                result = emberAfScenesClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_6: (+1)
   \       0x8A   0x4628             MOV      R0,R5
   \       0x8C   0x....'....        BL       emberAfScenesClusterServerCommandParse
   \       0x90   0xE00E             B.N      ??emberAfClusterSpecificCommandParse_2
     75                break;
     76              case ZCL_ON_OFF_CLUSTER_ID:
     77                result = emberAfOnOffClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_7: (+1)
   \       0x92   0x4628             MOV      R0,R5
   \       0x94   0x....'....        BL       emberAfOnOffClusterServerCommandParse
   \       0x98   0xE00A             B.N      ??emberAfClusterSpecificCommandParse_2
     78                break;
     79              case ZCL_LEVEL_CONTROL_CLUSTER_ID:
     80                result = emberAfLevelControlClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_8: (+1)
   \       0x9A   0x4628             MOV      R0,R5
   \       0x9C   0x....'....        BL       emberAfLevelControlClusterServerCommandParse
   \       0xA0   0xE006             B.N      ??emberAfClusterSpecificCommandParse_2
     81                break;
     82              case ZCL_COLOR_CONTROL_CLUSTER_ID:
     83                result = emberAfColorControlClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_9: (+1)
   \       0xA2   0x4628             MOV      R0,R5
   \       0xA4   0x....'....        BL       emberAfColorControlClusterServerCommandParse
   \       0xA8   0xE002             B.N      ??emberAfClusterSpecificCommandParse_2
     84                break;
     85              case ZCL_ZLL_COMMISSIONING_CLUSTER_ID:
     86                result = emberAfZllCommissioningClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_10: (+1)
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       emberAfZllCommissioningClusterServerCommandParse
   \                     ??emberAfClusterSpecificCommandParse_2: (+1)
   \       0xB0   0x4604             MOV      R4,R0
     87                break;
     88              default:
     89                // Unrecognized cluster ID, error status will apply.
     90                break;
     91              }
     92            }
     93            return result;
   \                     ??emberAfClusterSpecificCommandParse_1: (+1)
   \       0xB2   0x4620             MOV      R0,R4
   \       0xB4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     94          }
     95          
     96          // Cluster: Basic, server

   \                                 In section .text, align 2, keep-with-next
     97          EmberAfStatus emberAfBasicClusterServerCommandParse(EmberAfClusterCommand *cmd)
     98          {
   \                     emberAfBasicClusterServerCommandParse: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     99            bool wasHandled = false;
    100            if (!cmd->mfgSpecific) {
   \        0x4   0x7BE1             LDRB     R1,[R4, #+15]
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xBF02             ITTT     EQ 
    101              switch (cmd->commandId) {
   \        0xC   0x7CE1             LDRBEQ   R1,[R4, #+19]
   \        0xE   0x2900             CMPEQ    R1,#+0
    102              case ZCL_RESET_TO_FACTORY_DEFAULTS_COMMAND_ID:
    103                {
    104                  // Command is fixed length: 0
    105                  wasHandled = emberAfBasicClusterResetToFactoryDefaultsCallback();
   \       0x10   0x....'....        BLEQ     emberAfBasicClusterResetToFactoryDefaultsCallback
    106                  break;
    107                }
    108              default:
    109                {
    110                  // Unrecognized command ID, error status will apply.
    111                  break;
    112                }
    113              }
    114            }
    115            return status(wasHandled, true, cmd->mfgSpecific);
   \       0x14   0x....             B.N      ?Subroutine0
    116          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x7BE2             LDRB     R2,[R4, #+15]
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xE8BD 0x4010      POP      {R4,LR}
   \        0x8   0x....             B.N      status
    117          
    118          // Cluster: Identify, server

   \                                 In section .text, align 2, keep-with-next
    119          EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand *cmd)
    120          {
   \                     emberAfIdentifyClusterServerCommandParse: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    121            bool wasHandled = false;
    122            if (!cmd->mfgSpecific) {
   \        0x4   0x7BE1             LDRB     R1,[R4, #+15]
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xB9E1             CBNZ.N   R1,??emberAfIdentifyClusterServerCommandParse_0
    123              switch (cmd->commandId) {
   \        0xA   0x7CE1             LDRB     R1,[R4, #+19]
   \        0xC   0xB121             CBZ.N    R1,??emberAfIdentifyClusterServerCommandParse_1
   \        0xE   0x2901             CMP      R1,#+1
   \       0x10   0xD00A             BEQ.N    ??emberAfIdentifyClusterServerCommandParse_2
   \       0x12   0x2940             CMP      R1,#+64
   \       0x14   0xD00B             BEQ.N    ??emberAfIdentifyClusterServerCommandParse_3
   \       0x16   0xE015             B.N      ??emberAfIdentifyClusterServerCommandParse_0
    124              case ZCL_IDENTIFY_COMMAND_ID:
    125                {
    126                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfIdentifyClusterServerCommandParse_1: (+1)
   \       0x18   0x....'....        BL       ?Subroutine3
    127                  uint16_t identifyTime;  // Ver.: always
    128                  // Command is fixed length: 2
    129                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x1C   0xD30C             BCC.N    ??emberAfIdentifyClusterServerCommandParse_4
    130                  identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x1E   0x....'....        BL       ?Subroutine11
    131                  wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
   \                     ??CrossCallReturnLabel_33: (+1)
   \       0x22   0x....'....        BL       emberAfIdentifyClusterIdentifyCallback
    132                  break;
   \       0x26   0xE00D             B.N      ??emberAfIdentifyClusterServerCommandParse_0
    133                }
    134              case ZCL_IDENTIFY_QUERY_COMMAND_ID:
    135                {
    136                  // Command is fixed length: 0
    137                  wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
   \                     ??emberAfIdentifyClusterServerCommandParse_2: (+1)
   \       0x28   0x....'....        BL       emberAfIdentifyClusterIdentifyQueryCallback
    138                  break;
   \       0x2C   0xE00A             B.N      ??emberAfIdentifyClusterServerCommandParse_0
    139                }
    140              case ZCL_TRIGGER_EFFECT_COMMAND_ID:
    141                {
    142                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfIdentifyClusterServerCommandParse_3: (+1)
   \       0x2E   0x7D20             LDRB     R0,[R4, #+20]
    143                  uint8_t effectId;  // Ver.: always
    144                  uint8_t effectVariant;  // Ver.: always
    145                  // Command is fixed length: 2
    146                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x30   0x89A1             LDRH     R1,[R4, #+12]
   \       0x32   0x1C82             ADDS     R2,R0,#+2
   \       0x34   0x4291             CMP      R1,R2
   \       0x36   0xD201             BCS.N    ??emberAfIdentifyClusterServerCommandParse_5
   \                     ??emberAfIdentifyClusterServerCommandParse_4: (+1)
   \       0x38   0x2080             MOVS     R0,#+128
   \       0x3A   0xBD10             POP      {R4,PC}
    147                  effectId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    148                  payloadOffset += 1u;
    149                  effectVariant = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    150                  wasHandled = emberAfIdentifyClusterTriggerEffectCallback(effectId,
    151                                                                           effectVariant);
   \                     ??emberAfIdentifyClusterServerCommandParse_5: (+1)
   \       0x3C   0x....'....        BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_64: (+1)
   \       0x40   0x....'....        BL       emberAfIdentifyClusterTriggerEffectCallback
    152                  break;
    153                }
    154              default:
    155                {
    156                  // Unrecognized command ID, error status will apply.
    157                  break;
    158                }
    159              }
    160            }
    161            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterServerCommandParse_0: (+1)
   \       0x44                      REQUIRE ?Subroutine0
   \       0x44                      ;; // Fall through to label ?Subroutine0
    162          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \        0x0   0x68A0             LDR      R0,[R4, #+8]
   \        0x2   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x7D21             LDRB     R1,[R4, #+20]
   \        0x2   0x89A2             LDRH     R2,[R4, #+12]
   \        0x4   0x1C8B             ADDS     R3,R1,#+2
   \        0x6   0x429A             CMP      R2,R3
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21: (+1)
   \        0x0   0x68A2             LDR      R2,[R4, #+8]
   \        0x2   0x1C41             ADDS     R1,R0,#+1
   \        0x4   0xB289             UXTH     R1,R1
   \        0x6   0x5C51             LDRB     R1,[R2, R1]
   \        0x8   0x5C10             LDRB     R0,[R2, R0]
   \        0xA   0x4770             BX       LR
    163          
    164          // Cluster: Groups, server

   \                                 In section .text, align 4, keep-with-next
    165          EmberAfStatus emberAfGroupsClusterServerCommandParse(EmberAfClusterCommand *cmd)
    166          {
   \                     emberAfGroupsClusterServerCommandParse: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x....'....        BL       ?Subroutine2
    167            bool wasHandled = false;
    168            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0x6   0xD154             BNE.N    ??emberAfGroupsClusterServerCommandParse_1
    169              switch (cmd->commandId) {
   \        0x8   0x7CE1             LDRB     R1,[R4, #+19]
   \        0xA   0x2905             CMP      R1,#+5
   \        0xC   0xD851             BHI.N    ??emberAfGroupsClusterServerCommandParse_1
   \        0xE   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfGroupsClusterServerCommandParse_0:
   \       0x12   0x03 0x1A          DC8      0x3,0x1A,0x22,0x2D
   \              0x22 0x2D    
   \       0x16   0x35 0x38          DC8      0x35,0x38
    170              case ZCL_ADD_GROUP_COMMAND_ID:
    171                {
    172                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_2: (+1)
   \       0x18   0x7D25             LDRB     R5,[R4, #+20]
    173                  uint16_t groupId;  // Ver.: always
    174                  uint8_t* groupName;  // Ver.: always
    175                  // Command is not a fixed length
    176                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x1A   0x89A2             LDRH     R2,[R4, #+12]
   \       0x1C   0x1CA9             ADDS     R1,R5,#+2
   \       0x1E   0x428A             CMP      R2,R1
   \       0x20   0xD33D             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    177                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x22   0x....'....        BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_26: (+1)
   \       0x26   0x....'....        BL       ?Subroutine15
    178                  payloadOffset += 2u;
    179                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_42: (+1)
   \       0x2A   0x89A2             LDRH     R2,[R4, #+12]
   \       0x2C   0x19C7             ADDS     R7,R0,R7
   \       0x2E   0x1C7F             ADDS     R7,R7,#+1
   \       0x30   0x42BA             CMP      R2,R7
   \       0x32   0xD334             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    180                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x34   0x68A0             LDR      R0,[R4, #+8]
   \       0x36   0xB2A9             UXTH     R1,R5
   \       0x38   0x....'....        BL       emberAfGetString
   \       0x3C   0x4601             MOV      R1,R0
    181                  wasHandled = emberAfGroupsClusterAddGroupCallback(groupId,
    182                                                                    groupName);
   \       0x3E   0x4630             MOV      R0,R6
   \       0x40   0x....'....        BL       emberAfGroupsClusterAddGroupCallback
    183                  break;
   \       0x44   0xE035             B.N      ??emberAfGroupsClusterServerCommandParse_1
    184                }
    185              case ZCL_VIEW_GROUP_COMMAND_ID:
    186                {
    187                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_4: (+1)
   \       0x46   0x....'....        BL       ?Subroutine3
    188                  uint16_t groupId;  // Ver.: always
    189                  // Command is fixed length: 2
    190                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x4A   0xD328             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    191                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x4C   0x....'....        BL       ?Subroutine11
    192                  wasHandled = emberAfGroupsClusterViewGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_32: (+1)
   \       0x50   0x....'....        BL       emberAfGroupsClusterViewGroupCallback
    193                  break;
   \       0x54   0xE02D             B.N      ??emberAfGroupsClusterServerCommandParse_1
    194                }
    195              case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID:
    196                {
    197                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_5: (+1)
   \       0x56   0x....'....        BL       ?Subroutine14
    198                  uint8_t groupCount;  // Ver.: always
    199                  uint8_t* groupList;  // Ver.: always
    200                  // Command is fixed length: 1
    201                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_38: (+1)
   \       0x5A   0xD320             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    202                  groupCount = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    203                  payloadOffset += 1u;
    204                  groupList = cmd->buffer + payloadOffset;
    205                  wasHandled = emberAfGroupsClusterGetGroupMembershipCallback(groupCount,
    206                                                                              groupList);
   \       0x5C   0x68A2             LDR      R2,[R4, #+8]
   \       0x5E   0x1C41             ADDS     R1,R0,#+1
   \       0x60   0xB289             UXTH     R1,R1
   \       0x62   0x5C10             LDRB     R0,[R2, R0]
   \       0x64   0x4411             ADD      R1,R2,R1
   \       0x66   0x....'....        BL       emberAfGroupsClusterGetGroupMembershipCallback
    207                  break;
   \       0x6A   0xE022             B.N      ??emberAfGroupsClusterServerCommandParse_1
    208                }
    209              case ZCL_REMOVE_GROUP_COMMAND_ID:
    210                {
    211                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_6: (+1)
   \       0x6C   0x....'....        BL       ?Subroutine3
    212                  uint16_t groupId;  // Ver.: always
    213                  // Command is fixed length: 2
    214                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x70   0xD315             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    215                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x72   0x....'....        BL       ?Subroutine11
    216                  wasHandled = emberAfGroupsClusterRemoveGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_31: (+1)
   \       0x76   0x....'....        BL       emberAfGroupsClusterRemoveGroupCallback
    217                  break;
   \       0x7A   0xE01A             B.N      ??emberAfGroupsClusterServerCommandParse_1
    218                }
    219              case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID:
    220                {
    221                  // Command is fixed length: 0
    222                  wasHandled = emberAfGroupsClusterRemoveAllGroupsCallback();
   \                     ??emberAfGroupsClusterServerCommandParse_7: (+1)
   \       0x7C   0x....'....        BL       emberAfGroupsClusterRemoveAllGroupsCallback
    223                  break;
   \       0x80   0xE017             B.N      ??emberAfGroupsClusterServerCommandParse_1
    224                }
    225              case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID:
    226                {
    227                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_8: (+1)
   \       0x82   0x7D25             LDRB     R5,[R4, #+20]
    228                  uint16_t groupId;  // Ver.: always
    229                  uint8_t* groupName;  // Ver.: always
    230                  // Command is not a fixed length
    231                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x84   0x89A2             LDRH     R2,[R4, #+12]
   \       0x86   0x1CA9             ADDS     R1,R5,#+2
   \       0x88   0x428A             CMP      R2,R1
   \       0x8A   0xD308             BCC.N    ??emberAfGroupsClusterServerCommandParse_3
    232                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x8C   0x....'....        BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_25: (+1)
   \       0x90   0x....'....        BL       ?Subroutine15
    233                  payloadOffset += 2u;
    234                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_41: (+1)
   \       0x94   0x89A2             LDRH     R2,[R4, #+12]
   \       0x96   0x19C7             ADDS     R7,R0,R7
   \       0x98   0x1C7F             ADDS     R7,R7,#+1
   \       0x9A   0x42BA             CMP      R2,R7
   \       0x9C   0xD201             BCS.N    ??emberAfGroupsClusterServerCommandParse_9
   \                     ??emberAfGroupsClusterServerCommandParse_3: (+1)
   \       0x9E   0x2080             MOVS     R0,#+128
   \       0xA0   0xBDF2             POP      {R1,R4-R7,PC}
    235                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGroupsClusterServerCommandParse_9: (+1)
   \       0xA2   0x68A0             LDR      R0,[R4, #+8]
   \       0xA4   0xB2A9             UXTH     R1,R5
   \       0xA6   0x....'....        BL       emberAfGetString
    236                  wasHandled = emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId,
    237                                                                                 groupName);
   \       0xAA   0x4601             MOV      R1,R0
   \       0xAC   0x4630             MOV      R0,R6
   \       0xAE   0x....'....        BL       emberAfGroupsClusterAddGroupIfIdentifyingCallback
    238                  break;
    239                }
    240              default:
    241                {
    242                  // Unrecognized command ID, error status will apply.
    243                  break;
    244                }
    245              }
    246            }
    247            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfGroupsClusterServerCommandParse_1: (+1)
   \       0xB2   0x....             B.N      ?Subroutine1
    248          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \        0x0   0x4606             MOV      R6,R0
   \        0x2   0x68A0             LDR      R0,[R4, #+8]
   \        0x4   0xB2AF             UXTH     R7,R5
   \        0x6   0x4438             ADD      R0,R0,R7
   \        0x8   0x....'....        B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \        0x0   0x68A0             LDR      R0,[R4, #+8]
   \        0x2   0x4629             MOV      R1,R5
   \        0x4   0x1CAD             ADDS     R5,R5,#+2
   \        0x6   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \        0x2   0x7BE1             LDRB     R1,[R4, #+15]
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x7BE2             LDRB     R2,[R4, #+15]
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \        0x8   0x....             B.N      status

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \        0x0   0x7D20             LDRB     R0,[R4, #+20]
   \        0x2   0x89A1             LDRH     R1,[R4, #+12]
   \        0x4   0x1C42             ADDS     R2,R0,#+1
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0x4770             BX       LR
    249          
    250          // Cluster: Scenes, server

   \                                 In section .text, align 2, keep-with-next
    251          EmberAfStatus emberAfScenesClusterServerCommandParse(EmberAfClusterCommand *cmd)
    252          {
   \                     emberAfScenesClusterServerCommandParse: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x....'....        BL       ?Subroutine2
    253            bool wasHandled = false;
    254            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0x8   0xD115             BNE.N    ??emberAfScenesClusterServerCommandParse_0
    255              switch (cmd->commandId) {
   \        0xA   0x7CE1             LDRB     R1,[R4, #+19]
   \        0xC   0xB1A1             CBZ.N    R1,??emberAfScenesClusterServerCommandParse_1
   \        0xE   0x2901             CMP      R1,#+1
   \       0x10   0xD034             BEQ.N    ??emberAfScenesClusterServerCommandParse_2
   \       0x12   0x2902             CMP      R1,#+2
   \       0x14   0xD03C             BEQ.N    ??emberAfScenesClusterServerCommandParse_3
   \       0x16   0x2903             CMP      R1,#+3
   \       0x18   0xD044             BEQ.N    ??emberAfScenesClusterServerCommandParse_4
   \       0x1A   0x2904             CMP      R1,#+4
   \       0x1C   0xD04A             BEQ.N    ??emberAfScenesClusterServerCommandParse_5
   \       0x1E   0x2905             CMP      R1,#+5
   \       0x20   0xD052             BEQ.N    ??emberAfScenesClusterServerCommandParse_6
   \       0x22   0x2906             CMP      R1,#+6
   \       0x24   0xD06E             BEQ.N    ??emberAfScenesClusterServerCommandParse_7
   \       0x26   0x2940             CMP      R1,#+64
   \       0x28   0xD074             BEQ.N    ??emberAfScenesClusterServerCommandParse_8
   \       0x2A   0x2941             CMP      R1,#+65
   \       0x2C   0xF000 0x8094      BEQ.W    ??emberAfScenesClusterServerCommandParse_9
   \       0x30   0x2942             CMP      R1,#+66
   \       0x32   0xF000 0x809B      BEQ.W    ??emberAfScenesClusterServerCommandParse_10
   \                     ??emberAfScenesClusterServerCommandParse_0: (+1)
   \       0x36   0xE0B7             B.N      ??emberAfScenesClusterServerCommandParse_11
    256              case ZCL_ADD_SCENE_COMMAND_ID:
    257                {
    258                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_1: (+1)
   \       0x38   0x....'....        BL       ?Subroutine27
    259                  uint16_t groupId;  // Ver.: always
    260                  uint8_t sceneId;  // Ver.: always
    261                  uint16_t transitionTime;  // Ver.: always
    262                  uint8_t* sceneName;  // Ver.: always
    263                  uint8_t* extensionFieldSets;  // Ver.: always
    264                  // Command is not a fixed length
    265                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_79: (+1)
   \       0x3C   0xD320             BCC.N    ??CrossCallReturnLabel_8
    266                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x3E   0x....'....        BL       ?Subroutine10
    267                  payloadOffset += 2u;
    268                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_28: (+1)
   \       0x42   0x89A2             LDRH     R2,[R4, #+12]
   \       0x44   0x4605             MOV      R5,R0
   \       0x46   0x42BA             CMP      R2,R7
   \       0x48   0xBF21             ITTTT    CS 
   \       0x4A   0x68A0             LDRCS    R0,[R4, #+8]
   \       0x4C   0x5D86             LDRBCS   R6,[R0, R6]
   \       0x4E   0x1CBB             ADDCS    R3,R7,#+2
   \       0x50   0x429A             CMPCS    R2,R3
    269                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    270                  payloadOffset += 1u;
    271                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x52   0xD315             BCC.N    ??CrossCallReturnLabel_8
    272                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x54   0x....'....        BL       ??Subroutine16_0
   \                     ??CrossCallReturnLabel_47: (+1)
   \       0x58   0x....'....        BL       ?Subroutine12
    273                  payloadOffset += 2u;
    274                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_35: (+1)
   \       0x5C   0x89A2             LDRH     R2,[R4, #+12]
   \       0x5E   0x19C0             ADDS     R0,R0,R7
   \       0x60   0x1C40             ADDS     R0,R0,#+1
   \       0x62   0x4282             CMP      R2,R0
   \       0x64   0xD30C             BCC.N    ??CrossCallReturnLabel_8
    275                  sceneName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x66   0x68A0             LDR      R0,[R4, #+8]
   \       0x68   0x4639             MOV      R1,R7
   \       0x6A   0x....'....        BL       emberAfGetString
   \       0x6E   0x....'....        BL       ?Subroutine25
    276                  payloadOffset += emberAfStringLength(cmd->buffer + payloadOffset) + 1u;
    277                  extensionFieldSets = cmd->buffer + payloadOffset;
    278                  wasHandled = emberAfScenesClusterAddSceneCallback(groupId,
    279                                                                    sceneId,
    280                                                                    transitionTime,
    281                                                                    sceneName,
    282                                                                    extensionFieldSets);
   \                     ??CrossCallReturnLabel_75: (+1)
   \       0x72   0x....'....        BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_66: (+1)
   \       0x76   0x....'....        BL       emberAfScenesClusterAddSceneCallback
    283                  break;
   \       0x7A   0xE095             B.N      ??emberAfScenesClusterServerCommandParse_11
    284                }
    285              case ZCL_VIEW_SCENE_COMMAND_ID:
    286                {
    287                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_2: (+1)
   \       0x7C   0x....'....        BL       ?Subroutine4
    288                  uint16_t groupId;  // Ver.: always
    289                  uint8_t sceneId;  // Ver.: always
    290                  // Command is fixed length: 3
    291                  if (cmd->bufLen < payloadOffset + 3u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x80   0xD379             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    292                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x82   0x....'....        BL       ?Subroutine9
    293                  payloadOffset += 2u;
    294                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    295                  wasHandled = emberAfScenesClusterViewSceneCallback(groupId,
    296                                                                     sceneId);
   \                     ??CrossCallReturnLabel_24: (+1)
   \       0x86   0x....'....        BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_82: (+1)
   \       0x8A   0x....'....        BL       emberAfScenesClusterViewSceneCallback
    297                  break;
   \       0x8E   0xE08B             B.N      ??emberAfScenesClusterServerCommandParse_11
    298                }
    299              case ZCL_REMOVE_SCENE_COMMAND_ID:
    300                {
    301                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_3: (+1)
   \       0x90   0x....'....        BL       ?Subroutine4
    302                  uint16_t groupId;  // Ver.: always
    303                  uint8_t sceneId;  // Ver.: always
    304                  // Command is fixed length: 3
    305                  if (cmd->bufLen < payloadOffset + 3u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x94   0xD36F             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    306                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x96   0x....'....        BL       ?Subroutine9
    307                  payloadOffset += 2u;
    308                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    309                  wasHandled = emberAfScenesClusterRemoveSceneCallback(groupId,
    310                                                                       sceneId);
   \                     ??CrossCallReturnLabel_23: (+1)
   \       0x9A   0x....'....        BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_83: (+1)
   \       0x9E   0x....'....        BL       emberAfScenesClusterRemoveSceneCallback
    311                  break;
   \       0xA2   0xE081             B.N      ??emberAfScenesClusterServerCommandParse_11
    312                }
    313              case ZCL_REMOVE_ALL_SCENES_COMMAND_ID:
    314                {
    315                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_4: (+1)
   \       0xA4   0x....'....        BL       ?Subroutine3
    316                  uint16_t groupId;  // Ver.: always
    317                  // Command is fixed length: 2
    318                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0xA8   0xD365             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    319                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xAA   0x....'....        BL       ?Subroutine11
    320                  wasHandled = emberAfScenesClusterRemoveAllScenesCallback(groupId);
   \                     ??CrossCallReturnLabel_30: (+1)
   \       0xAE   0x....'....        BL       emberAfScenesClusterRemoveAllScenesCallback
    321                  break;
   \       0xB2   0xE079             B.N      ??emberAfScenesClusterServerCommandParse_11
    322                }
    323              case ZCL_STORE_SCENE_COMMAND_ID:
    324                {
    325                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_5: (+1)
   \       0xB4   0x....'....        BL       ?Subroutine4
    326                  uint16_t groupId;  // Ver.: always
    327                  uint8_t sceneId;  // Ver.: always
    328                  // Command is fixed length: 3
    329                  if (cmd->bufLen < payloadOffset + 3u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0xB8   0xD35D             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    330                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xBA   0x....'....        BL       ?Subroutine9
    331                  payloadOffset += 2u;
    332                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    333                  wasHandled = emberAfScenesClusterStoreSceneCallback(groupId,
    334                                                                      sceneId);
   \                     ??CrossCallReturnLabel_22: (+1)
   \       0xBE   0x....'....        BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_84: (+1)
   \       0xC2   0x....'....        BL       emberAfScenesClusterStoreSceneCallback
    335                  break;
   \       0xC6   0xE06F             B.N      ??emberAfScenesClusterServerCommandParse_11
    336                }
    337              case ZCL_RECALL_SCENE_COMMAND_ID:
    338                {
    339                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_6: (+1)
   \       0xC8   0x....'....        BL       ?Subroutine27
    340                  uint16_t groupId;  // Ver.: always
    341                  uint8_t sceneId;  // Ver.: always
    342                  uint16_t transitionTime;  // Ver.: since zcl-7.0-07-5123-07
    343                  // Command is not a fixed length
    344                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_80: (+1)
   \       0xCC   0xD353             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    345                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xCE   0x68A0             LDR      R0,[R4, #+8]
   \       0xD0   0x4631             MOV      R1,R6
   \       0xD2   0x1CB6             ADDS     R6,R6,#+2
   \       0xD4   0xB2B6             UXTH     R6,R6
   \       0xD6   0x....'....        BL       emberAfGetInt16u
    346                  payloadOffset += 2u;
    347                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0xDA   0x89A2             LDRH     R2,[R4, #+12]
   \       0xDC   0x1C71             ADDS     R1,R6,#+1
   \       0xDE   0x4605             MOV      R5,R0
   \       0xE0   0x428A             CMP      R2,R1
   \       0xE2   0xD348             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    348                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xE4   0x68A0             LDR      R0,[R4, #+8]
    349                  payloadOffset += 1u;
    350                  if ( ( cmd->bufLen < payloadOffset + 2u)) {
   \       0xE6   0x1C8F             ADDS     R7,R1,#+2
   \       0xE8   0x42BA             CMP      R2,R7
   \       0xEA   0x5D86             LDRB     R6,[R0, R6]
   \       0xEC   0xBF32             ITEE     CC 
    351                    // Argument is not always present:
    352                    // - it is present only in versions higher than: zcl-7.0-07-5123-07
    353                    transitionTime = 0xFFFF;
   \       0xEE   0xF64F 0x70FF      MOVWCC   R0,#+65535
    354                  } else {
    355                    transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xF2   0xB289             UXTHCS   R1,R1
   \       0xF4   0x....'....        BLCS     emberAfGetInt16u
    356                  }
    357                  wasHandled = emberAfScenesClusterRecallSceneCallback(groupId,
    358                                                                       sceneId,
    359                                                                       transitionTime);
   \       0xF8   0x4602             MOV      R2,R0
   \       0xFA   0x4631             MOV      R1,R6
   \       0xFC   0x4628             MOV      R0,R5
   \       0xFE   0x....'....        BL       emberAfScenesClusterRecallSceneCallback
    360                  break;
   \      0x102   0xE051             B.N      ??emberAfScenesClusterServerCommandParse_11
    361                }
    362              case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID:
    363                {
    364                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_7: (+1)
   \      0x104   0x....'....        BL       ?Subroutine3
    365                  uint16_t groupId;  // Ver.: always
    366                  // Command is fixed length: 2
    367                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_7: (+1)
   \      0x108   0xD335             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    368                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x10A   0x....'....        BL       ?Subroutine11
    369                  wasHandled = emberAfScenesClusterGetSceneMembershipCallback(groupId);
   \                     ??CrossCallReturnLabel_29: (+1)
   \      0x10E   0x....'....        BL       emberAfScenesClusterGetSceneMembershipCallback
    370                  break;
   \      0x112   0xE049             B.N      ??emberAfScenesClusterServerCommandParse_11
    371                }
    372              case ZCL_ENHANCED_ADD_SCENE_COMMAND_ID:
    373                {
    374                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_8: (+1)
   \      0x114   0x....'....        BL       ?Subroutine27
    375                  uint16_t groupId;  // Ver.: always
    376                  uint8_t sceneId;  // Ver.: always
    377                  uint16_t transitionTime;  // Ver.: always
    378                  uint8_t* sceneName;  // Ver.: always
    379                  uint8_t* extensionFieldSets;  // Ver.: always
    380                  // Command is not a fixed length
    381                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_81: (+1)
   \      0x118   0xD32D             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    382                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x11A   0x....'....        BL       ?Subroutine10
    383                  payloadOffset += 2u;
    384                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_27: (+1)
   \      0x11E   0x89A2             LDRH     R2,[R4, #+12]
   \      0x120   0x4605             MOV      R5,R0
   \      0x122   0x42BA             CMP      R2,R7
   \      0x124   0xBF21             ITTTT    CS 
   \      0x126   0x68A0             LDRCS    R0,[R4, #+8]
   \      0x128   0x5D86             LDRBCS   R6,[R0, R6]
   \      0x12A   0x1CBB             ADDCS    R3,R7,#+2
   \      0x12C   0x429A             CMPCS    R2,R3
    385                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    386                  payloadOffset += 1u;
    387                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x12E   0xD322             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    388                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x130   0x....'....        BL       ??Subroutine16_0
   \                     ??CrossCallReturnLabel_46: (+1)
   \      0x134   0x....'....        BL       ?Subroutine12
    389                  payloadOffset += 2u;
    390                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_34: (+1)
   \      0x138   0x89A2             LDRH     R2,[R4, #+12]
   \      0x13A   0x19C0             ADDS     R0,R0,R7
   \      0x13C   0x1C40             ADDS     R0,R0,#+1
   \      0x13E   0x4282             CMP      R2,R0
   \      0x140   0xD319             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    391                  sceneName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x142   0x68A0             LDR      R0,[R4, #+8]
   \      0x144   0x4639             MOV      R1,R7
   \      0x146   0x....'....        BL       emberAfGetString
   \      0x14A   0x....'....        BL       ?Subroutine25
    392                  payloadOffset += emberAfStringLength(cmd->buffer + payloadOffset) + 1u;
    393                  extensionFieldSets = cmd->buffer + payloadOffset;
    394                  wasHandled = emberAfScenesClusterEnhancedAddSceneCallback(groupId,
    395                                                                            sceneId,
    396                                                                            transitionTime,
    397                                                                            sceneName,
    398                                                                            extensionFieldSets);
   \                     ??CrossCallReturnLabel_74: (+1)
   \      0x14E   0x....'....        BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_67: (+1)
   \      0x152   0x....'....        BL       emberAfScenesClusterEnhancedAddSceneCallback
    399                  break;
   \      0x156   0xE027             B.N      ??emberAfScenesClusterServerCommandParse_11
    400                }
    401              case ZCL_ENHANCED_VIEW_SCENE_COMMAND_ID:
    402                {
    403                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_9: (+1)
   \      0x158   0x....'....        BL       ?Subroutine4
    404                  uint16_t groupId;  // Ver.: always
    405                  uint8_t sceneId;  // Ver.: always
    406                  // Command is fixed length: 3
    407                  if (cmd->bufLen < payloadOffset + 3u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_11: (+1)
   \      0x15C   0xD30B             BCC.N    ??emberAfScenesClusterServerCommandParse_12
    408                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x15E   0x....'....        BL       ?Subroutine9
    409                  payloadOffset += 2u;
    410                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    411                  wasHandled = emberAfScenesClusterEnhancedViewSceneCallback(groupId,
    412                                                                             sceneId);
   \                     ??CrossCallReturnLabel_21: (+1)
   \      0x162   0x....'....        BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_85: (+1)
   \      0x166   0x....'....        BL       emberAfScenesClusterEnhancedViewSceneCallback
    413                  break;
   \      0x16A   0xE01D             B.N      ??emberAfScenesClusterServerCommandParse_11
    414                }
    415              case ZCL_COPY_SCENE_COMMAND_ID:
    416                {
    417                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_10: (+1)
   \      0x16C   0x7D25             LDRB     R5,[R4, #+20]
    418                  uint8_t mode;  // Ver.: always
    419                  uint16_t groupIdFrom;  // Ver.: always
    420                  uint8_t sceneIdFrom;  // Ver.: always
    421                  uint16_t groupIdTo;  // Ver.: always
    422                  uint8_t sceneIdTo;  // Ver.: always
    423                  // Command is fixed length: 7
    424                  if (cmd->bufLen < payloadOffset + 7u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x16E   0x89A2             LDRH     R2,[R4, #+12]
   \      0x170   0x1DE9             ADDS     R1,R5,#+7
   \      0x172   0x428A             CMP      R2,R1
   \      0x174   0xD201             BCS.N    ??emberAfScenesClusterServerCommandParse_13
   \                     ??emberAfScenesClusterServerCommandParse_12: (+1)
   \      0x176   0x2080             MOVS     R0,#+128
   \      0x178   0xE01B             B.N      ??emberAfScenesClusterServerCommandParse_14
    425                  mode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfScenesClusterServerCommandParse_13: (+1)
   \      0x17A   0x....'....        BL       ?Subroutine13
    426                  payloadOffset += 1u;
    427                  groupIdFrom = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??CrossCallReturnLabel_37: (+1)
   \      0x17E   0x4607             MOV      R7,R0
    428                  payloadOffset += 2u;
    429                  sceneIdFrom = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x180   0x68A0             LDR      R0,[R4, #+8]
   \      0x182   0x1CAD             ADDS     R5,R5,#+2
    430                  payloadOffset += 1u;
    431                  groupIdTo = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x184   0x89A2             LDRH     R2,[R4, #+12]
   \      0x186   0xF810 0x8005      LDRB     R8,[R0, R5]
   \      0x18A   0x1C6D             ADDS     R5,R5,#+1
   \      0x18C   0xB2A9             UXTH     R1,R5
   \      0x18E   0x....'....        BL       emberAfGetInt16u
   \      0x192   0x4603             MOV      R3,R0
    432                  payloadOffset += 2u;
    433                  sceneIdTo = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    434                  wasHandled = emberAfScenesClusterCopySceneCallback(mode,
    435                                                                     groupIdFrom,
    436                                                                     sceneIdFrom,
    437                                                                     groupIdTo,
    438                                                                     sceneIdTo);
   \      0x194   0x68A0             LDR      R0,[R4, #+8]
   \      0x196   0x1CAD             ADDS     R5,R5,#+2
   \      0x198   0xB2AD             UXTH     R5,R5
   \      0x19A   0x5D41             LDRB     R1,[R0, R5]
   \      0x19C   0x4642             MOV      R2,R8
   \      0x19E   0x4630             MOV      R0,R6
   \      0x1A0   0x9100             STR      R1,[SP, #+0]
   \      0x1A2   0x4639             MOV      R1,R7
   \      0x1A4   0x....'....        BL       emberAfScenesClusterCopySceneCallback
    439                  break;
    440                }
    441              default:
    442                {
    443                  // Unrecognized command ID, error status will apply.
    444                  break;
    445                }
    446              }
    447            }
    448            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfScenesClusterServerCommandParse_11: (+1)
   \      0x1A8   0x7BE2             LDRB     R2,[R4, #+15]
   \      0x1AA   0x2101             MOVS     R1,#+1
   \      0x1AC   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \      0x1B0   0x....             B.N      status
   \                     ??emberAfScenesClusterServerCommandParse_14: (+1)
   \      0x1B2   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    449          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28: (+1)
   \        0x0   0x68A1             LDR      R1,[R4, #+8]
   \        0x2   0xB2AD             UXTH     R5,R5
   \        0x4   0x5D49             LDRB     R1,[R1, R5]
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27: (+1)
   \        0x0   0x7D26             LDRB     R6,[R4, #+20]
   \        0x2   0x89A2             LDRH     R2,[R4, #+12]
   \        0x4   0x1CB1             ADDS     R1,R6,#+2
   \        0x6   0x428A             CMP      R2,R1
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25: (+1)
   \        0x0   0x4681             MOV      R9,R0
   \        0x2   0x68A0             LDR      R0,[R4, #+8]
   \        0x4   0x4438             ADD      R0,R0,R7
   \        0x6   0x....'....        B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22: (+1)
   \        0x0   0x68A1             LDR      R1,[R4, #+8]
   \        0x2   0x19C7             ADDS     R7,R0,R7
   \        0x4   0x1C7F             ADDS     R7,R7,#+1
   \        0x6   0xB2BF             UXTH     R7,R7
   \        0x8   0x19C8             ADDS     R0,R1,R7
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x464B             MOV      R3,R9
   \        0xE   0x4642             MOV      R2,R8
   \       0x10   0x4631             MOV      R1,R6
   \       0x12   0x4628             MOV      R0,R5
   \       0x14   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \        0x0   0x4680             MOV      R8,R0
   \        0x2   0x68A0             LDR      R0,[R4, #+8]
   \        0x4   0x1CBF             ADDS     R7,R7,#+2
   \        0x6   0xB2BF             UXTH     R7,R7
   \        0x8   0x4438             ADD      R0,R0,R7
   \        0xA   0x....'....        B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \        0x0   0x68A0             LDR      R0,[R4, #+8]
   \        0x2   0x4631             MOV      R1,R6
   \        0x4   0x1CB6             ADDS     R6,R6,#+2
   \        0x6   0xB2B6             UXTH     R6,R6
   \        0x8   0x1C77             ADDS     R7,R6,#+1
   \        0xA   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x7D25             LDRB     R5,[R4, #+20]
   \        0x2   0x89A2             LDRH     R2,[R4, #+12]
   \        0x4   0x1CE9             ADDS     R1,R5,#+3
   \        0x6   0x428A             CMP      R2,R1
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \        0x0   0x68A0             LDR      R0,[R4, #+8]
   \        0x2   0x5D46             LDRB     R6,[R0, R5]
   \        0x4   0x1C6D             ADDS     R5,R5,#+1
   \        0x6   0xB2A9             UXTH     R1,R5
   \        0x8   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16: (+1)
   \        0x0   0x68A8             LDR      R0,[R5, #+8]
   \                     ??Subroutine16_0: (+1)
   \        0x2   0xB2B9             UXTH     R1,R7
   \        0x4   0x....'....        B.W      emberAfGetInt16u
    450          
    451          // Cluster: On/off, server

   \                                 In section .text, align 2, keep-with-next
    452          EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand *cmd)
    453          {
   \                     emberAfOnOffClusterServerCommandParse: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x....'....        BL       ?Subroutine2
    454            bool wasHandled = false;
    455            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_2: (+1)
   \        0x6   0xD137             BNE.N    ??emberAfOnOffClusterServerCommandParse_0
    456              switch (cmd->commandId) {
   \        0x8   0x7CE1             LDRB     R1,[R4, #+19]
   \        0xA   0xB151             CBZ.N    R1,??emberAfOnOffClusterServerCommandParse_1
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD00B             BEQ.N    ??emberAfOnOffClusterServerCommandParse_2
   \       0x10   0x2902             CMP      R1,#+2
   \       0x12   0xD00C             BEQ.N    ??emberAfOnOffClusterServerCommandParse_3
   \       0x14   0x2940             CMP      R1,#+64
   \       0x16   0xD00D             BEQ.N    ??emberAfOnOffClusterServerCommandParse_4
   \       0x18   0x2941             CMP      R1,#+65
   \       0x1A   0xD015             BEQ.N    ??emberAfOnOffClusterServerCommandParse_5
   \       0x1C   0x2942             CMP      R1,#+66
   \       0x1E   0xD016             BEQ.N    ??emberAfOnOffClusterServerCommandParse_6
   \       0x20   0xE02A             B.N      ??emberAfOnOffClusterServerCommandParse_0
    457              case ZCL_OFF_COMMAND_ID:
    458                {
    459                  // Command is fixed length: 0
    460                  wasHandled = emberAfOnOffClusterOffCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_1: (+1)
   \       0x22   0x....'....        BL       emberAfOnOffClusterOffCallback
    461                  break;
   \       0x26   0xE027             B.N      ??emberAfOnOffClusterServerCommandParse_0
    462                }
    463              case ZCL_ON_COMMAND_ID:
    464                {
    465                  // Command is fixed length: 0
    466                  wasHandled = emberAfOnOffClusterOnCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_2: (+1)
   \       0x28   0x....'....        BL       emberAfOnOffClusterOnCallback
    467                  break;
   \       0x2C   0xE024             B.N      ??emberAfOnOffClusterServerCommandParse_0
    468                }
    469              case ZCL_TOGGLE_COMMAND_ID:
    470                {
    471                  // Command is fixed length: 0
    472                  wasHandled = emberAfOnOffClusterToggleCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_3: (+1)
   \       0x2E   0x....'....        BL       emberAfOnOffClusterToggleCallback
    473                  break;
   \       0x32   0xE021             B.N      ??emberAfOnOffClusterServerCommandParse_0
    474                }
    475              case ZCL_OFF_WITH_EFFECT_COMMAND_ID:
    476                {
    477                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfOnOffClusterServerCommandParse_4: (+1)
   \       0x34   0x7D20             LDRB     R0,[R4, #+20]
    478                  uint8_t effectId;  // Ver.: always
    479                  uint8_t effectVariant;  // Ver.: always
    480                  // Command is fixed length: 2
    481                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x36   0x89A1             LDRH     R1,[R4, #+12]
   \       0x38   0x1C82             ADDS     R2,R0,#+2
   \       0x3A   0x4291             CMP      R1,R2
   \       0x3C   0xD30C             BCC.N    ??emberAfOnOffClusterServerCommandParse_7
    482                  effectId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    483                  payloadOffset += 1u;
    484                  effectVariant = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    485                  wasHandled = emberAfOnOffClusterOffWithEffectCallback(effectId,
    486                                                                        effectVariant);
   \       0x3E   0x....'....        BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_65: (+1)
   \       0x42   0x....'....        BL       emberAfOnOffClusterOffWithEffectCallback
    487                  break;
   \       0x46   0xE017             B.N      ??emberAfOnOffClusterServerCommandParse_0
    488                }
    489              case ZCL_ON_WITH_RECALL_GLOBAL_SCENE_COMMAND_ID:
    490                {
    491                  // Command is fixed length: 0
    492                  wasHandled = emberAfOnOffClusterOnWithRecallGlobalSceneCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_5: (+1)
   \       0x48   0x....'....        BL       emberAfOnOffClusterOnWithRecallGlobalSceneCallback
    493                  break;
   \       0x4C   0xE014             B.N      ??emberAfOnOffClusterServerCommandParse_0
    494                }
    495              case ZCL_ON_WITH_TIMED_OFF_COMMAND_ID:
    496                {
    497                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfOnOffClusterServerCommandParse_6: (+1)
   \       0x4E   0x7D25             LDRB     R5,[R4, #+20]
    498                  uint8_t onOffControl;  // Ver.: always
    499                  uint16_t onTime;  // Ver.: always
    500                  uint16_t offWaitTime;  // Ver.: always
    501                  // Command is fixed length: 5
    502                  if (cmd->bufLen < payloadOffset + 5u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x50   0x89A2             LDRH     R2,[R4, #+12]
   \       0x52   0x1D69             ADDS     R1,R5,#+5
   \       0x54   0x428A             CMP      R2,R1
   \       0x56   0xD201             BCS.N    ??emberAfOnOffClusterServerCommandParse_8
   \                     ??emberAfOnOffClusterServerCommandParse_7: (+1)
   \       0x58   0x2080             MOVS     R0,#+128
   \       0x5A   0xBDF2             POP      {R1,R4-R7,PC}
    503                  onOffControl = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfOnOffClusterServerCommandParse_8: (+1)
   \       0x5C   0x....'....        BL       ?Subroutine13
    504                  payloadOffset += 1u;
    505                  onTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??CrossCallReturnLabel_36: (+1)
   \       0x60   0x4607             MOV      R7,R0
    506                  payloadOffset += 2u;
    507                  offWaitTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x62   0x89A2             LDRH     R2,[R4, #+12]
   \       0x64   0x68A0             LDR      R0,[R4, #+8]
   \       0x66   0x1CAD             ADDS     R5,R5,#+2
   \       0x68   0xB2A9             UXTH     R1,R5
   \       0x6A   0x....'....        BL       emberAfGetInt16u
    508                  wasHandled = emberAfOnOffClusterOnWithTimedOffCallback(onOffControl,
    509                                                                         onTime,
    510                                                                         offWaitTime);
   \       0x6E   0x4602             MOV      R2,R0
   \       0x70   0x4639             MOV      R1,R7
   \       0x72   0x4630             MOV      R0,R6
   \       0x74   0x....'....        BL       emberAfOnOffClusterOnWithTimedOffCallback
    511                  break;
    512                }
    513              default:
    514                {
    515                  // Unrecognized command ID, error status will apply.
    516                  break;
    517                }
    518              }
    519            }
    520            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfOnOffClusterServerCommandParse_0: (+1)
   \       0x78                      REQUIRE ?Subroutine1
   \       0x78                      ;; // Fall through to label ?Subroutine1
    521          }
    522          
    523          // Cluster: Level Control, server

   \                                 In section .text, align 4, keep-with-next
    524          EmberAfStatus emberAfLevelControlClusterServerCommandParse(EmberAfClusterCommand *cmd)
    525          {
   \                     emberAfLevelControlClusterServerCommandParse: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
    526            bool wasHandled = false;
    527            if (!cmd->mfgSpecific) {
   \        0x6   0x7BE9             LDRB     R1,[R5, #+15]
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD12C             BNE.N    ??emberAfLevelControlClusterServerCommandParse_1
    528              switch (cmd->commandId) {
   \        0xE   0x7CE9             LDRB     R1,[R5, #+19]
   \       0x10   0x24FF             MOVS     R4,#+255
   \       0x12   0x2907             CMP      R1,#+7
   \       0x14   0xD828             BHI.N    ??emberAfLevelControlClusterServerCommandParse_1
   \       0x16   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfLevelControlClusterServerCommandParse_0:
   \       0x1A   0x04 0x28          DC8      0x4,0x28,0x41,0x63
   \              0x41 0x63    
   \       0x1E   0x72 0x80          DC8      0x72,0x80,0x8D,0xA0
   \              0x8D 0xA0    
    529              case ZCL_MOVE_TO_LEVEL_COMMAND_ID:
    530                {
    531                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_2: (+1)
   \       0x22   0x7D29             LDRB     R1,[R5, #+20]
    532                  uint8_t level;  // Ver.: always
    533                  uint16_t transitionTime;  // Ver.: always
    534                  uint8_t optionMask;  // Ver.: since zcl6-errata-14-0129-15
    535                  uint8_t optionOverride;  // Ver.: since zcl6-errata-14-0129-15
    536                  // Command is not a fixed length
    537                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x24   0x89AA             LDRH     R2,[R5, #+12]
   \       0x26   0x1C4E             ADDS     R6,R1,#+1
   \       0x28   0x42B2             CMP      R2,R6
   \       0x2A   0xBF21             ITTTT    CS 
   \       0x2C   0x68A8             LDRCS    R0,[R5, #+8]
   \       0x2E   0x5C47             LDRBCS   R7,[R0, R1]
   \       0x30   0x1CB1             ADDCS    R1,R6,#+2
   \       0x32   0x428A             CMPCS    R2,R1
    538                  level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    539                  payloadOffset += 1u;
    540                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x34   0xD31B             BCC.N    ??CrossCallReturnLabel_86
    541                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x36   0xB2B1             UXTH     R1,R6
   \       0x38   0x....'....        BL       emberAfGetInt16u
   \       0x3C   0x4601             MOV      R1,R0
    542                  payloadOffset += 2u;
   \       0x3E   0x1CB6             ADDS     R6,R6,#+2
    543                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0x40   0x89A8             LDRH     R0,[R5, #+12]
   \       0x42   0xB2B6             UXTH     R6,R6
   \       0x44   0x1C72             ADDS     R2,R6,#+1
   \       0x46   0x4290             CMP      R0,R2
   \       0x48   0xBF38             IT       CC 
   \       0x4A   0x22FF             MOVCC    R2,#+255
    544                    // Argument is not always present:
    545                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    546                    optionMask = 0xFF;
   \       0x4C   0xD303             BCC.N    ??emberAfLevelControlClusterServerCommandParse_3
    547                  } else {
    548                    optionMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x4E   0x68AB             LDR      R3,[R5, #+8]
   \       0x50   0x5D9A             LDRB     R2,[R3, R6]
    549                    payloadOffset += 1u;
   \       0x52   0x1C76             ADDS     R6,R6,#+1
   \       0x54   0xB2B6             UXTH     R6,R6
    550                  }
    551                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfLevelControlClusterServerCommandParse_3: (+1)
   \       0x56   0x1C73             ADDS     R3,R6,#+1
   \       0x58   0x4298             CMP      R0,R3
   \       0x5A   0xBF32             ITEE     CC 
   \       0x5C   0x23FF             MOVCC    R3,#+255
   \       0x5E   0x68A8             LDRCS    R0,[R5, #+8]
   \       0x60   0x5D83             LDRBCS   R3,[R0, R6]
    552                    // Argument is not always present:
    553                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    554                    optionOverride = 0xFF;
    555                  } else {
    556                    optionOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    557                  }
    558                  wasHandled = emberAfLevelControlClusterMoveToLevelCallback(level,
    559                                                                             transitionTime,
    560                                                                             optionMask,
    561                                                                             optionOverride);
   \       0x62   0x4638             MOV      R0,R7
   \       0x64   0x....'....        BL       emberAfLevelControlClusterMoveToLevelCallback
    562                  break;
   \                     ??emberAfLevelControlClusterServerCommandParse_1: (+1)
   \       0x68   0xE079             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    563                }
    564              case ZCL_MOVE_COMMAND_ID:
    565                {
    566                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_5: (+1)
   \       0x6A   0x....'....        BL       ?Subroutine29
    567                  uint8_t moveMode;  // Ver.: always
    568                  uint8_t rate;  // Ver.: always
    569                  uint8_t optionMask;  // Ver.: since zcl6-errata-14-0129-15
    570                  uint8_t optionOverride;  // Ver.: since zcl6-errata-14-0129-15
    571                  // Command is not a fixed length
    572                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_86: (+1)
   \       0x6E   0xD366             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    573                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x70   0x68AE             LDR      R6,[R5, #+8]
   \       0x72   0x5DF0             LDRB     R0,[R6, R7]
    574                  payloadOffset += 1u;
   \       0x74   0x....'....        BL       ??Subroutine23_0
    575                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_70: (+1)
   \       0x78   0xD361             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    576                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x7A   0x5DF1             LDRB     R1,[R6, R7]
    577                  payloadOffset += 1u;
   \       0x7C   0x....'....        BL       ??Subroutine24_0
    578                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_73: (+1)
   \       0x80   0xBF31             ITEEE    CC 
   \       0x82   0x22FF             MOVCC    R2,#+255
   \       0x84   0x5DF2             LDRBCS   R2,[R6, R7]
   \       0x86   0x1C7F             ADDCS    R7,R7,#+1
   \       0x88   0xB2BF             UXTHCS   R7,R7
    579                    // Argument is not always present:
    580                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    581                    optionMask = 0xFF;
    582                  } else {
    583                    optionMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    584                    payloadOffset += 1u;
    585                  }
    586                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0x8A   0xF107 0x0C01      ADD      R12,R7,#+1
   \       0x8E   0x4563             CMP      R3,R12
   \       0x90   0xBF34             ITE      CC 
   \       0x92   0x23FF             MOVCC    R3,#+255
   \       0x94   0x5DF3             LDRBCS   R3,[R6, R7]
    587                    // Argument is not always present:
    588                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    589                    optionOverride = 0xFF;
    590                  } else {
    591                    optionOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    592                  }
    593                  wasHandled = emberAfLevelControlClusterMoveCallback(moveMode,
    594                                                                      rate,
    595                                                                      optionMask,
    596                                                                      optionOverride);
   \       0x96   0x....'....        BL       emberAfLevelControlClusterMoveCallback
    597                  break;
   \       0x9A   0xE060             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    598                }
    599              case ZCL_STEP_COMMAND_ID:
    600                {
    601                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_7: (+1)
   \       0x9C   0x7D2B             LDRB     R3,[R5, #+20]
    602                  uint8_t stepMode;  // Ver.: always
    603                  uint8_t stepSize;  // Ver.: always
    604                  uint16_t transitionTime;  // Ver.: always
    605                  uint8_t optionMask;  // Ver.: since zcl6-errata-14-0129-15
    606                  uint8_t optionOverride;  // Ver.: since zcl6-errata-14-0129-15
    607                  // Command is not a fixed length
    608                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x9E   0x89AA             LDRH     R2,[R5, #+12]
   \       0xA0   0x1C58             ADDS     R0,R3,#+1
   \       0xA2   0x4282             CMP      R2,R0
   \       0xA4   0xD34B             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    609                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xA6   0x68A8             LDR      R0,[R5, #+8]
   \       0xA8   0x5CC6             LDRB     R6,[R0, R3]
    610                  payloadOffset += 1u;
   \       0xAA   0x1C5B             ADDS     R3,R3,#+1
   \       0xAC   0xB29B             UXTH     R3,R3
    611                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0xAE   0x1C5F             ADDS     R7,R3,#+1
   \       0xB0   0x42BA             CMP      R2,R7
   \       0xB2   0xBF22             ITTT     CS 
   \       0xB4   0xF810 0x8003      LDRBCS   R8,[R0, R3]
   \       0xB8   0x1CBB             ADDCS    R3,R7,#+2
   \       0xBA   0x429A             CMPCS    R2,R3
    612                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    613                  payloadOffset += 1u;
    614                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0xBC   0xD33F             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    615                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xBE   0x....'....        BL       ??Subroutine16_0
    616                  payloadOffset += 2u;
   \                     ??CrossCallReturnLabel_45: (+1)
   \       0xC2   0x....'....        BL       ?Subroutine26
    617                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_76: (+1)
   \       0xC6   0xBF38             IT       CC 
   \       0xC8   0x23FF             MOVCC    R3,#+255
    618                    // Argument is not always present:
    619                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    620                    optionMask = 0xFF;
   \       0xCA   0x....'....        BL       ?Subroutine7
    621                  } else {
    622                    optionMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    623                    payloadOffset += 1u;
    624                  }
    625                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
    626                    // Argument is not always present:
    627                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    628                    optionOverride = 0xFF;
    629                  } else {
    630                    optionOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    631                  }
    632                  wasHandled = emberAfLevelControlClusterStepCallback(stepMode,
    633                                                                      stepSize,
    634                                                                      transitionTime,
    635                                                                      optionMask,
    636                                                                      optionOverride);
   \                     ??CrossCallReturnLabel_17: (+1)
   \       0xCE   0x4630             MOV      R0,R6
   \       0xD0   0xBF24             ITT      CS 
   \       0xD2   0x68A9             LDRCS    R1,[R5, #+8]
   \       0xD4   0x5DCC             LDRBCS   R4,[R1, R7]
   \       0xD6   0x9400             STR      R4,[SP, #+0]
   \       0xD8   0x4641             MOV      R1,R8
   \       0xDA   0x....'....        BL       emberAfLevelControlClusterStepCallback
    637                  break;
   \       0xDE   0xE03E             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    638                }
    639              case ZCL_STOP_COMMAND_ID:
    640                {
    641                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_8: (+1)
   \       0xE0   0x7D2A             LDRB     R2,[R5, #+20]
    642                  uint8_t optionMask;  // Ver.: since zcl6-errata-14-0129-15
    643                  uint8_t optionOverride;  // Ver.: since zcl6-errata-14-0129-15
    644                  // Command is not a fixed length
    645                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0xE2   0x89A9             LDRH     R1,[R5, #+12]
   \       0xE4   0x1C50             ADDS     R0,R2,#+1
   \       0xE6   0x4281             CMP      R1,R0
   \       0xE8   0xBF38             IT       CC 
   \       0xEA   0x20FF             MOVCC    R0,#+255
    646                    // Argument is not always present:
    647                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    648                    optionMask = 0xFF;
   \       0xEC   0x....'....        BL       ?Subroutine8
    649                  } else {
    650                    optionMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    651                    payloadOffset += 1u;
    652                  }
    653                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_19: (+1)
   \       0xF0   0xBF32             ITEE     CC 
   \       0xF2   0x21FF             MOVCC    R1,#+255
   \       0xF4   0x68A9             LDRCS    R1,[R5, #+8]
   \       0xF6   0x5C89             LDRBCS   R1,[R1, R2]
    654                    // Argument is not always present:
    655                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
    656                    optionOverride = 0xFF;
    657                  } else {
    658                    optionOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    659                  }
    660                  wasHandled = emberAfLevelControlClusterStopCallback(optionMask,
    661                                                                      optionOverride);
   \       0xF8   0x....'....        BL       emberAfLevelControlClusterStopCallback
    662                  break;
   \       0xFC   0xE02F             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    663                }
    664              case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID:
    665                {
    666                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_9: (+1)
   \       0xFE   0x7D29             LDRB     R1,[R5, #+20]
    667                  uint8_t level;  // Ver.: always
    668                  uint16_t transitionTime;  // Ver.: always
    669                  // Command is fixed length: 3
    670                  if (cmd->bufLen < payloadOffset + 3u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x100   0x89AA             LDRH     R2,[R5, #+12]
   \      0x102   0x1CCB             ADDS     R3,R1,#+3
   \      0x104   0x429A             CMP      R2,R3
   \      0x106   0xD31A             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    671                  level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x108   0x68A8             LDR      R0,[R5, #+8]
   \      0x10A   0x5C44             LDRB     R4,[R0, R1]
    672                  payloadOffset += 1u;
    673                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x10C   0x....'....        BL       ?Subroutine19
    674                  wasHandled = emberAfLevelControlClusterMoveToLevelWithOnOffCallback(level,
    675                                                                                      transitionTime);
   \                     ??CrossCallReturnLabel_61: (+1)
   \      0x110   0x4601             MOV      R1,R0
   \      0x112   0x4620             MOV      R0,R4
   \      0x114   0x....'....        BL       emberAfLevelControlClusterMoveToLevelWithOnOffCallback
    676                  break;
   \      0x118   0xE021             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    677                }
    678              case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID:
    679                {
    680                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_10: (+1)
   \      0x11A   0x7D2A             LDRB     R2,[R5, #+20]
    681                  uint8_t moveMode;  // Ver.: always
    682                  uint8_t rate;  // Ver.: always
    683                  // Command is fixed length: 2
    684                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x11C   0x89A8             LDRH     R0,[R5, #+12]
   \      0x11E   0x1C91             ADDS     R1,R2,#+2
   \      0x120   0x4288             CMP      R0,R1
   \      0x122   0xD30C             BCC.N    ??emberAfLevelControlClusterServerCommandParse_6
    685                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    686                  payloadOffset += 1u;
    687                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    688                  wasHandled = emberAfLevelControlClusterMoveWithOnOffCallback(moveMode,
    689                                                                               rate);
   \      0x124   0x68A8             LDR      R0,[R5, #+8]
   \      0x126   0x1C51             ADDS     R1,R2,#+1
   \      0x128   0xB289             UXTH     R1,R1
   \      0x12A   0x5C41             LDRB     R1,[R0, R1]
   \      0x12C   0x5C80             LDRB     R0,[R0, R2]
   \      0x12E   0x....'....        BL       emberAfLevelControlClusterMoveWithOnOffCallback
    690                  break;
   \      0x132   0xE014             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    691                }
    692              case ZCL_STEP_WITH_ON_OFF_COMMAND_ID:
    693                {
    694                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_11: (+1)
   \      0x134   0x7D29             LDRB     R1,[R5, #+20]
    695                  uint8_t stepMode;  // Ver.: always
    696                  uint8_t stepSize;  // Ver.: always
    697                  uint16_t transitionTime;  // Ver.: always
    698                  // Command is fixed length: 4
    699                  if (cmd->bufLen < payloadOffset + 4u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x136   0x89AA             LDRH     R2,[R5, #+12]
   \      0x138   0x1D0B             ADDS     R3,R1,#+4
   \      0x13A   0x429A             CMP      R2,R3
   \      0x13C   0xD201             BCS.N    ??emberAfLevelControlClusterServerCommandParse_12
   \                     ??emberAfLevelControlClusterServerCommandParse_6: (+1)
   \      0x13E   0x2080             MOVS     R0,#+128
   \      0x140   0xE013             B.N      ??emberAfLevelControlClusterServerCommandParse_13
    700                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfLevelControlClusterServerCommandParse_12: (+1)
   \      0x142   0x68A8             LDR      R0,[R5, #+8]
   \      0x144   0x5C44             LDRB     R4,[R0, R1]
    701                  payloadOffset += 1u;
   \      0x146   0x1C49             ADDS     R1,R1,#+1
    702                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x148   0x5C46             LDRB     R6,[R0, R1]
    703                  payloadOffset += 1u;
    704                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x14A   0x....'....        BL       ?Subroutine19
    705                  wasHandled = emberAfLevelControlClusterStepWithOnOffCallback(stepMode,
    706                                                                               stepSize,
    707                                                                               transitionTime);
   \                     ??CrossCallReturnLabel_60: (+1)
   \      0x14E   0x4602             MOV      R2,R0
   \      0x150   0x4631             MOV      R1,R6
   \      0x152   0x4620             MOV      R0,R4
   \      0x154   0x....'....        BL       emberAfLevelControlClusterStepWithOnOffCallback
    708                  break;
   \      0x158   0xE001             B.N      ??emberAfLevelControlClusterServerCommandParse_4
    709                }
    710              case ZCL_STOP_WITH_ON_OFF_COMMAND_ID:
    711                {
    712                  // Command is fixed length: 0
    713                  wasHandled = emberAfLevelControlClusterStopWithOnOffCallback();
   \                     ??emberAfLevelControlClusterServerCommandParse_14: (+1)
   \      0x15A   0x....'....        BL       emberAfLevelControlClusterStopWithOnOffCallback
    714                  break;
    715                }
    716              default:
    717                {
    718                  // Unrecognized command ID, error status will apply.
    719                  break;
    720                }
    721              }
    722            }
    723            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfLevelControlClusterServerCommandParse_4: (+1)
   \      0x15E   0x7BEA             LDRB     R2,[R5, #+15]
   \      0x160   0xB002             ADD      SP,SP,#+8
   \      0x162   0x2101             MOVS     R1,#+1
   \      0x164   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \      0x168   0x....             B.N      status
   \                     ??emberAfLevelControlClusterServerCommandParse_13: (+1)
   \      0x16A   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    724          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19: (+1)
   \        0x0   0x1C49             ADDS     R1,R1,#+1
   \                     ??Subroutine19_0: (+1)
   \        0x2   0xB289             UXTH     R1,R1
   \        0x4   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29: (+1)
   \        0x0   0x7D2F             LDRB     R7,[R5, #+20]
   \        0x2   0x89AB             LDRH     R3,[R5, #+12]
   \        0x4   0x1C78             ADDS     R0,R7,#+1
   \        0x6   0x4283             CMP      R3,R0
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26: (+1)
   \        0x0   0x1CBF             ADDS     R7,R7,#+2
   \        0x2   0x89A9             LDRH     R1,[R5, #+12]
   \        0x4   0xB2BF             UXTH     R7,R7
   \        0x6   0x1C7A             ADDS     R2,R7,#+1
   \        0x8   0x4291             CMP      R1,R2
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24: (+1)
   \        0x0   0x5DE1             LDRB     R1,[R4, R7]
   \                     ??Subroutine24_0: (+1)
   \        0x2   0x1C7F             ADDS     R7,R7,#+1
   \        0x4   0xB2BF             UXTH     R7,R7
   \        0x6   0x1C7A             ADDS     R2,R7,#+1
   \        0x8   0x4293             CMP      R3,R2
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23: (+1)
   \        0x0   0x68AC             LDR      R4,[R5, #+8]
   \        0x2   0x5DE0             LDRB     R0,[R4, R7]
   \                     ??Subroutine23_0: (+1)
   \        0x4   0x1C7F             ADDS     R7,R7,#+1
   \        0x6   0xB2BF             UXTH     R7,R7
   \        0x8   0x1C79             ADDS     R1,R7,#+1
   \        0xA   0x428B             CMP      R3,R1
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \        0x0   0xD303             BCC.N    ??Subroutine8_0
   \        0x2   0x68AB             LDR      R3,[R5, #+8]
   \        0x4   0x5C98             LDRB     R0,[R3, R2]
   \        0x6   0x1C52             ADDS     R2,R2,#+1
   \        0x8   0xB292             UXTH     R2,R2
   \                     ??Subroutine8_0: (+1)
   \        0xA   0x1C53             ADDS     R3,R2,#+1
   \        0xC   0x4299             CMP      R1,R3
   \        0xE   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \        0x0   0xD303             BCC.N    ??Subroutine7_0
   \        0x2   0x68AB             LDR      R3,[R5, #+8]
   \        0x4   0x5DDB             LDRB     R3,[R3, R7]
   \        0x6   0x1C7F             ADDS     R7,R7,#+1
   \        0x8   0xB2BF             UXTH     R7,R7
   \                     ??Subroutine7_0: (+1)
   \        0xA   0x1C7A             ADDS     R2,R7,#+1
   \        0xC   0x4291             CMP      R1,R2
   \        0xE   0x4602             MOV      R2,R0
   \       0x10   0x4770             BX       LR
    725          
    726          // Cluster: Green Power, client

   \                                 In section .text, align 2, keep-with-next
    727          EmberAfStatus emberAfGreenPowerClusterClientCommandParse(EmberAfClusterCommand *cmd)
    728          {
   \                     emberAfGreenPowerClusterClientCommandParse: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB08C             SUB      SP,SP,#+48
   \        0x6   0x4606             MOV      R6,R0
    729            bool wasHandled = false;
    730            if (!cmd->mfgSpecific) {
   \        0x8   0x7BF1             LDRB     R1,[R6, #+15]
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD115             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_0
    731              switch (cmd->commandId) {
   \       0x10   0x7CF1             LDRB     R1,[R6, #+19]
   \       0x12   0xF64F 0x79FF      MOVW     R9,#+65535
   \       0x16   0xF04F 0x0BFF      MOV      R11,#+255
   \       0x1A   0xF04F 0x3AFF      MOV      R10,#-1
   \       0x1E   0xB171             CBZ.N    R1,??emberAfGreenPowerClusterClientCommandParse_1
   \       0x20   0x2901             CMP      R1,#+1
   \       0x22   0xD050             BEQ.N    ??emberAfGreenPowerClusterClientCommandParse_2
   \       0x24   0x2902             CMP      R1,#+2
   \       0x26   0xF000 0x812B      BEQ.W    ??emberAfGreenPowerClusterClientCommandParse_3
   \       0x2A   0x2906             CMP      R1,#+6
   \       0x2C   0xF000 0x815B      BEQ.W    ??emberAfGreenPowerClusterClientCommandParse_4
   \       0x30   0x290A             CMP      R1,#+10
   \       0x32   0xF000 0x81BC      BEQ.W    ??emberAfGreenPowerClusterClientCommandParse_5
   \       0x36   0x290B             CMP      R1,#+11
   \       0x38   0xF000 0x81D0      BEQ.W    ??emberAfGreenPowerClusterClientCommandParse_6
   \                     ??emberAfGreenPowerClusterClientCommandParse_0: (+1)
   \       0x3C   0xE20A             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
    732              case ZCL_GP_NOTIFICATION_RESPONSE_COMMAND_ID:
    733                {
    734                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_1: (+1)
   \       0x3E   0x7D35             LDRB     R5,[R6, #+20]
    735                  uint8_t options;  // Ver.: since gp-1.0-09-5499-24
    736                  uint32_t gpdSrcId;  // Ver.: since gp-1.0-09-5499-24
    737                  uint8_t* gpdIeee;  // Ver.: since gp-1.0-09-5499-24
    738                  uint8_t endpoint;  // Ver.: since gp-1.0-09-5499-24
    739                  uint32_t gpdSecurityFrameCounter;  // Ver.: since gp-1.0-09-5499-24
    740                  // Command is not a fixed length
    741                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0x40   0x89B2             LDRH     R2,[R6, #+12]
   \       0x42   0x1C69             ADDS     R1,R5,#+1
   \       0x44   0x428A             CMP      R2,R1
   \       0x46   0xBF38             IT       CC 
   \       0x48   0x46D9             MOVCC    R9,R11
    742                    // Argument is not always present:
    743                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    744                    options = 0xFF;
   \       0x4A   0xD304             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_8
    745                  } else {
    746                    options = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x4C   0x68B3             LDR      R3,[R6, #+8]
   \       0x4E   0xF813 0x9005      LDRB     R9,[R3, R5]
    747                    payloadOffset += 1u;
   \       0x52   0x1C6D             ADDS     R5,R5,#+1
   \       0x54   0xB2AD             UXTH     R5,R5
    748                  }
    749                  if ( !( (options & 0x0007) == 0x0000) || ( cmd->bufLen < payloadOffset + 4u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_8: (+1)
   \       0x56   0xF019 0x0F07      TST      R9,#0x7
   \       0x5A   0xD102             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_9
   \       0x5C   0x1D29             ADDS     R1,R5,#+4
   \       0x5E   0x428A             CMP      R2,R1
   \       0x60   0xD201             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_10
    750                    // Argument is not always present:
    751                    // - it is conditionally present based on expression: (options & 0x0007) == 0x0000
    752                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    753                    gpdSrcId = 0xFFFFFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_9: (+1)
   \       0x62   0x46D0             MOV      R8,R10
   \       0x64   0xE006             B.N      ??emberAfGreenPowerClusterClientCommandParse_11
    754                  } else {
    755                    gpdSrcId = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_10: (+1)
   \       0x66   0x68B0             LDR      R0,[R6, #+8]
   \       0x68   0x4629             MOV      R1,R5
   \       0x6A   0x1D2D             ADDS     R5,R5,#+4
   \       0x6C   0x....'....        BL       emberAfGetInt32u
   \       0x70   0x4680             MOV      R8,R0
    756                    payloadOffset += 4u;
   \       0x72   0xB2AD             UXTH     R5,R5
    757                  }
    758                  if ( !( (options & 0x0007) == 0x0002) || ( cmd->bufLen < payloadOffset + 8u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_11: (+1)
   \       0x74   0xF009 0x0007      AND      R0,R9,#0x7
   \       0x78   0x2802             CMP      R0,#+2
   \       0x7A   0xD106             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_12
   \       0x7C   0x89B0             LDRH     R0,[R6, #+12]
   \       0x7E   0xF105 0x0108      ADD      R1,R5,#+8
   \       0x82   0x4288             CMP      R0,R1
   \       0x84   0xD203             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_13
   \       0x86   0x2400             MOVS     R4,#+0
   \       0x88   0xE005             B.N      ??emberAfGreenPowerClusterClientCommandParse_14
    759                    // Argument is not always present:
    760                    // - it is conditionally present based on expression: (options & 0x0007) == 0x0002
    761                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    762                    gpdIeee = NULL;
   \                     ??emberAfGreenPowerClusterClientCommandParse_12: (+1)
   \       0x8A   0x2400             MOVS     R4,#+0
    763                  } else {
    764                    gpdIeee = cmd->buffer + payloadOffset;
    765                    payloadOffset += 8u;
    766                  }
    767                  if ( !( (options & 0x0007) == 0x0002) || ( cmd->bufLen < payloadOffset + 1u)) {
   \       0x8C   0xE00A             B.N      ??emberAfGreenPowerClusterClientCommandParse_15
   \                     ??emberAfGreenPowerClusterClientCommandParse_13: (+1)
   \       0x8E   0x68B1             LDR      R1,[R6, #+8]
   \       0x90   0x194C             ADDS     R4,R1,R5
   \       0x92   0x3508             ADDS     R5,R5,#+8
   \       0x94   0xB2AD             UXTH     R5,R5
   \                     ??emberAfGreenPowerClusterClientCommandParse_14: (+1)
   \       0x96   0x1C69             ADDS     R1,R5,#+1
   \       0x98   0x4288             CMP      R0,R1
   \       0x9A   0xD303             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_15
    768                    // Argument is not always present:
    769                    // - it is conditionally present based on expression: (options & 0x0007) == 0x0002
    770                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    771                    endpoint = 0xFF;
    772                  } else {
    773                    endpoint = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x9C   0x68B0             LDR      R0,[R6, #+8]
   \       0x9E   0xF810 0xB005      LDRB     R11,[R0, R5]
    774                    payloadOffset += 1u;
   \       0xA2   0x460D             MOV      R5,R1
    775                  }
    776                  if ( ( cmd->bufLen < payloadOffset + 4u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_15: (+1)
   \       0xA4   0x89B2             LDRH     R2,[R6, #+12]
   \       0xA6   0x1D29             ADDS     R1,R5,#+4
   \       0xA8   0x428A             CMP      R2,R1
   \       0xAA   0xBF31             ITEEE    CC 
    777                    // Argument is not always present:
    778                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    779                    gpdSecurityFrameCounter = 0xFFFFFFFF;
   \       0xAC   0x4650             MOVCC    R0,R10
    780                  } else {
    781                    gpdSecurityFrameCounter = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xAE   0xB2A9             UXTHCS   R1,R5
   \       0xB0   0x68B0             LDRCS    R0,[R6, #+8]
   \       0xB2   0x....'....        BLCS     emberAfGetInt32u
    782                  }
    783                  wasHandled = emberAfGreenPowerClusterGpNotificationResponseCallback(options,
    784                                                                                      gpdSrcId,
    785                                                                                      gpdIeee,
    786                                                                                      endpoint,
    787                                                                                      gpdSecurityFrameCounter);
   \       0xB6   0x9000             STR      R0,[SP, #+0]
   \       0xB8   0x465B             MOV      R3,R11
   \       0xBA   0x4622             MOV      R2,R4
   \       0xBC   0x4641             MOV      R1,R8
   \       0xBE   0x4648             MOV      R0,R9
   \       0xC0   0x....'....        BL       emberAfGreenPowerClusterGpNotificationResponseCallback
    788                  break;
   \       0xC4   0xE1C6             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
    789                }
    790              case ZCL_GP_PAIRING_COMMAND_ID:
    791                {
    792                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_2: (+1)
   \       0xC6   0x7D37             LDRB     R7,[R6, #+20]
    793                  uint32_t options;  // Ver.: since gp-1.0-09-5499-24
    794                  uint32_t gpdSrcId;  // Ver.: since gp-1.0-09-5499-24
    795                  uint8_t* gpdIeee;  // Ver.: since gp-1.0-09-5499-24
    796                  uint8_t endpoint;  // Ver.: since gp-1.0-09-5499-24
    797                  uint8_t* sinkIeeeAddress;  // Ver.: since gp-1.0-09-5499-24
    798                  uint16_t sinkNwkAddress;  // Ver.: since gp-1.0-09-5499-24
    799                  uint16_t sinkGroupId;  // Ver.: since gp-1.0-09-5499-24
    800                  uint8_t deviceId;  // Ver.: since gp-1.0-09-5499-24
    801                  uint32_t gpdSecurityFrameCounter;  // Ver.: since gp-1.0-09-5499-24
    802                  uint8_t* gpdKey;  // Ver.: since gp-1.0-09-5499-24
    803                  uint16_t assignedAlias;  // Ver.: since gp-1.0-09-5499-24
    804                  uint8_t groupcastRadius;  // Ver.: since gp-1.0-09-5499-24
    805                  // Command is not a fixed length
    806                  if ( ( cmd->bufLen < payloadOffset + 3u)) {
   \       0xC8   0x89B2             LDRH     R2,[R6, #+12]
   \       0xCA   0x1CF9             ADDS     R1,R7,#+3
   \       0xCC   0x428A             CMP      R2,R1
   \       0xCE   0xBF38             IT       CC 
   \       0xD0   0x46D0             MOVCC    R8,R10
    807                    // Argument is not always present:
    808                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    809                    options = 0xFFFFFFFF;
   \       0xD2   0xD306             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_16
    810                  } else {
    811                    options = emberAfGetInt24u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xD4   0x68B0             LDR      R0,[R6, #+8]
   \       0xD6   0x4639             MOV      R1,R7
   \       0xD8   0x1CFF             ADDS     R7,R7,#+3
   \       0xDA   0x....'....        BL       emberAfGetInt24u
   \       0xDE   0x4680             MOV      R8,R0
    812                    payloadOffset += 3u;
   \       0xE0   0xB2BF             UXTH     R7,R7
    813                  }
    814                  if ( !( (options & 0x000007) == 0x000000) || ( cmd->bufLen < payloadOffset + 4u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_16: (+1)
   \       0xE2   0xF018 0x0007      ANDS     R0,R8,#0x7
   \       0xE6   0xD106             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_17
   \       0xE8   0x89B2             LDRH     R2,[R6, #+12]
   \       0xEA   0x1D3B             ADDS     R3,R7,#+4
   \       0xEC   0x429A             CMP      R2,R3
   \       0xEE   0xD20D             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_18
   \       0xF0   0xF8CD 0xA028      STR      R10,[SP, #+40]
   \       0xF4   0xE011             B.N      ??emberAfGreenPowerClusterClientCommandParse_19
    815                    // Argument is not always present:
    816                    // - it is conditionally present based on expression: (options & 0x000007) == 0x000000
    817                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    818                    gpdSrcId = 0xFFFFFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_17: (+1)
   \       0xF6   0xF8CD 0xA028      STR      R10,[SP, #+40]
    819                  } else {
    820                    gpdSrcId = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
    821                    payloadOffset += 4u;
    822                  }
    823                  if ( !( (options & 0x000007) == 0x000002) || ( cmd->bufLen < payloadOffset + 8u)) {
   \       0xFA   0x2802             CMP      R0,#+2
   \       0xFC   0xD10D             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_19
   \       0xFE   0x89B0             LDRH     R0,[R6, #+12]
   \      0x100   0xF107 0x0108      ADD      R1,R7,#+8
   \      0x104   0x4288             CMP      R0,R1
   \      0x106   0xD20A             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_20
   \      0x108   0x2400             MOVS     R4,#+0
   \      0x10A   0xE00C             B.N      ??emberAfGreenPowerClusterClientCommandParse_21
   \                     ??emberAfGreenPowerClusterClientCommandParse_18: (+1)
   \      0x10C   0x68B0             LDR      R0,[R6, #+8]
   \      0x10E   0x4639             MOV      R1,R7
   \      0x110   0x....'....        BL       emberAfGetInt32u
   \      0x114   0x1D3F             ADDS     R7,R7,#+4
   \      0x116   0x900A             STR      R0,[SP, #+40]
   \      0x118   0xB2BF             UXTH     R7,R7
    824                    // Argument is not always present:
    825                    // - it is conditionally present based on expression: (options & 0x000007) == 0x000002
    826                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    827                    gpdIeee = NULL;
   \                     ??emberAfGreenPowerClusterClientCommandParse_19: (+1)
   \      0x11A   0x2400             MOVS     R4,#+0
    828                  } else {
    829                    gpdIeee = cmd->buffer + payloadOffset;
    830                    payloadOffset += 8u;
    831                  }
    832                  if ( !( (options & 0x000007) == 0x000002) || ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x11C   0xE006             B.N      ??emberAfGreenPowerClusterClientCommandParse_22
   \                     ??emberAfGreenPowerClusterClientCommandParse_20: (+1)
   \      0x11E   0x68B1             LDR      R1,[R6, #+8]
   \      0x120   0x19CC             ADDS     R4,R1,R7
   \      0x122   0x3708             ADDS     R7,R7,#+8
   \      0x124   0xB2BF             UXTH     R7,R7
   \                     ??emberAfGreenPowerClusterClientCommandParse_21: (+1)
   \      0x126   0x1C7A             ADDS     R2,R7,#+1
   \      0x128   0x4290             CMP      R0,R2
   \      0x12A   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_23
    833                    // Argument is not always present:
    834                    // - it is conditionally present based on expression: (options & 0x000007) == 0x000002
    835                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    836                    endpoint = 0xFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_22: (+1)
   \      0x12C   0xF88D 0xB021      STRB     R11,[SP, #+33]
   \      0x130   0xE005             B.N      ??emberAfGreenPowerClusterClientCommandParse_24
    837                  } else {
    838                    endpoint = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_23: (+1)
   \      0x132   0x68B0             LDR      R0,[R6, #+8]
   \      0x134   0x5DC1             LDRB     R1,[R0, R7]
    839                    payloadOffset += 1u;
   \      0x136   0x1C7F             ADDS     R7,R7,#+1
   \      0x138   0xB2BF             UXTH     R7,R7
   \      0x13A   0xF88D 0x1021      STRB     R1,[SP, #+33]
    840                  }
    841                  if ( !( (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000000 || (options & 0x000060) == 0x000060)) || ( cmd->bufLen < payloadOffset + 8u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_24: (+1)
   \      0x13E   0xEA5F 0x60C8      LSLS     R0,R8,#+27
   \      0x142   0xD40E             BMI.N    ??emberAfGreenPowerClusterClientCommandParse_25
   \      0x144   0xF018 0x0F60      TST      R8,#0x60
   \      0x148   0xBF1E             ITTT     NE 
   \      0x14A   0xF008 0x0060      ANDNE    R0,R8,#0x60
   \      0x14E   0x2860             CMPNE    R0,#+96
   \      0x150   0x2500             MOVNE    R5,#+0
   \      0x152   0xD118             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_26
   \      0x154   0x89B2             LDRH     R2,[R6, #+12]
   \      0x156   0xF107 0x0108      ADD      R1,R7,#+8
   \      0x15A   0x428A             CMP      R2,R1
   \      0x15C   0xD205             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_27
   \      0x15E   0x2500             MOVS     R5,#+0
   \      0x160   0xE007             B.N      ??emberAfGreenPowerClusterClientCommandParse_28
    842                    // Argument is not always present:
    843                    // - it is conditionally present based on expression: (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000000 || (options & 0x000060) == 0x000060)
    844                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    845                    sinkIeeeAddress = NULL;
   \                     ??emberAfGreenPowerClusterClientCommandParse_25: (+1)
   \      0x162   0x2500             MOVS     R5,#+0
    846                  } else {
    847                    sinkIeeeAddress = cmd->buffer + payloadOffset;
    848                    payloadOffset += 8u;
    849                  }
    850                  if ( !( (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000000 || (options & 0x000060) == 0x000060)) || ( cmd->bufLen < payloadOffset + 2u)) {
    851                    // Argument is not always present:
    852                    // - it is conditionally present based on expression: (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000000 || (options & 0x000060) == 0x000060)
    853                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    854                    sinkNwkAddress = 0xFFFF;
   \      0x164   0xF8AD 0x9022      STRH     R9,[SP, #+34]
    855                  } else {
    856                    sinkNwkAddress = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    857                    payloadOffset += 2u;
    858                  }
    859                  if ( !( (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000020 || (options & 0x000060) == 0x000040)) || ( cmd->bufLen < payloadOffset + 2u)) {
   \      0x168   0xE021             B.N      ??emberAfGreenPowerClusterClientCommandParse_29
   \                     ??emberAfGreenPowerClusterClientCommandParse_27: (+1)
   \      0x16A   0x68B1             LDR      R1,[R6, #+8]
   \      0x16C   0x19CD             ADDS     R5,R1,R7
   \      0x16E   0x3708             ADDS     R7,R7,#+8
   \      0x170   0xB2BF             UXTH     R7,R7
   \                     ??emberAfGreenPowerClusterClientCommandParse_28: (+1)
   \      0x172   0xF018 0x0F60      TST      R8,#0x60
   \      0x176   0xBF1C             ITT      NE 
   \      0x178   0xF008 0x0160      ANDNE    R1,R8,#0x60
   \      0x17C   0x2960             CMPNE    R1,#+96
   \      0x17E   0xD102             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_26
   \      0x180   0x1CB9             ADDS     R1,R7,#+2
   \      0x182   0x428A             CMP      R2,R1
   \      0x184   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_30
   \                     ??emberAfGreenPowerClusterClientCommandParse_26: (+1)
   \      0x186   0xF8AD 0x9022      STRH     R9,[SP, #+34]
   \      0x18A   0xE004             B.N      ??emberAfGreenPowerClusterClientCommandParse_31
   \                     ??emberAfGreenPowerClusterClientCommandParse_30: (+1)
   \      0x18C   0x....'....        BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_57: (+1)
   \      0x190   0xF8AD 0x0022      STRH     R0,[SP, #+34]
   \      0x194   0xB2BF             UXTH     R7,R7
   \                     ??emberAfGreenPowerClusterClientCommandParse_31: (+1)
   \      0x196   0xF008 0x0060      AND      R0,R8,#0x60
   \      0x19A   0x2820             CMP      R0,#+32
   \      0x19C   0xBF1C             ITT      NE 
   \      0x19E   0xF008 0x0160      ANDNE    R1,R8,#0x60
   \      0x1A2   0x2940             CMPNE    R1,#+64
   \      0x1A4   0xD103             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_29
   \      0x1A6   0x89B2             LDRH     R2,[R6, #+12]
   \      0x1A8   0x1CB9             ADDS     R1,R7,#+2
   \      0x1AA   0x428A             CMP      R2,R1
   \      0x1AC   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_32
    860                    // Argument is not always present:
    861                    // - it is conditionally present based on expression: (options & 0x000010) == 0x000000 && ((options & 0x000060) == 0x000020 || (options & 0x000060) == 0x000040)
    862                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    863                    sinkGroupId = 0xFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_29: (+1)
   \      0x1AE   0xF8AD 0x9024      STRH     R9,[SP, #+36]
   \      0x1B2   0xE004             B.N      ??emberAfGreenPowerClusterClientCommandParse_33
    864                  } else {
    865                    sinkGroupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_32: (+1)
   \      0x1B4   0x....'....        BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_56: (+1)
   \      0x1B8   0xF8AD 0x0024      STRH     R0,[SP, #+36]
    866                    payloadOffset += 2u;
   \      0x1BC   0xB2BF             UXTH     R7,R7
    867                  }
    868                  if ( !( (options & 0x000008) == 0x000008 && (options & 0x000010) != 0x000010) || ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_33: (+1)
   \      0x1BE   0xF008 0x0018      AND      R0,R8,#0x18
   \      0x1C2   0x2808             CMP      R0,#+8
   \      0x1C4   0xD103             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_34
   \      0x1C6   0x89B0             LDRH     R0,[R6, #+12]
   \      0x1C8   0x1C79             ADDS     R1,R7,#+1
   \      0x1CA   0x4288             CMP      R0,R1
   \      0x1CC   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_35
    869                    // Argument is not always present:
    870                    // - it is conditionally present based on expression: (options & 0x000008) == 0x000008 && (options & 0x000010) != 0x000010
    871                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    872                    deviceId = 0xFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_34: (+1)
   \      0x1CE   0xF88D 0xB020      STRB     R11,[SP, #+32]
   \      0x1D2   0xE005             B.N      ??emberAfGreenPowerClusterClientCommandParse_36
    873                  } else {
    874                    deviceId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_35: (+1)
   \      0x1D4   0x68B0             LDR      R0,[R6, #+8]
   \      0x1D6   0x5DC1             LDRB     R1,[R0, R7]
    875                    payloadOffset += 1u;
   \      0x1D8   0x1C7F             ADDS     R7,R7,#+1
   \      0x1DA   0xB2BF             UXTH     R7,R7
   \      0x1DC   0xF88D 0x1020      STRB     R1,[SP, #+32]
    876                  }
    877                  if ( !( (options & 0x004000) == 0x004000) || ( cmd->bufLen < payloadOffset + 4u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_36: (+1)
   \      0x1E0   0xEA5F 0x4048      LSLS     R0,R8,#+17
   \      0x1E4   0xD503             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_37
   \      0x1E6   0x89B2             LDRH     R2,[R6, #+12]
   \      0x1E8   0x1D38             ADDS     R0,R7,#+4
   \      0x1EA   0x4282             CMP      R2,R0
   \      0x1EC   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_38
    878                    // Argument is not always present:
    879                    // - it is conditionally present based on expression: (options & 0x004000) == 0x004000
    880                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    881                    gpdSecurityFrameCounter = 0xFFFFFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_37: (+1)
   \      0x1EE   0xF8CD 0xA02C      STR      R10,[SP, #+44]
   \      0x1F2   0xE006             B.N      ??emberAfGreenPowerClusterClientCommandParse_39
    882                  } else {
    883                    gpdSecurityFrameCounter = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_38: (+1)
   \      0x1F4   0x68B0             LDR      R0,[R6, #+8]
   \      0x1F6   0x4639             MOV      R1,R7
   \      0x1F8   0x1D3F             ADDS     R7,R7,#+4
   \      0x1FA   0x....'....        BL       emberAfGetInt32u
   \      0x1FE   0x900B             STR      R0,[SP, #+44]
    884                    payloadOffset += 4u;
   \      0x200   0xB2BF             UXTH     R7,R7
    885                  }
    886                  if ( !( (options & 0x008000) == 0x008000) || ( cmd->bufLen < payloadOffset + 16u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_39: (+1)
   \      0x202   0xEA5F 0x4008      LSLS     R0,R8,#+16
   \      0x206   0xD504             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_40
   \      0x208   0x89B1             LDRH     R1,[R6, #+12]
   \      0x20A   0xF107 0x0010      ADD      R0,R7,#+16
   \      0x20E   0x4281             CMP      R1,R0
   \      0x210   0xD202             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_41
    887                    // Argument is not always present:
    888                    // - it is conditionally present based on expression: (options & 0x008000) == 0x008000
    889                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    890                    gpdKey = NULL;
   \                     ??emberAfGreenPowerClusterClientCommandParse_40: (+1)
   \      0x212   0xF04F 0x0A00      MOV      R10,#+0
   \      0x216   0xE004             B.N      ??emberAfGreenPowerClusterClientCommandParse_42
    891                  } else {
    892                    gpdKey = cmd->buffer + payloadOffset;
   \                     ??emberAfGreenPowerClusterClientCommandParse_41: (+1)
   \      0x218   0x68B0             LDR      R0,[R6, #+8]
   \      0x21A   0xEB00 0x0A07      ADD      R10,R0,R7
    893                    payloadOffset += 16u;
   \      0x21E   0x3710             ADDS     R7,R7,#+16
   \      0x220   0xB2BF             UXTH     R7,R7
    894                  }
    895                  if ( !( (options & 0x010000) == 0x010000) || ( cmd->bufLen < payloadOffset + 2u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_42: (+1)
   \      0x222   0xEA5F 0x30C8      LSLS     R0,R8,#+15
   \      0x226   0xD503             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_43
   \      0x228   0x89B2             LDRH     R2,[R6, #+12]
   \      0x22A   0x1CB8             ADDS     R0,R7,#+2
   \      0x22C   0x4282             CMP      R2,R0
   \      0x22E   0xD201             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_44
    896                    // Argument is not always present:
    897                    // - it is conditionally present based on expression: (options & 0x010000) == 0x010000
    898                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    899                    assignedAlias = 0xFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_43: (+1)
   \      0x230   0x4648             MOV      R0,R9
   \      0x232   0xE002             B.N      ??emberAfGreenPowerClusterClientCommandParse_45
    900                  } else {
    901                    assignedAlias = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_44: (+1)
   \      0x234   0x....'....        BL       ?Subroutine18
    902                    payloadOffset += 2u;
   \                     ??CrossCallReturnLabel_55: (+1)
   \      0x238   0xB2BF             UXTH     R7,R7
    903                  }
    904                  if ( !( (options & 0x020000) == 0x020000) || ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_45: (+1)
   \      0x23A   0xEA5F 0x3188      LSLS     R1,R8,#+14
   \      0x23E   0xD506             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_46
   \      0x240   0x89B2             LDRH     R2,[R6, #+12]
   \      0x242   0x1C79             ADDS     R1,R7,#+1
   \      0x244   0x428A             CMP      R2,R1
   \      0x246   0xBF24             ITT      CS 
   \      0x248   0x68B2             LDRCS    R2,[R6, #+8]
   \      0x24A   0xF812 0xB007      LDRBCS   R11,[R2, R7]
    905                    // Argument is not always present:
    906                    // - it is conditionally present based on expression: (options & 0x020000) == 0x020000
    907                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    908                    groupcastRadius = 0xFF;
    909                  } else {
    910                    groupcastRadius = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    911                  }
    912                  wasHandled = emberAfGreenPowerClusterGpPairingCallback(options,
    913                                                                         gpdSrcId,
    914                                                                         gpdIeee,
    915                                                                         endpoint,
    916                                                                         sinkIeeeAddress,
    917                                                                         sinkNwkAddress,
    918                                                                         sinkGroupId,
    919                                                                         deviceId,
    920                                                                         gpdSecurityFrameCounter,
    921                                                                         gpdKey,
    922                                                                         assignedAlias,
    923                                                                         groupcastRadius);
   \                     ??emberAfGreenPowerClusterClientCommandParse_46: (+1)
   \      0x24E   0x9006             STR      R0,[SP, #+24]
   \      0x250   0x980B             LDR      R0,[SP, #+44]
   \      0x252   0xF89D 0x1020      LDRB     R1,[SP, #+32]
   \      0x256   0x9004             STR      R0,[SP, #+16]
   \      0x258   0xF8BD 0x0024      LDRH     R0,[SP, #+36]
   \      0x25C   0x9103             STR      R1,[SP, #+12]
   \      0x25E   0xF8BD 0x1022      LDRH     R1,[SP, #+34]
   \      0x262   0xF8CD 0xB01C      STR      R11,[SP, #+28]
   \      0x266   0xF8CD 0xA014      STR      R10,[SP, #+20]
   \      0x26A   0x9002             STR      R0,[SP, #+8]
   \      0x26C   0x9101             STR      R1,[SP, #+4]
   \      0x26E   0x9500             STR      R5,[SP, #+0]
   \      0x270   0xF89D 0x3021      LDRB     R3,[SP, #+33]
   \      0x274   0x990A             LDR      R1,[SP, #+40]
   \      0x276   0x4622             MOV      R2,R4
   \      0x278   0x4640             MOV      R0,R8
   \      0x27A   0x....'....        BL       emberAfGreenPowerClusterGpPairingCallback
    924                  break;
   \      0x27E   0xE0E9             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
    925                }
    926              case ZCL_GP_PROXY_COMMISSIONING_MODE_COMMAND_ID:
    927                {
    928                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_3: (+1)
   \      0x280   0xF896 0xA014      LDRB     R10,[R6, #+20]
    929                  uint8_t options;  // Ver.: since gp-1.0-09-5499-24
    930                  uint16_t commissioningWindow;  // Ver.: since gp-1.0-15-02014-011
    931                  uint8_t channel;  // Ver.: since gp-1.0-09-5499-24
    932                  // Command is not a fixed length
    933                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x284   0x89B2             LDRH     R2,[R6, #+12]
   \      0x286   0xF10A 0x0101      ADD      R1,R10,#+1
   \      0x28A   0x428A             CMP      R2,R1
   \      0x28C   0xBF38             IT       CC 
   \      0x28E   0x46D8             MOVCC    R8,R11
    934                    // Argument is not always present:
    935                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    936                    options = 0xFF;
   \      0x290   0xD306             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_47
    937                  } else {
    938                    options = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x292   0x68B3             LDR      R3,[R6, #+8]
    939                    payloadOffset += 1u;
   \      0x294   0xF10A 0x0001      ADD      R0,R10,#+1
   \      0x298   0xF813 0x800A      LDRB     R8,[R3, R10]
   \      0x29C   0xFA1F 0xFA80      UXTH     R10,R0
    940                  }
    941                  if ( !( (options & 0x02) == 0x02) || ( cmd->bufLen < payloadOffset + 2u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_47: (+1)
   \      0x2A0   0xEA5F 0x7188      LSLS     R1,R8,#+30
   \      0x2A4   0xD503             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_48
   \      0x2A6   0xF10A 0x0302      ADD      R3,R10,#+2
   \      0x2AA   0x429A             CMP      R2,R3
   \      0x2AC   0xD201             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_49
    942                    // Argument is not always present:
    943                    // - it is conditionally present based on expression: (options & 0x02) == 0x02
    944                    // - it is present only in versions higher than: gp-1.0-15-02014-011
    945                    commissioningWindow = 0xFFFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_48: (+1)
   \      0x2AE   0x4649             MOV      R1,R9
   \      0x2B0   0xE008             B.N      ??emberAfGreenPowerClusterClientCommandParse_50
    946                  } else {
    947                    commissioningWindow = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_49: (+1)
   \      0x2B2   0x68B0             LDR      R0,[R6, #+8]
   \      0x2B4   0x4651             MOV      R1,R10
   \      0x2B6   0x....'....        BL       emberAfGetInt16u
   \      0x2BA   0x4601             MOV      R1,R0
    948                    payloadOffset += 2u;
   \      0x2BC   0xF10A 0x0002      ADD      R0,R10,#+2
   \      0x2C0   0xFA1F 0xFA80      UXTH     R10,R0
    949                  }
    950                  if ( !( (options & 0x10) == 0x10) || ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_50: (+1)
   \      0x2C4   0xEA5F 0x60C8      LSLS     R0,R8,#+27
   \      0x2C8   0xD504             BPL.N    ??emberAfGreenPowerClusterClientCommandParse_51
   \      0x2CA   0x89B2             LDRH     R2,[R6, #+12]
   \      0x2CC   0xF10A 0x0001      ADD      R0,R10,#+1
   \      0x2D0   0x4282             CMP      R2,R0
   \      0x2D2   0xD201             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_52
    951                    // Argument is not always present:
    952                    // - it is conditionally present based on expression: (options & 0x10) == 0x10
    953                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    954                    channel = 0xFF;
   \                     ??emberAfGreenPowerClusterClientCommandParse_51: (+1)
   \      0x2D4   0x22FF             MOVS     R2,#+255
   \      0x2D6   0xE002             B.N      ??emberAfGreenPowerClusterClientCommandParse_53
    955                  } else {
    956                    channel = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_52: (+1)
   \      0x2D8   0x68B2             LDR      R2,[R6, #+8]
   \      0x2DA   0xF812 0x200A      LDRB     R2,[R2, R10]
    957                  }
    958                  wasHandled = emberAfGreenPowerClusterGpProxyCommissioningModeCallback(options,
    959                                                                                        commissioningWindow,
    960                                                                                        channel);
   \                     ??emberAfGreenPowerClusterClientCommandParse_53: (+1)
   \      0x2DE   0x4640             MOV      R0,R8
   \      0x2E0   0x....'....        BL       emberAfGreenPowerClusterGpProxyCommissioningModeCallback
    961                  break;
   \      0x2E4   0xE0B6             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
    962                }
    963              case ZCL_GP_RESPONSE_COMMAND_ID:
    964                {
    965                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_4: (+1)
   \      0x2E6   0x7D34             LDRB     R4,[R6, #+20]
    966                  uint8_t options;  // Ver.: since gp-1.0-09-5499-24
    967                  uint16_t tempMasterShortAddress;  // Ver.: since gp-1.0-09-5499-24
    968                  uint8_t tempMasterTxChannel;  // Ver.: since gp-1.0-09-5499-24
    969                  uint32_t gpdSrcId;  // Ver.: since gp-1.0-09-5499-24
    970                  uint8_t* gpdIeee;  // Ver.: since gp-1.0-09-5499-24
    971                  uint8_t endpoint;  // Ver.: always
    972                  uint8_t gpdCommandId;  // Ver.: since gp-1.0-09-5499-24
    973                  uint8_t* gpdCommandPayload;  // Ver.: always
    974                  // Command is not a fixed length
    975                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x2E8   0x89B2             LDRH     R2,[R6, #+12]
   \      0x2EA   0x1C61             ADDS     R1,R4,#+1
   \      0x2EC   0x428A             CMP      R2,R1
   \      0x2EE   0xBF38             IT       CC 
   \      0x2F0   0x46D8             MOVCC    R8,R11
    976                    // Argument is not always present:
    977                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    978                    options = 0xFF;
   \      0x2F2   0xD304             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_54
    979                  } else {
    980                    options = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x2F4   0x68B3             LDR      R3,[R6, #+8]
   \      0x2F6   0xF813 0x8004      LDRB     R8,[R3, R4]
    981                    payloadOffset += 1u;
   \      0x2FA   0x1C64             ADDS     R4,R4,#+1
   \      0x2FC   0xB2A4             UXTH     R4,R4
    982                  }
    983                  if ( ( cmd->bufLen < payloadOffset + 2u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_54: (+1)
   \      0x2FE   0x1CA1             ADDS     R1,R4,#+2
   \      0x300   0x428A             CMP      R2,R1
   \      0x302   0xD305             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_55
    984                    // Argument is not always present:
    985                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    986                    tempMasterShortAddress = 0xFFFF;
    987                  } else {
    988                    tempMasterShortAddress = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x304   0x68B0             LDR      R0,[R6, #+8]
   \      0x306   0x4621             MOV      R1,R4
   \      0x308   0x....'....        BL       ??Subroutine17_0
   \                     ??CrossCallReturnLabel_51: (+1)
   \      0x30C   0x4681             MOV      R9,R0
    989                    payloadOffset += 2u;
   \      0x30E   0xB2A4             UXTH     R4,R4
    990                  }
    991                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_55: (+1)
   \      0x310   0x89B2             LDRH     R2,[R6, #+12]
   \      0x312   0x1C61             ADDS     R1,R4,#+1
   \      0x314   0x428A             CMP      R2,R1
   \      0x316   0xBF38             IT       CC 
   \      0x318   0xF88D 0xB010      STRBCC   R11,[SP, #+16]
    992                    // Argument is not always present:
    993                    // - it is present only in versions higher than: gp-1.0-09-5499-24
    994                    tempMasterTxChannel = 0xFF;
   \      0x31C   0xD305             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_56
    995                  } else {
    996                    tempMasterTxChannel = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x31E   0x68B1             LDR      R1,[R6, #+8]
   \      0x320   0x5D0B             LDRB     R3,[R1, R4]
    997                    payloadOffset += 1u;
   \      0x322   0x1C64             ADDS     R4,R4,#+1
   \      0x324   0xB2A4             UXTH     R4,R4
   \      0x326   0xF88D 0x3010      STRB     R3,[SP, #+16]
    998                  }
    999                  if ( !( (options & 0x07) == 0x00) || ( cmd->bufLen < payloadOffset + 4u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_56: (+1)
   \      0x32A   0xF018 0x0F07      TST      R8,#0x7
   \      0x32E   0xD109             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_57
   \      0x330   0x1D21             ADDS     R1,R4,#+4
   \      0x332   0x428A             CMP      R2,R1
   \      0x334   0xD306             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_57
   1000                    // Argument is not always present:
   1001                    // - it is conditionally present based on expression: (options & 0x07) == 0x00
   1002                    // - it is present only in versions higher than: gp-1.0-09-5499-24
   1003                    gpdSrcId = 0xFFFFFFFF;
   1004                  } else {
   1005                    gpdSrcId = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x336   0x68B0             LDR      R0,[R6, #+8]
   \      0x338   0x4621             MOV      R1,R4
   \      0x33A   0x1D24             ADDS     R4,R4,#+4
   \      0x33C   0x....'....        BL       emberAfGetInt32u
   \      0x340   0x4682             MOV      R10,R0
   1006                    payloadOffset += 4u;
   \      0x342   0xB2A4             UXTH     R4,R4
   1007                  }
   1008                  if ( !( (options & 0x07) == 0x02) || ( cmd->bufLen < payloadOffset + 8u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_57: (+1)
   \      0x344   0xF008 0x0207      AND      R2,R8,#0x7
   \      0x348   0x89B0             LDRH     R0,[R6, #+12]
   \      0x34A   0x68B1             LDR      R1,[R6, #+8]
   \      0x34C   0x2A02             CMP      R2,#+2
   \      0x34E   0xD108             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_58
   \      0x350   0xF104 0x0208      ADD      R2,R4,#+8
   \      0x354   0x4290             CMP      R0,R2
   \      0x356   0xBF31             ITEEE    CC 
   \      0x358   0x2500             MOVCC    R5,#+0
   \      0x35A   0x190D             ADDCS    R5,R1,R4
   \      0x35C   0x3408             ADDCS    R4,R4,#+8
   \      0x35E   0xB2A4             UXTHCS   R4,R4
   1009                    // Argument is not always present:
   1010                    // - it is conditionally present based on expression: (options & 0x07) == 0x02
   1011                    // - it is present only in versions higher than: gp-1.0-09-5499-24
   1012                    gpdIeee = NULL;
   1013                  } else {
   1014                    gpdIeee = cmd->buffer + payloadOffset;
   1015                    payloadOffset += 8u;
   \      0x360   0xE002             B.N      ??emberAfGreenPowerClusterClientCommandParse_59
   1016                  }
   \                     ??emberAfGreenPowerClusterClientCommandParse_58: (+1)
   \      0x362   0x2500             MOVS     R5,#+0
   1017                  if ( !( (options & 0x07) == 0x02)) {
   1018                    // Argument is not always present:
   1019                    // - it is conditionally present based on expression: (options & 0x07) == 0x02
   1020                    endpoint = 0xFF;
   \      0x364   0x27FF             MOVS     R7,#+255
   \      0x366   0xE002             B.N      ??emberAfGreenPowerClusterClientCommandParse_60
   1021                  } else {
   1022                    endpoint = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_59: (+1)
   \      0x368   0x5D0F             LDRB     R7,[R1, R4]
   1023                    payloadOffset += 1u;
   \      0x36A   0x1C64             ADDS     R4,R4,#+1
   \      0x36C   0xB2A4             UXTH     R4,R4
   1024                  }
   1025                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_60: (+1)
   \      0x36E   0x1C62             ADDS     R2,R4,#+1
   \      0x370   0x4290             CMP      R0,R2
   \      0x372   0xD303             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_61
   1026                    // Argument is not always present:
   1027                    // - it is present only in versions higher than: gp-1.0-09-5499-24
   1028                    gpdCommandId = 0xFF;
   1029                  } else {
   1030                    gpdCommandId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x374   0xF811 0xB004      LDRB     R11,[R1, R4]
   1031                    payloadOffset += 1u;
   \      0x378   0x1C64             ADDS     R4,R4,#+1
   \      0x37A   0xB2A4             UXTH     R4,R4
   1032                  }
   1033                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??emberAfGreenPowerClusterClientCommandParse_61: (+1)
   \      0x37C   0x1908             ADDS     R0,R1,R4
   \      0x37E   0x....'....        BL       emberAfStringLength
   \      0x382   0x89B2             LDRH     R2,[R6, #+12]
   \      0x384   0x1900             ADDS     R0,R0,R4
   \      0x386   0x1C40             ADDS     R0,R0,#+1
   \      0x388   0x4282             CMP      R2,R0
   \      0x38A   0xD32C             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_62
   1034                  gpdCommandPayload = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x38C   0x68B0             LDR      R0,[R6, #+8]
   \      0x38E   0x4621             MOV      R1,R4
   \      0x390   0x....'....        BL       emberAfGetString
   1035                  wasHandled = emberAfGreenPowerClusterGpResponseCallback(options,
   1036                                                                          tempMasterShortAddress,
   1037                                                                          tempMasterTxChannel,
   1038                                                                          gpdSrcId,
   1039                                                                          gpdIeee,
   1040                                                                          endpoint,
   1041                                                                          gpdCommandId,
   1042                                                                          gpdCommandPayload);
   \      0x394   0x9003             STR      R0,[SP, #+12]
   \      0x396   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x39A   0x9701             STR      R7,[SP, #+4]
   \      0x39C   0x9500             STR      R5,[SP, #+0]
   \      0x39E   0xF89D 0x2010      LDRB     R2,[SP, #+16]
   \      0x3A2   0x4653             MOV      R3,R10
   \      0x3A4   0x4649             MOV      R1,R9
   \      0x3A6   0x4640             MOV      R0,R8
   \      0x3A8   0x....'....        BL       emberAfGreenPowerClusterGpResponseCallback
   1043                  break;
   \      0x3AC   0xE052             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
   1044                }
   1045              case ZCL_GP_SINK_TABLE_RESPONSE_COMMAND_ID:
   1046                {
   1047                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_5: (+1)
   \      0x3AE   0x7D33             LDRB     R3,[R6, #+20]
   1048                  uint8_t status;  // Ver.: always
   1049                  uint8_t totalNumberofNonEmptySinkTableEntries;  // Ver.: always
   1050                  uint8_t startIndex;  // Ver.: always
   1051                  uint8_t sinkTableEntriesCount;  // Ver.: always
   1052                  uint8_t* sinkTableEntries;  // Ver.: always
   1053                  // Command is fixed length: 4
   1054                  if (cmd->bufLen < payloadOffset + 4u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x3B0   0x89B0             LDRH     R0,[R6, #+12]
   \      0x3B2   0x1D19             ADDS     R1,R3,#+4
   \      0x3B4   0x4288             CMP      R0,R1
   \      0x3B6   0xD316             BCC.N    ??emberAfGreenPowerClusterClientCommandParse_62
   1055                  status = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3B8   0x68B4             LDR      R4,[R6, #+8]
   \      0x3BA   0x5CE0             LDRB     R0,[R4, R3]
   1056                  payloadOffset += 1u;
   \      0x3BC   0x1C5B             ADDS     R3,R3,#+1
   1057                  totalNumberofNonEmptySinkTableEntries = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3BE   0x5CE1             LDRB     R1,[R4, R3]
   1058                  payloadOffset += 1u;
   \      0x3C0   0x1C5B             ADDS     R3,R3,#+1
   1059                  startIndex = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3C2   0x5CE2             LDRB     R2,[R4, R3]
   1060                  payloadOffset += 1u;
   \      0x3C4   0x1C5B             ADDS     R3,R3,#+1
   \      0x3C6   0xB29B             UXTH     R3,R3
   1061                  sinkTableEntriesCount = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1062                  payloadOffset += 1u;
   1063                  sinkTableEntries = cmd->buffer + payloadOffset;
   1064                  wasHandled = emberAfGreenPowerClusterGpSinkTableResponseCallback(status,
   1065                                                                                   totalNumberofNonEmptySinkTableEntries,
   1066                                                                                   startIndex,
   1067                                                                                   sinkTableEntriesCount,
   1068                                                                                   sinkTableEntries);
   \      0x3C8   0x1C5D             ADDS     R5,R3,#+1
   \      0x3CA   0xFA1F 0xFA85      UXTH     R10,R5
   \      0x3CE   0x44A2             ADD      R10,R4,R10
   \      0x3D0   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x3D4   0x5CE3             LDRB     R3,[R4, R3]
   \      0x3D6   0x....'....        BL       emberAfGreenPowerClusterGpSinkTableResponseCallback
   1069                  break;
   \      0x3DA   0xE03B             B.N      ??emberAfGreenPowerClusterClientCommandParse_7
   1070                }
   1071              case ZCL_GP_PROXY_TABLE_REQUEST_COMMAND_ID:
   1072                {
   1073                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGreenPowerClusterClientCommandParse_6: (+1)
   \      0x3DC   0x7D30             LDRB     R0,[R6, #+20]
   1074                  uint8_t options;  // Ver.: always
   1075                  uint32_t gpdSrcId;  // Ver.: always
   1076                  uint8_t* gpdIeee;  // Ver.: always
   1077                  uint8_t endpoint;  // Ver.: always
   1078                  uint8_t index;  // Ver.: always
   1079                  // Command is not a fixed length
   1080                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x3DE   0x89B2             LDRH     R2,[R6, #+12]
   \      0x3E0   0x1C41             ADDS     R1,R0,#+1
   \      0x3E2   0x428A             CMP      R2,R1
   \      0x3E4   0xD201             BCS.N    ??emberAfGreenPowerClusterClientCommandParse_63
   \                     ??emberAfGreenPowerClusterClientCommandParse_62: (+1)
   \      0x3E6   0x2080             MOVS     R0,#+128
   \      0x3E8   0xE03B             B.N      ??emberAfGreenPowerClusterClientCommandParse_64
   1081                  options = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGreenPowerClusterClientCommandParse_63: (+1)
   \      0x3EA   0x68B3             LDR      R3,[R6, #+8]
   \      0x3EC   0x5C1C             LDRB     R4,[R3, R0]
   1082                  payloadOffset += 1u;
   \      0x3EE   0x1C40             ADDS     R0,R0,#+1
   \      0x3F0   0xFA1F 0xF980      UXTH     R9,R0
   1083                  if ( !( ((options & 0x18) == 0x00) && ((options & 0x07) == 0x00))) {
   \      0x3F4   0xF014 0x0F1F      TST      R4,#0x1F
   \      0x3F8   0xD015             BEQ.N    ??emberAfGreenPowerClusterClientCommandParse_65
   1084                    // Argument is not always present:
   1085                    // - it is conditionally present based on expression: ((options & 0x18) == 0x00) && ((options & 0x07) == 0x00)
   1086                    gpdSrcId = 0xFFFFFFFF;
   1087                  } else {
   1088                    gpdSrcId = emberAfGetInt32u(cmd->buffer, payloadOffset, cmd->bufLen);
   1089                    payloadOffset += 4u;
   1090                  }
   1091                  if ( !( ((options & 0x18) == 0x00) && ((options & 0x07) == 0x02))) {
   \      0x3FA   0xF004 0x011F      AND      R1,R4,#0x1F
   \      0x3FE   0x4650             MOV      R0,R10
   \      0x400   0x2902             CMP      R1,#+2
   \      0x402   0xD118             BNE.N    ??emberAfGreenPowerClusterClientCommandParse_66
   1092                    // Argument is not always present:
   1093                    // - it is conditionally present based on expression: ((options & 0x18) == 0x00) && ((options & 0x07) == 0x02)
   1094                    gpdIeee = NULL;
   1095                  } else {
   1096                    gpdIeee = cmd->buffer + payloadOffset;
   \      0x404   0xEB03 0x0209      ADD      R2,R3,R9
   1097                    payloadOffset += 8u;
   \      0x408   0xF109 0x0108      ADD      R1,R9,#+8
   \      0x40C   0xFA1F 0xF981      UXTH     R9,R1
   1098                  }
   1099                  if ( !( (options & 0x07) == 0x02)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_67: (+1)
   \      0x410   0xF004 0x0107      AND      R1,R4,#0x7
   \      0x414   0x2902             CMP      R1,#+2
   \      0x416   0xBF11             ITEEE    NE 
   \      0x418   0x23FF             MOVNE    R3,#+255
   \      0x41A   0x68B1             LDREQ    R1,[R6, #+8]
   \      0x41C   0xF811 0x3009      LDRBEQ   R3,[R1, R9]
   \      0x420   0xF109 0x0901      ADDEQ    R9,R9,#+1
   1100                    // Argument is not always present:
   1101                    // - it is conditionally present based on expression: (options & 0x07) == 0x02
   1102                    endpoint = 0xFF;
   1103                  } else {
   1104                    endpoint = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1105                    payloadOffset += 1u;
   \      0x424   0xE009             B.N      ??emberAfGreenPowerClusterClientCommandParse_68
   1106                  }
   \                     ??emberAfGreenPowerClusterClientCommandParse_65: (+1)
   \      0x426   0x4649             MOV      R1,R9
   \      0x428   0x4618             MOV      R0,R3
   \      0x42A   0x....'....        BL       emberAfGetInt32u
   \      0x42E   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x432   0xFA1F 0xF981      UXTH     R9,R1
   \                     ??emberAfGreenPowerClusterClientCommandParse_66: (+1)
   \      0x436   0x2200             MOVS     R2,#+0
   \      0x438   0xE7EA             B.N      ??emberAfGreenPowerClusterClientCommandParse_67
   1107                  if ( !( (options & 0x18) == 0x08)) {
   \                     ??emberAfGreenPowerClusterClientCommandParse_68: (+1)
   \      0x43A   0xF004 0x0118      AND      R1,R4,#0x18
   \      0x43E   0x2908             CMP      R1,#+8
   \      0x440   0xBF04             ITT      EQ 
   \      0x442   0x68B1             LDREQ    R1,[R6, #+8]
   \      0x444   0xF811 0xB009      LDRBEQ   R11,[R1, R9]
   1108                    // Argument is not always present:
   1109                    // - it is conditionally present based on expression: (options & 0x18) == 0x08
   1110                    index = 0xFF;
   1111                  } else {
   1112                    index = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1113                  }
   1114                  wasHandled = emberAfGreenPowerClusterGpProxyTableRequestCallback(options,
   1115                                                                                   gpdSrcId,
   1116                                                                                   gpdIeee,
   1117                                                                                   endpoint,
   1118                                                                                   index);
   \      0x448   0x4601             MOV      R1,R0
   \      0x44A   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \      0x44E   0x4620             MOV      R0,R4
   \      0x450   0x....'....        BL       emberAfGreenPowerClusterGpProxyTableRequestCallback
   1119                  break;
   1120                }
   1121              default:
   1122                {
   1123                  // Unrecognized command ID, error status will apply.
   1124                  break;
   1125                }
   1126              }
   1127            }
   1128            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfGreenPowerClusterClientCommandParse_7: (+1)
   \      0x454   0x7BF2             LDRB     R2,[R6, #+15]
   \      0x456   0xB00D             ADD      SP,SP,#+52
   \      0x458   0x2101             MOVS     R1,#+1
   \      0x45A   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \      0x45E   0x....'....        B.W      status
   \                     ??emberAfGreenPowerClusterClientCommandParse_64: (+1)
   \      0x462   0xB00D             ADD      SP,SP,#+52
   \      0x464   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1129          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18: (+1)
   \        0x0   0x68B0             LDR      R0,[R6, #+8]
   \        0x2   0x4639             MOV      R1,R7
   \        0x4   0x1CBF             ADDS     R7,R7,#+2
   \        0x6   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17: (+1)
   \        0x0   0x68A8             LDR      R0,[R5, #+8]
   \        0x2   0xB2A1             UXTH     R1,R4
   \                     ??Subroutine17_0: (+1)
   \        0x4   0x1CA4             ADDS     R4,R4,#+2
   \        0x6   0x....'....        B.W      emberAfGetInt16u
   1130          
   1131          // Cluster: Color Control, server

   \                                 In section .text, align 2, keep-with-next
   1132          EmberAfStatus emberAfColorControlClusterServerCommandParse(EmberAfClusterCommand *cmd)
   1133          {
   \                     emberAfColorControlClusterServerCommandParse: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x4605             MOV      R5,R0
   1134            bool wasHandled = false;
   1135            if (!cmd->mfgSpecific) {
   \        0x6   0x7BE9             LDRB     R1,[R5, #+15]
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD127             BNE.N    ??emberAfColorControlClusterServerCommandParse_0
   1136              switch (cmd->commandId) {
   \        0xE   0x7CE9             LDRB     R1,[R5, #+19]
   \       0x10   0xF04F 0x08FF      MOV      R8,#+255
   \       0x14   0xB321             CBZ.N    R1,??emberAfColorControlClusterServerCommandParse_1
   \       0x16   0x2901             CMP      R1,#+1
   \       0x18   0xD045             BEQ.N    ??emberAfColorControlClusterServerCommandParse_2
   \       0x1A   0x2902             CMP      R1,#+2
   \       0x1C   0xD058             BEQ.N    ??emberAfColorControlClusterServerCommandParse_3
   \       0x1E   0x2903             CMP      R1,#+3
   \       0x20   0xD076             BEQ.N    ??emberAfColorControlClusterServerCommandParse_4
   \       0x22   0x2904             CMP      R1,#+4
   \       0x24   0xF000 0x8094      BEQ.W    ??emberAfColorControlClusterServerCommandParse_5
   \       0x28   0x2905             CMP      R1,#+5
   \       0x2A   0xF000 0x80A7      BEQ.W    ??emberAfColorControlClusterServerCommandParse_6
   \       0x2E   0x2906             CMP      R1,#+6
   \       0x30   0xF000 0x80C4      BEQ.W    ??emberAfColorControlClusterServerCommandParse_7
   \       0x34   0x2907             CMP      R1,#+7
   \       0x36   0xF000 0x80E5      BEQ.W    ??emberAfColorControlClusterServerCommandParse_8
   \       0x3A   0x2908             CMP      R1,#+8
   \       0x3C   0xF000 0x8108      BEQ.W    ??emberAfColorControlClusterServerCommandParse_9
   \       0x40   0x2909             CMP      R1,#+9
   \       0x42   0xF000 0x8124      BEQ.W    ??emberAfColorControlClusterServerCommandParse_10
   \       0x46   0x290A             CMP      R1,#+10
   \       0x48   0xF000 0x814E      BEQ.W    ??emberAfColorControlClusterServerCommandParse_11
   \       0x4C   0x2947             CMP      R1,#+71
   \       0x4E   0xF000 0x8169      BEQ.W    ??emberAfColorControlClusterServerCommandParse_12
   \       0x52   0x294B             CMP      R1,#+75
   \       0x54   0xF000 0x8175      BEQ.W    ??emberAfColorControlClusterServerCommandParse_13
   \       0x58   0x294C             CMP      R1,#+76
   \       0x5A   0xF000 0x81B4      BEQ.W    ??emberAfColorControlClusterServerCommandParse_14
   \                     ??emberAfColorControlClusterServerCommandParse_0: (+1)
   \       0x5E   0xE1F0             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1137              case ZCL_MOVE_TO_HUE_COMMAND_ID:
   1138                {
   1139                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_1: (+1)
   \       0x60   0x7D29             LDRB     R1,[R5, #+20]
   1140                  uint8_t hue;  // Ver.: always
   1141                  uint8_t direction;  // Ver.: always
   1142                  uint16_t transitionTime;  // Ver.: always
   1143                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1144                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1145                  // Command is not a fixed length
   1146                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x62   0x89AA             LDRH     R2,[R5, #+12]
   \       0x64   0x1C48             ADDS     R0,R1,#+1
   \       0x66   0x4282             CMP      R2,R0
   \       0x68   0xD374             BCC.N    ??CrossCallReturnLabel_88
   1147                  hue = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x6A   0x68A8             LDR      R0,[R5, #+8]
   \       0x6C   0x5C44             LDRB     R4,[R0, R1]
   1148                  payloadOffset += 1u;
   \       0x6E   0x1C49             ADDS     R1,R1,#+1
   \       0x70   0xB289             UXTH     R1,R1
   1149                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x72   0x1C4F             ADDS     R7,R1,#+1
   \       0x74   0x42BA             CMP      R2,R7
   \       0x76   0xBF22             ITTT     CS 
   \       0x78   0x5C46             LDRBCS   R6,[R0, R1]
   \       0x7A   0x1CB9             ADDCS    R1,R7,#+2
   \       0x7C   0x428A             CMPCS    R2,R1
   1150                  direction = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1151                  payloadOffset += 1u;
   1152                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0x7E   0xD369             BCC.N    ??CrossCallReturnLabel_88
   1153                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0x80   0x....'....        BL       ??Subroutine16_0
   1154                  payloadOffset += 2u;
   \                     ??CrossCallReturnLabel_44: (+1)
   \       0x84   0x....'....        BL       ?Subroutine26
   1155                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_77: (+1)
   \       0x88   0xBF38             IT       CC 
   \       0x8A   0x23FF             MOVCC    R3,#+255
   1156                    // Argument is not always present:
   1157                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1158                    optionsMask = 0xFF;
   \       0x8C   0x....'....        BL       ?Subroutine7
   1159                  } else {
   1160                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1161                    payloadOffset += 1u;
   1162                  }
   1163                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   1164                    // Argument is not always present:
   1165                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1166                    optionsOverride = 0xFF;
   1167                  } else {
   1168                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1169                  }
   1170                  wasHandled = emberAfColorControlClusterMoveToHueCallback(hue,
   1171                                                                           direction,
   1172                                                                           transitionTime,
   1173                                                                           optionsMask,
   1174                                                                           optionsOverride);
   \                     ??CrossCallReturnLabel_18: (+1)
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0xBF24             ITT      CS 
   \       0x94   0x68A9             LDRCS    R1,[R5, #+8]
   \       0x96   0xF811 0x8007      LDRBCS   R8,[R1, R7]
   \       0x9A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x9E   0x4631             MOV      R1,R6
   \       0xA0   0x....'....        BL       emberAfColorControlClusterMoveToHueCallback
   1175                  break;
   \       0xA4   0xE1CD             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1176                }
   1177              case ZCL_MOVE_HUE_COMMAND_ID:
   1178                {
   1179                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_2: (+1)
   \       0xA6   0x....'....        BL       ?Subroutine29
   1180                  uint8_t moveMode;  // Ver.: always
   1181                  uint8_t rate;  // Ver.: always
   1182                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1183                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1184                  // Command is not a fixed length
   1185                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_87: (+1)
   \       0xAA   0xD353             BCC.N    ??CrossCallReturnLabel_88
   1186                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xAC   0x....'....        BL       ?Subroutine23
   1187                  payloadOffset += 1u;
   1188                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_68: (+1)
   \       0xB0   0xD350             BCC.N    ??CrossCallReturnLabel_88
   1189                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xB2   0x....'....        BL       ?Subroutine24
   1190                  payloadOffset += 1u;
   1191                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_71: (+1)
   \       0xB6   0xBF31             ITEEE    CC 
   \       0xB8   0x22FF             MOVCC    R2,#+255
   \       0xBA   0x5DE2             LDRBCS   R2,[R4, R7]
   \       0xBC   0x1C7F             ADDCS    R7,R7,#+1
   \       0xBE   0xB2BF             UXTHCS   R7,R7
   1192                    // Argument is not always present:
   1193                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1194                    optionsMask = 0xFF;
   1195                  } else {
   1196                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1197                    payloadOffset += 1u;
   1198                  }
   1199                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0xC0   0x1C7E             ADDS     R6,R7,#+1
   \       0xC2   0x42B3             CMP      R3,R6
   \       0xC4   0xBF34             ITE      CC 
   \       0xC6   0x23FF             MOVCC    R3,#+255
   \       0xC8   0x5DE3             LDRBCS   R3,[R4, R7]
   1200                    // Argument is not always present:
   1201                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1202                    optionsOverride = 0xFF;
   1203                  } else {
   1204                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1205                  }
   1206                  wasHandled = emberAfColorControlClusterMoveHueCallback(moveMode,
   1207                                                                         rate,
   1208                                                                         optionsMask,
   1209                                                                         optionsOverride);
   \       0xCA   0x....'....        BL       emberAfColorControlClusterMoveHueCallback
   1210                  break;
   \       0xCE   0xE1B8             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1211                }
   1212              case ZCL_STEP_HUE_COMMAND_ID:
   1213                {
   1214                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_3: (+1)
   \       0xD0   0x7D29             LDRB     R1,[R5, #+20]
   1215                  uint8_t stepMode;  // Ver.: always
   1216                  uint8_t stepSize;  // Ver.: always
   1217                  uint8_t transitionTime;  // Ver.: always
   1218                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1219                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1220                  // Command is not a fixed length
   1221                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \       0xD2   0x89AC             LDRH     R4,[R5, #+12]
   \       0xD4   0x1C48             ADDS     R0,R1,#+1
   \       0xD6   0x4284             CMP      R4,R0
   \       0xD8   0xD33C             BCC.N    ??CrossCallReturnLabel_88
   1222                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xDA   0x....'....        BL       ?Subroutine33
   1223                  payloadOffset += 1u;
   1224                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_97: (+1)
   \       0xDE   0xD339             BCC.N    ??CrossCallReturnLabel_88
   1225                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xE0   0x....'....        BL       ?Subroutine34
   1226                  payloadOffset += 1u;
   1227                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_99: (+1)
   \       0xE4   0xD336             BCC.N    ??CrossCallReturnLabel_88
   1228                  transitionTime = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \       0xE6   0x....'....        BL       ?Subroutine30
   1229                  payloadOffset += 1u;
   1230                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_89: (+1)
   \       0xEA   0xBF31             ITEEE    CC 
   \       0xEC   0x23FF             MOVCC    R3,#+255
   \       0xEE   0xF817 0x300C      LDRBCS   R3,[R7, R12]
   \       0xF2   0xF10C 0x0601      ADDCS    R6,R12,#+1
   \       0xF6   0xFA1F 0xFC86      UXTHCS   R12,R6
   1231                    // Argument is not always present:
   1232                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1233                    optionsMask = 0xFF;
   1234                  } else {
   1235                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1236                    payloadOffset += 1u;
   1237                  }
   1238                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \       0xFA   0xF10C 0x0601      ADD      R6,R12,#+1
   \       0xFE   0x42B4             CMP      R4,R6
   \      0x100   0xBF28             IT       CS 
   \      0x102   0xF817 0x800C      LDRBCS   R8,[R7, R12]
   1239                    // Argument is not always present:
   1240                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1241                    optionsOverride = 0xFF;
   1242                  } else {
   1243                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1244                  }
   1245                  wasHandled = emberAfColorControlClusterStepHueCallback(stepMode,
   1246                                                                         stepSize,
   1247                                                                         transitionTime,
   1248                                                                         optionsMask,
   1249                                                                         optionsOverride);
   \      0x106   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x10A   0x....'....        BL       emberAfColorControlClusterStepHueCallback
   1250                  break;
   \      0x10E   0xE198             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1251                }
   1252              case ZCL_MOVE_TO_SATURATION_COMMAND_ID:
   1253                {
   1254                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_4: (+1)
   \      0x110   0x7D2B             LDRB     R3,[R5, #+20]
   1255                  uint8_t saturation;  // Ver.: always
   1256                  uint16_t transitionTime;  // Ver.: always
   1257                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1258                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1259                  // Command is not a fixed length
   1260                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x112   0x89AA             LDRH     R2,[R5, #+12]
   \      0x114   0x1C5F             ADDS     R7,R3,#+1
   \      0x116   0x42BA             CMP      R2,R7
   \      0x118   0xBF21             ITTTT    CS 
   \      0x11A   0x68A8             LDRCS    R0,[R5, #+8]
   \      0x11C   0x5CC4             LDRBCS   R4,[R0, R3]
   \      0x11E   0x1CBB             ADDCS    R3,R7,#+2
   \      0x120   0x429A             CMPCS    R2,R3
   1261                  saturation = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1262                  payloadOffset += 1u;
   1263                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x122   0xD317             BCC.N    ??CrossCallReturnLabel_88
   1264                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x124   0x....'....        BL       ??Subroutine16_0
   1265                  payloadOffset += 2u;
   \                     ??CrossCallReturnLabel_43: (+1)
   \      0x128   0x....'....        BL       ?Subroutine26
   1266                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_78: (+1)
   \      0x12C   0xBF38             IT       CC 
   \      0x12E   0x22FF             MOVCC    R2,#+255
   1267                    // Argument is not always present:
   1268                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1269                    optionsMask = 0xFF;
   \      0x130   0xD303             BCC.N    ??emberAfColorControlClusterServerCommandParse_16
   1270                  } else {
   1271                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x132   0x68AB             LDR      R3,[R5, #+8]
   \      0x134   0x5DDA             LDRB     R2,[R3, R7]
   1272                    payloadOffset += 1u;
   \      0x136   0x1C7F             ADDS     R7,R7,#+1
   \      0x138   0xB2BF             UXTH     R7,R7
   1273                  }
   1274                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfColorControlClusterServerCommandParse_16: (+1)
   \      0x13A   0x1C7B             ADDS     R3,R7,#+1
   \      0x13C   0x4299             CMP      R1,R3
   \      0x13E   0xBF32             ITEE     CC 
   \      0x140   0x23FF             MOVCC    R3,#+255
   \      0x142   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x144   0x5DCB             LDRBCS   R3,[R1, R7]
   1275                    // Argument is not always present:
   1276                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1277                    optionsOverride = 0xFF;
   1278                  } else {
   1279                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1280                  }
   1281                  wasHandled = emberAfColorControlClusterMoveToSaturationCallback(saturation,
   1282                                                                                  transitionTime,
   1283                                                                                  optionsMask,
   1284                                                                                  optionsOverride);
   \      0x146   0x4601             MOV      R1,R0
   \      0x148   0x4620             MOV      R0,R4
   \      0x14A   0x....'....        BL       emberAfColorControlClusterMoveToSaturationCallback
   1285                  break;
   \      0x14E   0xE178             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1286                }
   1287              case ZCL_MOVE_SATURATION_COMMAND_ID:
   1288                {
   1289                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_5: (+1)
   \      0x150   0x....'....        BL       ?Subroutine29
   1290                  uint8_t moveMode;  // Ver.: always
   1291                  uint8_t rate;  // Ver.: always
   1292                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1293                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1294                  // Command is not a fixed length
   1295                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_88: (+1)
   \      0x154   0xF0C0 0x815D      BCC.W    ??emberAfColorControlClusterServerCommandParse_17
   1296                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x158   0x....'....        BL       ?Subroutine23
   1297                  payloadOffset += 1u;
   1298                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_69: (+1)
   \      0x15C   0xD3FA             BCC.N    ??CrossCallReturnLabel_88
   1299                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x15E   0x....'....        BL       ?Subroutine24
   1300                  payloadOffset += 1u;
   1301                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_72: (+1)
   \      0x162   0xBF31             ITEEE    CC 
   \      0x164   0x22FF             MOVCC    R2,#+255
   \      0x166   0x5DE2             LDRBCS   R2,[R4, R7]
   \      0x168   0x1C7F             ADDCS    R7,R7,#+1
   \      0x16A   0xB2BF             UXTHCS   R7,R7
   1302                    // Argument is not always present:
   1303                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1304                    optionsMask = 0xFF;
   1305                  } else {
   1306                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1307                    payloadOffset += 1u;
   1308                  }
   1309                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x16C   0x1C7E             ADDS     R6,R7,#+1
   \      0x16E   0x42B3             CMP      R3,R6
   \      0x170   0xBF34             ITE      CC 
   \      0x172   0x23FF             MOVCC    R3,#+255
   \      0x174   0x5DE3             LDRBCS   R3,[R4, R7]
   1310                    // Argument is not always present:
   1311                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1312                    optionsOverride = 0xFF;
   1313                  } else {
   1314                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1315                  }
   1316                  wasHandled = emberAfColorControlClusterMoveSaturationCallback(moveMode,
   1317                                                                                rate,
   1318                                                                                optionsMask,
   1319                                                                                optionsOverride);
   \      0x176   0x....'....        BL       emberAfColorControlClusterMoveSaturationCallback
   1320                  break;
   \      0x17A   0xE162             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1321                }
   1322              case ZCL_STEP_SATURATION_COMMAND_ID:
   1323                {
   1324                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_6: (+1)
   \      0x17C   0x7D29             LDRB     R1,[R5, #+20]
   1325                  uint8_t stepMode;  // Ver.: always
   1326                  uint8_t stepSize;  // Ver.: always
   1327                  uint8_t transitionTime;  // Ver.: always
   1328                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1329                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1330                  // Command is not a fixed length
   1331                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x17E   0x89AC             LDRH     R4,[R5, #+12]
   \      0x180   0x1C48             ADDS     R0,R1,#+1
   \      0x182   0x4284             CMP      R4,R0
   \      0x184   0xD3E6             BCC.N    ??CrossCallReturnLabel_88
   1332                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x186   0x....'....        BL       ?Subroutine33
   1333                  payloadOffset += 1u;
   1334                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_98: (+1)
   \      0x18A   0xD3E3             BCC.N    ??CrossCallReturnLabel_88
   1335                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x18C   0x....'....        BL       ?Subroutine34
   1336                  payloadOffset += 1u;
   1337                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_100: (+1)
   \      0x190   0xD3E0             BCC.N    ??CrossCallReturnLabel_88
   1338                  transitionTime = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x192   0x....'....        BL       ?Subroutine30
   1339                  payloadOffset += 1u;
   1340                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_90: (+1)
   \      0x196   0xBF31             ITEEE    CC 
   \      0x198   0x23FF             MOVCC    R3,#+255
   \      0x19A   0xF817 0x300C      LDRBCS   R3,[R7, R12]
   \      0x19E   0xF10C 0x0601      ADDCS    R6,R12,#+1
   \      0x1A2   0xFA1F 0xFC86      UXTHCS   R12,R6
   1341                    // Argument is not always present:
   1342                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1343                    optionsMask = 0xFF;
   1344                  } else {
   1345                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1346                    payloadOffset += 1u;
   1347                  }
   1348                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x1A6   0xF10C 0x0601      ADD      R6,R12,#+1
   \      0x1AA   0x42B4             CMP      R4,R6
   \      0x1AC   0xBF28             IT       CS 
   \      0x1AE   0xF817 0x800C      LDRBCS   R8,[R7, R12]
   1349                    // Argument is not always present:
   1350                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1351                    optionsOverride = 0xFF;
   1352                  } else {
   1353                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1354                  }
   1355                  wasHandled = emberAfColorControlClusterStepSaturationCallback(stepMode,
   1356                                                                                stepSize,
   1357                                                                                transitionTime,
   1358                                                                                optionsMask,
   1359                                                                                optionsOverride);
   \      0x1B2   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x1B6   0x....'....        BL       emberAfColorControlClusterStepSaturationCallback
   1360                  break;
   \      0x1BA   0xE142             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1361                }
   1362              case ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID:
   1363                {
   1364                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_7: (+1)
   \      0x1BC   0x7D2B             LDRB     R3,[R5, #+20]
   1365                  uint8_t hue;  // Ver.: always
   1366                  uint8_t saturation;  // Ver.: always
   1367                  uint16_t transitionTime;  // Ver.: always
   1368                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1369                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1370                  // Command is not a fixed length
   1371                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x1BE   0x89AA             LDRH     R2,[R5, #+12]
   \      0x1C0   0x1C58             ADDS     R0,R3,#+1
   \      0x1C2   0x4282             CMP      R2,R0
   \      0x1C4   0xD3C6             BCC.N    ??CrossCallReturnLabel_88
   1372                  hue = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x1C6   0x68A8             LDR      R0,[R5, #+8]
   \      0x1C8   0x5CC4             LDRB     R4,[R0, R3]
   1373                  payloadOffset += 1u;
   \      0x1CA   0x1C5B             ADDS     R3,R3,#+1
   \      0x1CC   0xB29B             UXTH     R3,R3
   1374                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x1CE   0x1C5E             ADDS     R6,R3,#+1
   \      0x1D0   0x42B2             CMP      R2,R6
   \      0x1D2   0xBF22             ITTT     CS 
   \      0x1D4   0x5CC7             LDRBCS   R7,[R0, R3]
   \      0x1D6   0x1CB3             ADDCS    R3,R6,#+2
   \      0x1D8   0x429A             CMPCS    R2,R3
   1375                  saturation = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1376                  payloadOffset += 1u;
   1377                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x1DA   0xD3BB             BCC.N    ??CrossCallReturnLabel_88
   1378                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x1DC   0xB2B1             UXTH     R1,R6
   \      0x1DE   0x....'....        BL       emberAfGetInt16u
   1379                  payloadOffset += 2u;
   \      0x1E2   0x1CB6             ADDS     R6,R6,#+2
   1380                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x1E4   0x....'....        BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_91: (+1)
   \      0x1E8   0xBF38             IT       CC 
   \      0x1EA   0x23FF             MOVCC    R3,#+255
   1381                    // Argument is not always present:
   1382                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1383                    optionsMask = 0xFF;
   \      0x1EC   0x....'....        BL       ?Subroutine6
   1384                  } else {
   1385                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1386                    payloadOffset += 1u;
   1387                  }
   1388                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   1389                    // Argument is not always present:
   1390                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1391                    optionsOverride = 0xFF;
   1392                  } else {
   1393                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1394                  }
   1395                  wasHandled = emberAfColorControlClusterMoveToHueAndSaturationCallback(hue,
   1396                                                                                        saturation,
   1397                                                                                        transitionTime,
   1398                                                                                        optionsMask,
   1399                                                                                        optionsOverride);
   \                     ??CrossCallReturnLabel_15: (+1)
   \      0x1F0   0xBF24             ITT      CS 
   \      0x1F2   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x1F4   0xF811 0x8006      LDRBCS   R8,[R1, R6]
   \      0x1F8   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x1FC   0x4639             MOV      R1,R7
   \      0x1FE   0x....'....        BL       emberAfColorControlClusterMoveToHueAndSaturationCallback
   1400                  break;
   \      0x202   0xE11E             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1401                }
   1402              case ZCL_MOVE_TO_COLOR_COMMAND_ID:
   1403                {
   1404                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_8: (+1)
   \      0x204   0x7D29             LDRB     R1,[R5, #+20]
   1405                  uint16_t colorX;  // Ver.: always
   1406                  uint16_t colorY;  // Ver.: always
   1407                  uint16_t transitionTime;  // Ver.: always
   1408                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1409                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1410                  // Command is not a fixed length
   1411                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x206   0x89AA             LDRH     R2,[R5, #+12]
   \      0x208   0x1C8F             ADDS     R7,R1,#+2
   \      0x20A   0x42BA             CMP      R2,R7
   \      0x20C   0xD3A2             BCC.N    ??CrossCallReturnLabel_88
   1412                  colorX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x20E   0x68A8             LDR      R0,[R5, #+8]
   \      0x210   0x1CBE             ADDS     R6,R7,#+2
   \      0x212   0x....'....        BL       emberAfGetInt16u
   1413                  payloadOffset += 2u;
   1414                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x216   0x89AA             LDRH     R2,[R5, #+12]
   \      0x218   0x4604             MOV      R4,R0
   \      0x21A   0x42B2             CMP      R2,R6
   \      0x21C   0xD39A             BCC.N    ??CrossCallReturnLabel_88
   1415                  colorY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x21E   0x....'....        BL       ?Subroutine16
   1416                  payloadOffset += 2u;
   1417                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_50: (+1)
   \      0x222   0x89AA             LDRH     R2,[R5, #+12]
   \      0x224   0x1CB1             ADDS     R1,R6,#+2
   \      0x226   0x4607             MOV      R7,R0
   \      0x228   0x428A             CMP      R2,R1
   \      0x22A   0xD393             BCC.N    ??CrossCallReturnLabel_88
   1418                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x22C   0x....'....        BL       ?Subroutine20
   1419                  payloadOffset += 2u;
   1420                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_63: (+1)
   \      0x230   0x....'....        BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_92: (+1)
   \      0x234   0xBF38             IT       CC 
   \      0x236   0x23FF             MOVCC    R3,#+255
   1421                    // Argument is not always present:
   1422                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1423                    optionsMask = 0xFF;
   \      0x238   0x....'....        BL       ?Subroutine6
   1424                  } else {
   1425                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1426                    payloadOffset += 1u;
   1427                  }
   1428                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   1429                    // Argument is not always present:
   1430                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1431                    optionsOverride = 0xFF;
   1432                  } else {
   1433                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1434                  }
   1435                  wasHandled = emberAfColorControlClusterMoveToColorCallback(colorX,
   1436                                                                             colorY,
   1437                                                                             transitionTime,
   1438                                                                             optionsMask,
   1439                                                                             optionsOverride);
   \                     ??CrossCallReturnLabel_16: (+1)
   \      0x23C   0xBF24             ITT      CS 
   \      0x23E   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x240   0xF811 0x8006      LDRBCS   R8,[R1, R6]
   \      0x244   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x248   0x4639             MOV      R1,R7
   \      0x24A   0x....'....        BL       emberAfColorControlClusterMoveToColorCallback
   1440                  break;
   \      0x24E   0xE0F8             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1441                }
   1442              case ZCL_MOVE_COLOR_COMMAND_ID:
   1443                {
   1444                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_9: (+1)
   \      0x250   0x7D29             LDRB     R1,[R5, #+20]
   1445                  int16_t rateX;  // Ver.: always
   1446                  int16_t rateY;  // Ver.: always
   1447                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1448                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1449                  // Command is not a fixed length
   1450                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x252   0x89AA             LDRH     R2,[R5, #+12]
   \      0x254   0x1C8C             ADDS     R4,R1,#+2
   \      0x256   0x42A2             CMP      R2,R4
   \      0x258   0xF0C0 0x80DB      BCC.W    ??emberAfColorControlClusterServerCommandParse_17
   1451                  rateX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x25C   0x68A8             LDR      R0,[R5, #+8]
   \      0x25E   0x....'....        BL       emberAfGetInt16u
   1452                  payloadOffset += 2u;
   1453                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x262   0x89AA             LDRH     R2,[R5, #+12]
   \      0x264   0x1CA1             ADDS     R1,R4,#+2
   \      0x266   0x4607             MOV      R7,R0
   \      0x268   0x428A             CMP      R2,R1
   \      0x26A   0xD373             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1454                  rateY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x26C   0x....'....        BL       ?Subroutine17
   1455                  payloadOffset += 2u;
   1456                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_54: (+1)
   \      0x270   0x....'....        BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_94: (+1)
   \      0x274   0xBF38             IT       CC 
   \      0x276   0x22FF             MOVCC    R2,#+255
   1457                    // Argument is not always present:
   1458                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1459                    optionsMask = 0xFF;
   \      0x278   0x....'....        BL       ?Subroutine5
   1460                  } else {
   1461                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1462                    payloadOffset += 1u;
   1463                  }
   1464                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_12: (+1)
   \      0x27C   0xBF32             ITEE     CC 
   \      0x27E   0x23FF             MOVCC    R3,#+255
   \      0x280   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x282   0x5D0B             LDRBCS   R3,[R1, R4]
   1465                    // Argument is not always present:
   1466                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1467                    optionsOverride = 0xFF;
   1468                  } else {
   1469                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1470                  }
   1471                  wasHandled = emberAfColorControlClusterMoveColorCallback(rateX,
   1472                                                                           rateY,
   1473                                                                           optionsMask,
   1474                                                                           optionsOverride);
   \      0x284   0xB201             SXTH     R1,R0
   \      0x286   0xB238             SXTH     R0,R7
   \      0x288   0x....'....        BL       emberAfColorControlClusterMoveColorCallback
   1475                  break;
   \      0x28C   0xE0D9             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1476                }
   1477              case ZCL_STEP_COLOR_COMMAND_ID:
   1478                {
   1479                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_10: (+1)
   \      0x28E   0x7D29             LDRB     R1,[R5, #+20]
   1480                  int16_t stepX;  // Ver.: always
   1481                  int16_t stepY;  // Ver.: always
   1482                  uint16_t transitionTime;  // Ver.: always
   1483                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1484                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1485                  // Command is not a fixed length
   1486                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x290   0x89AA             LDRH     R2,[R5, #+12]
   \      0x292   0x1C8F             ADDS     R7,R1,#+2
   \      0x294   0x42BA             CMP      R2,R7
   \      0x296   0xD35D             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1487                  stepX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x298   0x68A8             LDR      R0,[R5, #+8]
   \      0x29A   0x1CBE             ADDS     R6,R7,#+2
   \      0x29C   0x....'....        BL       emberAfGetInt16u
   1488                  payloadOffset += 2u;
   1489                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x2A0   0x89AA             LDRH     R2,[R5, #+12]
   \      0x2A2   0x4604             MOV      R4,R0
   \      0x2A4   0x42B2             CMP      R2,R6
   \      0x2A6   0xD355             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1490                  stepY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x2A8   0x....'....        BL       ?Subroutine16
   1491                  payloadOffset += 2u;
   1492                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_49: (+1)
   \      0x2AC   0x89AA             LDRH     R2,[R5, #+12]
   \      0x2AE   0x1CB1             ADDS     R1,R6,#+2
   \      0x2B0   0x4607             MOV      R7,R0
   \      0x2B2   0x428A             CMP      R2,R1
   \      0x2B4   0xD34E             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1493                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x2B6   0x....'....        BL       ?Subroutine20
   1494                  payloadOffset += 2u;
   1495                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_62: (+1)
   \      0x2BA   0x....'....        BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_93: (+1)
   \      0x2BE   0xBF38             IT       CC 
   \      0x2C0   0x23FF             MOVCC    R3,#+255
   1496                    // Argument is not always present:
   1497                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1498                    optionsMask = 0xFF;
   \      0x2C2   0xD303             BCC.N    ??emberAfColorControlClusterServerCommandParse_19
   1499                  } else {
   1500                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x2C4   0x68AB             LDR      R3,[R5, #+8]
   \      0x2C6   0x5D9B             LDRB     R3,[R3, R6]
   1501                    payloadOffset += 1u;
   \      0x2C8   0x1C76             ADDS     R6,R6,#+1
   \      0x2CA   0xB2B6             UXTH     R6,R6
   1502                  }
   1503                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfColorControlClusterServerCommandParse_19: (+1)
   \      0x2CC   0x1C72             ADDS     R2,R6,#+1
   \      0x2CE   0x4291             CMP      R1,R2
   1504                    // Argument is not always present:
   1505                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1506                    optionsOverride = 0xFF;
   1507                  } else {
   1508                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1509                  }
   1510                  wasHandled = emberAfColorControlClusterStepColorCallback(stepX,
   1511                                                                           stepY,
   1512                                                                           transitionTime,
   1513                                                                           optionsMask,
   1514                                                                           optionsOverride);
   \      0x2D0   0x4602             MOV      R2,R0
   \      0x2D2   0xB220             SXTH     R0,R4
   \      0x2D4   0xBF24             ITT      CS 
   \      0x2D6   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x2D8   0xF811 0x8006      LDRBCS   R8,[R1, R6]
   \      0x2DC   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x2E0   0xB239             SXTH     R1,R7
   \      0x2E2   0x....'....        BL       emberAfColorControlClusterStepColorCallback
   1515                  break;
   \      0x2E6   0xE0AC             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1516                }
   1517              case ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID:
   1518                {
   1519                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_11: (+1)
   \      0x2E8   0x7D29             LDRB     R1,[R5, #+20]
   1520                  uint16_t colorTemperature;  // Ver.: always
   1521                  uint16_t transitionTime;  // Ver.: always
   1522                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1523                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1524                  // Command is not a fixed length
   1525                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x2EA   0x89AA             LDRH     R2,[R5, #+12]
   \      0x2EC   0x1C8C             ADDS     R4,R1,#+2
   \      0x2EE   0x42A2             CMP      R2,R4
   \      0x2F0   0xD330             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1526                  colorTemperature = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x2F2   0x68A8             LDR      R0,[R5, #+8]
   \      0x2F4   0x....'....        BL       emberAfGetInt16u
   1527                  payloadOffset += 2u;
   1528                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x2F8   0x89AA             LDRH     R2,[R5, #+12]
   \      0x2FA   0x1CA1             ADDS     R1,R4,#+2
   \      0x2FC   0x4607             MOV      R7,R0
   \      0x2FE   0x428A             CMP      R2,R1
   \      0x300   0xD328             BCC.N    ??emberAfColorControlClusterServerCommandParse_18
   1529                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x302   0x....'....        BL       ?Subroutine17
   1530                  payloadOffset += 2u;
   1531                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_53: (+1)
   \      0x306   0x....'....        BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_95: (+1)
   \      0x30A   0xBF38             IT       CC 
   \      0x30C   0x22FF             MOVCC    R2,#+255
   1532                    // Argument is not always present:
   1533                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1534                    optionsMask = 0xFF;
   \      0x30E   0x....'....        BL       ?Subroutine5
   1535                  } else {
   1536                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1537                    payloadOffset += 1u;
   1538                  }
   1539                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_13: (+1)
   \      0x312   0xBF32             ITEE     CC 
   \      0x314   0x23FF             MOVCC    R3,#+255
   \      0x316   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x318   0x5D0B             LDRBCS   R3,[R1, R4]
   1540                    // Argument is not always present:
   1541                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1542                    optionsOverride = 0xFF;
   1543                  } else {
   1544                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1545                  }
   1546                  wasHandled = emberAfColorControlClusterMoveToColorTemperatureCallback(colorTemperature,
   1547                                                                                        transitionTime,
   1548                                                                                        optionsMask,
   1549                                                                                        optionsOverride);
   \      0x31A   0x4601             MOV      R1,R0
   \      0x31C   0x4638             MOV      R0,R7
   \      0x31E   0x....'....        BL       emberAfColorControlClusterMoveToColorTemperatureCallback
   1550                  break;
   \      0x322   0xE08E             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1551                }
   1552              case ZCL_STOP_MOVE_STEP_COMMAND_ID:
   1553                {
   1554                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_12: (+1)
   \      0x324   0x7D2A             LDRB     R2,[R5, #+20]
   1555                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1556                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1557                  // Command is not a fixed length
   1558                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x326   0x89A9             LDRH     R1,[R5, #+12]
   \      0x328   0x1C50             ADDS     R0,R2,#+1
   \      0x32A   0x4281             CMP      R1,R0
   \      0x32C   0xBF38             IT       CC 
   \      0x32E   0x20FF             MOVCC    R0,#+255
   1559                    // Argument is not always present:
   1560                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1561                    optionsMask = 0xFF;
   \      0x330   0x....'....        BL       ?Subroutine8
   1562                  } else {
   1563                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1564                    payloadOffset += 1u;
   1565                  }
   1566                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_20: (+1)
   \      0x334   0xBF32             ITEE     CC 
   \      0x336   0x21FF             MOVCC    R1,#+255
   \      0x338   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x33A   0x5C89             LDRBCS   R1,[R1, R2]
   1567                    // Argument is not always present:
   1568                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1569                    optionsOverride = 0xFF;
   1570                  } else {
   1571                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1572                  }
   1573                  wasHandled = emberAfColorControlClusterStopMoveStepCallback(optionsMask,
   1574                                                                              optionsOverride);
   \      0x33C   0x....'....        BL       emberAfColorControlClusterStopMoveStepCallback
   1575                  break;
   \      0x340   0xE07F             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1576                }
   1577              case ZCL_MOVE_COLOR_TEMPERATURE_COMMAND_ID:
   1578                {
   1579                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_13: (+1)
   \      0x342   0x7D2C             LDRB     R4,[R5, #+20]
   1580                  uint8_t moveMode;  // Ver.: always
   1581                  uint16_t rate;  // Ver.: always
   1582                  uint16_t colorTemperatureMinimum;  // Ver.: always
   1583                  uint16_t colorTemperatureMaximum;  // Ver.: always
   1584                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1585                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1586                  // Command is not a fixed length
   1587                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x344   0x89AA             LDRH     R2,[R5, #+12]
   \      0x346   0x1C61             ADDS     R1,R4,#+1
   \      0x348   0x428A             CMP      R2,R1
   \      0x34A   0xBF21             ITTTT    CS 
   \      0x34C   0x68A8             LDRCS    R0,[R5, #+8]
   \      0x34E   0x5D04             LDRBCS   R4,[R0, R4]
   \      0x350   0x1C8F             ADDCS    R7,R1,#+2
   \      0x352   0x42BA             CMPCS    R2,R7
   1588                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1589                  payloadOffset += 1u;
   1590                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??emberAfColorControlClusterServerCommandParse_18: (+1)
   \      0x354   0xD35D             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1591                  rate = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x356   0x....'....        BL       ??Subroutine19_0
   1592                  payloadOffset += 2u;
   1593                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_59: (+1)
   \      0x35A   0x89AA             LDRH     R2,[R5, #+12]
   \      0x35C   0xF107 0x0902      ADD      R9,R7,#+2
   \      0x360   0x4606             MOV      R6,R0
   \      0x362   0x454A             CMP      R2,R9
   \      0x364   0xD355             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1594                  colorTemperatureMinimum = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x366   0x....'....        BL       ?Subroutine16
   1595                  payloadOffset += 2u;
   1596                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_48: (+1)
   \      0x36A   0x89AA             LDRH     R2,[R5, #+12]
   \      0x36C   0xF109 0x0102      ADD      R1,R9,#+2
   \      0x370   0x4607             MOV      R7,R0
   \      0x372   0x428A             CMP      R2,R1
   \      0x374   0xD34D             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1597                  colorTemperatureMaximum = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x376   0x68A8             LDR      R0,[R5, #+8]
   \      0x378   0xFA1F 0xF189      UXTH     R1,R9
   \      0x37C   0x....'....        BL       emberAfGetInt16u
   1598                  payloadOffset += 2u;
   \      0x380   0xF109 0x0102      ADD      R1,R9,#+2
   \      0x384   0xFA1F 0xF981      UXTH     R9,R1
   1599                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \      0x388   0x89A9             LDRH     R1,[R5, #+12]
   \      0x38A   0xF109 0x0201      ADD      R2,R9,#+1
   \      0x38E   0x4291             CMP      R1,R2
   \      0x390   0xBF38             IT       CC 
   \      0x392   0x22FF             MOVCC    R2,#+255
   1600                    // Argument is not always present:
   1601                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1602                    optionsMask = 0xFF;
   \      0x394   0xD306             BCC.N    ??emberAfColorControlClusterServerCommandParse_20
   1603                  } else {
   1604                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x396   0x68AB             LDR      R3,[R5, #+8]
   \      0x398   0xF813 0x2009      LDRB     R2,[R3, R9]
   1605                    payloadOffset += 1u;
   \      0x39C   0xF109 0x0301      ADD      R3,R9,#+1
   \      0x3A0   0xFA1F 0xF983      UXTH     R9,R3
   1606                  }
   1607                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??emberAfColorControlClusterServerCommandParse_20: (+1)
   \      0x3A4   0xF109 0x0301      ADD      R3,R9,#+1
   \      0x3A8   0x4299             CMP      R1,R3
   1608                    // Argument is not always present:
   1609                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1610                    optionsOverride = 0xFF;
   1611                  } else {
   1612                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1613                  }
   1614                  wasHandled = emberAfColorControlClusterMoveColorTemperatureCallback(moveMode,
   1615                                                                                      rate,
   1616                                                                                      colorTemperatureMinimum,
   1617                                                                                      colorTemperatureMaximum,
   1618                                                                                      optionsMask,
   1619                                                                                      optionsOverride);
   \      0x3AA   0x4603             MOV      R3,R0
   \      0x3AC   0x4620             MOV      R0,R4
   \      0x3AE   0xBF24             ITT      CS 
   \      0x3B0   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x3B2   0xF811 0x8009      LDRBCS   R8,[R1, R9]
   \      0x3B6   0x9200             STR      R2,[SP, #+0]
   \      0x3B8   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \      0x3BC   0x463A             MOV      R2,R7
   \      0x3BE   0x4631             MOV      R1,R6
   \      0x3C0   0x....'....        BL       emberAfColorControlClusterMoveColorTemperatureCallback
   1620                  break;
   \      0x3C4   0xE03D             B.N      ??emberAfColorControlClusterServerCommandParse_15
   1621                }
   1622              case ZCL_STEP_COLOR_TEMPERATURE_COMMAND_ID:
   1623                {
   1624                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_14: (+1)
   \      0x3C6   0x7D2C             LDRB     R4,[R5, #+20]
   1625                  uint8_t stepMode;  // Ver.: always
   1626                  uint16_t stepSize;  // Ver.: always
   1627                  uint16_t transitionTime;  // Ver.: always
   1628                  uint16_t colorTemperatureMinimum;  // Ver.: always
   1629                  uint16_t colorTemperatureMaximum;  // Ver.: always
   1630                  uint8_t optionsMask;  // Ver.: since zcl6-errata-14-0129-15
   1631                  uint8_t optionsOverride;  // Ver.: since zcl6-errata-14-0129-15
   1632                  // Command is not a fixed length
   1633                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x3C8   0x89AA             LDRH     R2,[R5, #+12]
   \      0x3CA   0x1C61             ADDS     R1,R4,#+1
   \      0x3CC   0x428A             CMP      R2,R1
   \      0x3CE   0xBF21             ITTTT    CS 
   \      0x3D0   0x68A8             LDRCS    R0,[R5, #+8]
   \      0x3D2   0x5D07             LDRBCS   R7,[R0, R4]
   \      0x3D4   0x1C8C             ADDCS    R4,R1,#+2
   \      0x3D6   0x42A2             CMPCS    R2,R4
   1634                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1635                  payloadOffset += 1u;
   1636                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x3D8   0xD31B             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1637                  stepSize = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3DA   0x....'....        BL       ??Subroutine19_0
   1638                  payloadOffset += 2u;
   1639                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_58: (+1)
   \      0x3DE   0x89AA             LDRH     R2,[R5, #+12]
   \      0x3E0   0xF104 0x0A02      ADD      R10,R4,#+2
   \      0x3E4   0x4606             MOV      R6,R0
   \      0x3E6   0x4552             CMP      R2,R10
   \      0x3E8   0xD313             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1640                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3EA   0x68A8             LDR      R0,[R5, #+8]
   \      0x3EC   0xB2A1             UXTH     R1,R4
   \      0x3EE   0xF10A 0x0402      ADD      R4,R10,#+2
   \      0x3F2   0x....'....        BL       emberAfGetInt16u
   1641                  payloadOffset += 2u;
   1642                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x3F6   0x89AA             LDRH     R2,[R5, #+12]
   \      0x3F8   0x4681             MOV      R9,R0
   \      0x3FA   0x42A2             CMP      R2,R4
   \      0x3FC   0xD309             BCC.N    ??emberAfColorControlClusterServerCommandParse_17
   1643                  colorTemperatureMinimum = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \      0x3FE   0x68A8             LDR      R0,[R5, #+8]
   \      0x400   0xFA1F 0xF18A      UXTH     R1,R10
   \      0x404   0x....'....        BL       emberAfGetInt16u
   1644                  payloadOffset += 2u;
   1645                  if (cmd->bufLen < payloadOffset + 2u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \      0x408   0x89AA             LDRH     R2,[R5, #+12]
   \      0x40A   0x1CA1             ADDS     R1,R4,#+2
   \      0x40C   0x4682             MOV      R10,R0
   \      0x40E   0x428A             CMP      R2,R1
   \      0x410   0xD201             BCS.N    ??emberAfColorControlClusterServerCommandParse_21
   \                     ??emberAfColorControlClusterServerCommandParse_17: (+1)
   \      0x412   0x2080             MOVS     R0,#+128
   \      0x414   0xE01C             B.N      ??emberAfColorControlClusterServerCommandParse_22
   1646                  colorTemperatureMaximum = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfColorControlClusterServerCommandParse_21: (+1)
   \      0x416   0x....'....        BL       ?Subroutine17
   1647                  payloadOffset += 2u;
   1648                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   \                     ??CrossCallReturnLabel_52: (+1)
   \      0x41A   0x....'....        BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_96: (+1)
   \      0x41E   0xBF38             IT       CC 
   \      0x420   0x22FF             MOVCC    R2,#+255
   1649                    // Argument is not always present:
   1650                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1651                    optionsMask = 0xFF;
   \      0x422   0x....'....        BL       ?Subroutine5
   1652                  } else {
   1653                    optionsMask = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1654                    payloadOffset += 1u;
   1655                  }
   1656                  if ( ( cmd->bufLen < payloadOffset + 1u)) {
   1657                    // Argument is not always present:
   1658                    // - it is present only in versions higher than: zcl6-errata-14-0129-15
   1659                    optionsOverride = 0xFF;
   1660                  } else {
   1661                    optionsOverride = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1662                  }
   1663                  wasHandled = emberAfColorControlClusterStepColorTemperatureCallback(stepMode,
   1664                                                                                      stepSize,
   1665                                                                                      transitionTime,
   1666                                                                                      colorTemperatureMinimum,
   1667                                                                                      colorTemperatureMaximum,
   1668                                                                                      optionsMask,
   1669                                                                                      optionsOverride);
   \                     ??CrossCallReturnLabel_14: (+1)
   \      0x426   0x4653             MOV      R3,R10
   \      0x428   0xBF24             ITT      CS 
   \      0x42A   0x68A9             LDRCS    R1,[R5, #+8]
   \      0x42C   0xF811 0x8004      LDRBCS   R8,[R1, R4]
   \      0x430   0x9201             STR      R2,[SP, #+4]
   \      0x432   0x9000             STR      R0,[SP, #+0]
   \      0x434   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x438   0x464A             MOV      R2,R9
   \      0x43A   0x4631             MOV      R1,R6
   \      0x43C   0x4638             MOV      R0,R7
   \      0x43E   0x....'....        BL       emberAfColorControlClusterStepColorTemperatureCallback
   1670                  break;
   1671                }
   1672              default:
   1673                {
   1674                  // Unrecognized command ID, error status will apply.
   1675                  break;
   1676                }
   1677              }
   1678            }
   1679            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfColorControlClusterServerCommandParse_15: (+1)
   \      0x442   0x7BEA             LDRB     R2,[R5, #+15]
   \      0x444   0xB004             ADD      SP,SP,#+16
   \      0x446   0x2101             MOVS     R1,#+1
   \      0x448   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \      0x44C   0x....'....        B.W      status
   \                     ??emberAfColorControlClusterServerCommandParse_22: (+1)
   \      0x450   0xB004             ADD      SP,SP,#+16
   \      0x452   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1680          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34: (+1)
   \        0x0   0x5CB9             LDRB     R1,[R7, R2]
   \        0x2   0x1C52             ADDS     R2,R2,#+1
   \        0x4   0xB293             UXTH     R3,R2
   \        0x6   0x1C5A             ADDS     R2,R3,#+1
   \        0x8   0x4294             CMP      R4,R2
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33: (+1)
   \        0x0   0x68AF             LDR      R7,[R5, #+8]
   \        0x2   0x5C78             LDRB     R0,[R7, R1]
   \        0x4   0x1C49             ADDS     R1,R1,#+1
   \        0x6   0xB28A             UXTH     R2,R1
   \        0x8   0x1C51             ADDS     R1,R2,#+1
   \        0xA   0x428C             CMP      R4,R1
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32: (+1)
   \        0x0   0x89A9             LDRH     R1,[R5, #+12]
   \        0x2   0xB2A4             UXTH     R4,R4
   \        0x4   0x1C62             ADDS     R2,R4,#+1
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31: (+1)
   \        0x0   0x89A9             LDRH     R1,[R5, #+12]
   \        0x2   0xB2B6             UXTH     R6,R6
   \        0x4   0x1C72             ADDS     R2,R6,#+1
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30: (+1)
   \        0x0   0x5CFA             LDRB     R2,[R7, R3]
   \        0x2   0x1C5B             ADDS     R3,R3,#+1
   \        0x4   0xFA1F 0xFC83      UXTH     R12,R3
   \        0x8   0xF10C 0x0301      ADD      R3,R12,#+1
   \        0xC   0x429C             CMP      R4,R3
   \        0xE   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20: (+1)
   \        0x0   0x68A8             LDR      R0,[R5, #+8]
   \        0x2   0xB2B1             UXTH     R1,R6
   \        0x4   0x1CB6             ADDS     R6,R6,#+2
   \        0x6   0x....'....        B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0xD303             BCC.N    ??Subroutine6_0
   \        0x2   0x68AB             LDR      R3,[R5, #+8]
   \        0x4   0x5D9B             LDRB     R3,[R3, R6]
   \        0x6   0x1C76             ADDS     R6,R6,#+1
   \        0x8   0xB2B6             UXTH     R6,R6
   \                     ??Subroutine6_0: (+1)
   \        0xA   0x1C72             ADDS     R2,R6,#+1
   \        0xC   0x4291             CMP      R1,R2
   \        0xE   0x4602             MOV      R2,R0
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0xD303             BCC.N    ??Subroutine5_0
   \        0x2   0x68AB             LDR      R3,[R5, #+8]
   \        0x4   0x5D1A             LDRB     R2,[R3, R4]
   \        0x6   0x1C64             ADDS     R4,R4,#+1
   \        0x8   0xB2A4             UXTH     R4,R4
   \                     ??Subroutine5_0: (+1)
   \        0xA   0x1C63             ADDS     R3,R4,#+1
   \        0xC   0x4299             CMP      R1,R3
   \        0xE   0x4770             BX       LR
   1681          
   1682          // Cluster: ZLL Commissioning, server

   \                                 In section .text, align 2, keep-with-next
   1683          EmberAfStatus emberAfZllCommissioningClusterServerCommandParse(EmberAfClusterCommand *cmd)
   1684          {
   \                     emberAfZllCommissioningClusterServerCommandParse: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   1685            bool wasHandled = false;
   1686            if (!cmd->mfgSpecific) {
   \        0x4   0x7BE1             LDRB     R1,[R4, #+15]
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xB9B1             CBNZ.N   R1,??emberAfZllCommissioningClusterServerCommandPa_0
   1687              switch (cmd->commandId) {
   \        0xA   0x7CE1             LDRB     R1,[R4, #+19]
   \        0xC   0x2941             CMP      R1,#+65
   \        0xE   0xD002             BEQ.N    ??emberAfZllCommissioningClusterServerCommandPa_1
   \       0x10   0x2942             CMP      R1,#+66
   \       0x12   0xD008             BEQ.N    ??emberAfZllCommissioningClusterServerCommandPa_2
   \       0x14   0xE010             B.N      ??emberAfZllCommissioningClusterServerCommandPa_0
   1688              case ZCL_GET_GROUP_IDENTIFIERS_REQUEST_COMMAND_ID:
   1689                {
   1690                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfZllCommissioningClusterServerCommandPa_1: (+1)
   \       0x16   0x....'....        BL       ?Subroutine14
   1691                  uint8_t startIndex;  // Ver.: always
   1692                  // Command is fixed length: 1
   1693                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_39: (+1)
   \       0x1A   0xD307             BCC.N    ??emberAfZllCommissioningClusterServerCommandPa_3
   1694                  startIndex = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1695                  wasHandled = emberAfZllCommissioningClusterGetGroupIdentifiersRequestCallback(startIndex);
   \       0x1C   0x68A1             LDR      R1,[R4, #+8]
   \       0x1E   0x5C08             LDRB     R0,[R1, R0]
   \       0x20   0x....'....        BL       emberAfZllCommissioningClusterGetGroupIdentifiersRequestCallback
   1696                  break;
   \       0x24   0xE008             B.N      ??emberAfZllCommissioningClusterServerCommandPa_0
   1697                }
   1698              case ZCL_GET_ENDPOINT_LIST_REQUEST_COMMAND_ID:
   1699                {
   1700                  uint16_t payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfZllCommissioningClusterServerCommandPa_2: (+1)
   \       0x26   0x....'....        BL       ?Subroutine14
   1701                  uint8_t startIndex;  // Ver.: always
   1702                  // Command is fixed length: 1
   1703                  if (cmd->bufLen < payloadOffset + 1u) { return EMBER_ZCL_STATUS_MALFORMED_COMMAND; }
   \                     ??CrossCallReturnLabel_40: (+1)
   \       0x2A   0xD201             BCS.N    ??emberAfZllCommissioningClusterServerCommandPa_4
   \                     ??emberAfZllCommissioningClusterServerCommandPa_3: (+1)
   \       0x2C   0x2080             MOVS     R0,#+128
   \       0x2E   0xBD10             POP      {R4,PC}
   1704                  startIndex = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   1705                  wasHandled = emberAfZllCommissioningClusterGetEndpointListRequestCallback(startIndex);
   \                     ??emberAfZllCommissioningClusterServerCommandPa_4: (+1)
   \       0x30   0x68A1             LDR      R1,[R4, #+8]
   \       0x32   0x5C08             LDRB     R0,[R1, R0]
   \       0x34   0x....'....        BL       emberAfZllCommissioningClusterGetEndpointListRequestCallback
   1706                  break;
   1707                }
   1708              default:
   1709                {
   1710                  // Unrecognized command ID, error status will apply.
   1711                  break;
   1712                }
   1713              }
   1714            }
   1715            return status(wasHandled, true, cmd->mfgSpecific);
   \                     ??emberAfZllCommissioningClusterServerCommandPa_0: (+1)
   \       0x38   0x....'....        B.W      ?Subroutine0
   1716          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfBasicClusterServerCommandParse
         8   -> emberAfBasicClusterResetToFactoryDefaultsCallback
         0   -> status
      16   emberAfClusterSpecificCommandParse
        16   -> emberAfBasicClusterServerCommandParse
        16   -> emberAfColorControlClusterServerCommandParse
        16   -> emberAfContainsClientWithMfgCode
        16   -> emberAfContainsServerWithMfgCode
        16   -> emberAfGreenPowerClusterClientCommandParse
        16   -> emberAfGroupsClusterServerCommandParse
        16   -> emberAfIdentifyClusterServerCommandParse
        16   -> emberAfLevelControlClusterServerCommandParse
        16   -> emberAfOnOffClusterServerCommandParse
        16   -> emberAfScenesClusterServerCommandParse
        16   -> emberAfZllCommissioningClusterServerCommandParse
        16   -> status
      48   emberAfColorControlClusterServerCommandParse
        48   -> emberAfColorControlClusterMoveColorCallback
        48   -> emberAfColorControlClusterMoveColorTemperatureCallback
        48   -> emberAfColorControlClusterMoveHueCallback
        48   -> emberAfColorControlClusterMoveSaturationCallback
        48   -> emberAfColorControlClusterMoveToColorCallback
        48   -> emberAfColorControlClusterMoveToColorTemperatureCallback
        48   -> emberAfColorControlClusterMoveToHueAndSaturationCallback
        48   -> emberAfColorControlClusterMoveToHueCallback
        48   -> emberAfColorControlClusterMoveToSaturationCallback
        48   -> emberAfColorControlClusterStepColorCallback
        48   -> emberAfColorControlClusterStepColorTemperatureCallback
        48   -> emberAfColorControlClusterStepHueCallback
        48   -> emberAfColorControlClusterStepSaturationCallback
        48   -> emberAfColorControlClusterStopMoveStepCallback
        48   -> emberAfGetInt16u
         0   -> status
      88   emberAfGreenPowerClusterClientCommandParse
        88   -> emberAfGetInt16u
        88   -> emberAfGetInt24u
        88   -> emberAfGetInt32u
        88   -> emberAfGetString
        88   -> emberAfGreenPowerClusterGpNotificationResponseCallback
        88   -> emberAfGreenPowerClusterGpPairingCallback
        88   -> emberAfGreenPowerClusterGpProxyCommissioningModeCallback
        88   -> emberAfGreenPowerClusterGpProxyTableRequestCallback
        88   -> emberAfGreenPowerClusterGpResponseCallback
        88   -> emberAfGreenPowerClusterGpSinkTableResponseCallback
        88   -> emberAfStringLength
         0   -> status
      24   emberAfGroupsClusterServerCommandParse
        24   -> emberAfGetInt16u
        24   -> emberAfGetString
        24   -> emberAfGroupsClusterAddGroupCallback
        24   -> emberAfGroupsClusterAddGroupIfIdentifyingCallback
        24   -> emberAfGroupsClusterGetGroupMembershipCallback
        24   -> emberAfGroupsClusterRemoveAllGroupsCallback
        24   -> emberAfGroupsClusterRemoveGroupCallback
        24   -> emberAfGroupsClusterViewGroupCallback
        24   -> emberAfStringLength
         0   -> status
       8   emberAfIdentifyClusterServerCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyCallback
         8   -> emberAfIdentifyClusterIdentifyQueryCallback
         8   -> emberAfIdentifyClusterTriggerEffectCallback
         0   -> status
      32   emberAfLevelControlClusterServerCommandParse
        32   -> emberAfGetInt16u
        32   -> emberAfLevelControlClusterMoveCallback
        32   -> emberAfLevelControlClusterMoveToLevelCallback
        32   -> emberAfLevelControlClusterMoveToLevelWithOnOffCallback
        32   -> emberAfLevelControlClusterMoveWithOnOffCallback
        32   -> emberAfLevelControlClusterStepCallback
        32   -> emberAfLevelControlClusterStepWithOnOffCallback
        32   -> emberAfLevelControlClusterStopCallback
        32   -> emberAfLevelControlClusterStopWithOnOffCallback
         0   -> status
      24   emberAfOnOffClusterServerCommandParse
        24   -> emberAfGetInt16u
        24   -> emberAfOnOffClusterOffCallback
        24   -> emberAfOnOffClusterOffWithEffectCallback
        24   -> emberAfOnOffClusterOnCallback
        24   -> emberAfOnOffClusterOnWithRecallGlobalSceneCallback
        24   -> emberAfOnOffClusterOnWithTimedOffCallback
        24   -> emberAfOnOffClusterToggleCallback
         0   -> status
      32   emberAfScenesClusterServerCommandParse
        32   -> emberAfGetInt16u
        32   -> emberAfGetString
        32   -> emberAfScenesClusterAddSceneCallback
        32   -> emberAfScenesClusterCopySceneCallback
        32   -> emberAfScenesClusterEnhancedAddSceneCallback
        32   -> emberAfScenesClusterEnhancedViewSceneCallback
        32   -> emberAfScenesClusterGetSceneMembershipCallback
        32   -> emberAfScenesClusterRecallSceneCallback
        32   -> emberAfScenesClusterRemoveAllScenesCallback
        32   -> emberAfScenesClusterRemoveSceneCallback
        32   -> emberAfScenesClusterStoreSceneCallback
        32   -> emberAfScenesClusterViewSceneCallback
        32   -> emberAfStringLength
         0   -> status
       8   emberAfZllCommissioningClusterServerCommandParse
         8   -> emberAfZllCommissioningClusterGetEndpointListRequestCallback
         8   -> emberAfZllCommissioningClusterGetGroupIdentifiersRequestCallback
         0   -> status
       0   status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
      10  ?Subroutine1
      14  ?Subroutine10
       6  ?Subroutine11
      14  ?Subroutine12
      12  ?Subroutine13
      10  ?Subroutine14
      12  ?Subroutine15
       8  ?Subroutine16
      10  ?Subroutine17
      10  ?Subroutine18
       8  ?Subroutine19
      10  ?Subroutine2
      10  ?Subroutine20
      12  ?Subroutine21
      22  ?Subroutine22
      14  ?Subroutine23
      12  ?Subroutine24
      10  ?Subroutine25
      12  ?Subroutine26
      10  ?Subroutine27
       8  ?Subroutine28
      10  ?Subroutine29
      10  ?Subroutine3
      16  ?Subroutine30
      10  ?Subroutine31
      10  ?Subroutine32
      14  ?Subroutine33
      12  ?Subroutine34
      10  ?Subroutine4
      16  ?Subroutine5
      20  ?Subroutine6
      18  ?Subroutine7
      16  ?Subroutine8
      10  ?Subroutine9
      22  emberAfBasicClusterServerCommandParse
     182  emberAfClusterSpecificCommandParse
    1110  emberAfColorControlClusterServerCommandParse
    1128  emberAfGreenPowerClusterClientCommandParse
     180  emberAfGroupsClusterServerCommandParse
      68  emberAfIdentifyClusterServerCommandParse
     366  emberAfLevelControlClusterServerCommandParse
     120  emberAfOnOffClusterServerCommandParse
     438  emberAfScenesClusterServerCommandParse
      60  emberAfZllCommissioningClusterServerCommandParse
      22  status

 
 4 112 bytes in section .text
 
 4 112 bytes of CODE memory

Errors: none
Warnings: none
