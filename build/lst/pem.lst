###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:31
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pem.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWEFF2.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pem.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"pem.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\pem.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\pem.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pem.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  Privacy Enhanced Mail (PEM) decoding
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          
     34          #if !defined(MBEDTLS_CONFIG_FILE)
     35          #include "mbedtls/config.h"
     36          #else
     37          #include MBEDTLS_CONFIG_FILE
     38          #endif
     39          
     40          #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
     41          
     42          #include "mbedtls/pem.h"
     43          #include "mbedtls/base64.h"
     44          #include "mbedtls/des.h"
     45          #include "mbedtls/aes.h"
     46          #include "mbedtls/md5.h"
     47          #include "mbedtls/cipher.h"
     48          
     49          #include <string.h>
     50          
     51          #if defined(MBEDTLS_PLATFORM_C)
     52          #include "mbedtls/platform.h"
     53          #else
     54          #include <stdlib.h>
     55          #define mbedtls_calloc    calloc
     56          #define mbedtls_free       free
     57          #endif
     58          
     59          #if defined(MBEDTLS_PEM_PARSE_C)
     60          /* Implementation that should never be optimized out by the compiler */
     61          static void mbedtls_zeroize( void *v, size_t n ) {
     62              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     63          }
     64          
     65          void mbedtls_pem_init( mbedtls_pem_context *ctx )
     66          {
     67              memset( ctx, 0, sizeof( mbedtls_pem_context ) );
     68          }
     69          
     70          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
     71              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
     72          /*
     73           * Read a 16-byte hex string and convert it to binary
     74           */
     75          static int pem_get_iv( const unsigned char *s, unsigned char *iv,
     76                                 size_t iv_len )
     77          {
     78              size_t i, j, k;
     79          
     80              memset( iv, 0, iv_len );
     81          
     82              for( i = 0; i < iv_len * 2; i++, s++ )
     83              {
     84                  if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
     85                  if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
     86                  if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
     87                      return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
     88          
     89                  k = ( ( i & 1 ) != 0 ) ? j : j << 4;
     90          
     91                  iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
     92              }
     93          
     94              return( 0 );
     95          }
     96          
     97          static int pem_pbkdf1( unsigned char *key, size_t keylen,
     98                                 unsigned char *iv,
     99                                 const unsigned char *pwd, size_t pwdlen )
    100          {
    101              mbedtls_md5_context md5_ctx;
    102              unsigned char md5sum[16];
    103              size_t use_len;
    104              int ret;
    105          
    106              mbedtls_md5_init( &md5_ctx );
    107          
    108              /*
    109               * key[ 0..15] = MD5(pwd || IV)
    110               */
    111              if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
    112                  goto exit;
    113              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
    114                  goto exit;
    115              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv,  8 ) ) != 0 )
    116                  goto exit;
    117              if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
    118                  goto exit;
    119          
    120              if( keylen <= 16 )
    121              {
    122                  memcpy( key, md5sum, keylen );
    123                  goto exit;
    124              }
    125          
    126              memcpy( key, md5sum, 16 );
    127          
    128              /*
    129               * key[16..23] = MD5(key[ 0..15] || pwd || IV])
    130               */
    131              if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
    132                  goto exit;
    133              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, md5sum, 16 ) ) != 0 )
    134                  goto exit;
    135              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
    136                  goto exit;
    137              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv, 8 ) ) != 0 )
    138                  goto exit;
    139              if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
    140                  goto exit;
    141          
    142              use_len = 16;
    143              if( keylen < 32 )
    144                  use_len = keylen - 16;
    145          
    146              memcpy( key + 16, md5sum, use_len );
    147          
    148          exit:
    149              mbedtls_md5_free( &md5_ctx );
    150              mbedtls_zeroize( md5sum, 16 );
    151          
    152              return( ret );
    153          }
    154          
    155          #if defined(MBEDTLS_DES_C)
    156          /*
    157           * Decrypt with DES-CBC, using PBKDF1 for key derivation
    158           */
    159          static int pem_des_decrypt( unsigned char des_iv[8],
    160                                      unsigned char *buf, size_t buflen,
    161                                      const unsigned char *pwd, size_t pwdlen )
    162          {
    163              mbedtls_des_context des_ctx;
    164              unsigned char des_key[8];
    165              int ret;
    166          
    167              mbedtls_des_init( &des_ctx );
    168          
    169              if( ( ret = pem_pbkdf1( des_key, 8, des_iv, pwd, pwdlen ) ) != 0 )
    170                  goto exit;
    171          
    172              if( ( ret = mbedtls_des_setkey_dec( &des_ctx, des_key ) ) != 0 )
    173                  goto exit;
    174              ret = mbedtls_des_crypt_cbc( &des_ctx, MBEDTLS_DES_DECRYPT, buflen,
    175                               des_iv, buf, buf );
    176          
    177          exit:
    178              mbedtls_des_free( &des_ctx );
    179              mbedtls_zeroize( des_key, 8 );
    180          
    181              return( ret );
    182          }
    183          
    184          /*
    185           * Decrypt with 3DES-CBC, using PBKDF1 for key derivation
    186           */
    187          static int pem_des3_decrypt( unsigned char des3_iv[8],
    188                                       unsigned char *buf, size_t buflen,
    189                                       const unsigned char *pwd, size_t pwdlen )
    190          {
    191              mbedtls_des3_context des3_ctx;
    192              unsigned char des3_key[24];
    193              int ret;
    194          
    195              mbedtls_des3_init( &des3_ctx );
    196          
    197              if( ( ret = pem_pbkdf1( des3_key, 24, des3_iv, pwd, pwdlen ) ) != 0 )
    198                  goto exit;
    199          
    200              if( ( ret = mbedtls_des3_set3key_dec( &des3_ctx, des3_key ) ) != 0 )
    201                  goto exit;
    202              ret = mbedtls_des3_crypt_cbc( &des3_ctx, MBEDTLS_DES_DECRYPT, buflen,
    203                               des3_iv, buf, buf );
    204          
    205          exit:
    206              mbedtls_des3_free( &des3_ctx );
    207              mbedtls_zeroize( des3_key, 24 );
    208          
    209              return( ret );
    210          }
    211          #endif /* MBEDTLS_DES_C */
    212          
    213          #if defined(MBEDTLS_AES_C)
    214          /*
    215           * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
    216           */
    217          static int pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
    218                                      unsigned char *buf, size_t buflen,
    219                                      const unsigned char *pwd, size_t pwdlen )
    220          {
    221              mbedtls_aes_context aes_ctx;
    222              unsigned char aes_key[32];
    223              int ret;
    224          
    225              mbedtls_aes_init( &aes_ctx );
    226          
    227              if( ( ret = pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen ) ) != 0 )
    228                  goto exit;
    229          
    230              if( ( ret = mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 ) ) != 0 )
    231                  goto exit;
    232              ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
    233                               aes_iv, buf, buf );
    234          
    235          exit:
    236              mbedtls_aes_free( &aes_ctx );
    237              mbedtls_zeroize( aes_key, keylen );
    238          
    239              return( ret );
    240          }
    241          #endif /* MBEDTLS_AES_C */
    242          
    243          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    244                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    245          
    246          int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
    247                               const unsigned char *data, const unsigned char *pwd,
    248                               size_t pwdlen, size_t *use_len )
    249          {
    250              int ret, enc;
    251              size_t len;
    252              unsigned char *buf;
    253              const unsigned char *s1, *s2, *end;
    254          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    255              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    256              unsigned char pem_iv[16];
    257              mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
    258          #else
    259              ((void) pwd);
    260              ((void) pwdlen);
    261          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    262                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    263          
    264              if( ctx == NULL )
    265                  return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
    266          
    267              s1 = (unsigned char *) strstr( (const char *) data, header );
    268          
    269              if( s1 == NULL )
    270                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    271          
    272              s2 = (unsigned char *) strstr( (const char *) data, footer );
    273          
    274              if( s2 == NULL || s2 <= s1 )
    275                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    276          
    277              s1 += strlen( header );
    278              if( *s1 == ' '  ) s1++;
    279              if( *s1 == '\r' ) s1++;
    280              if( *s1 == '\n' ) s1++;
    281              else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    282          
    283              end = s2;
    284              end += strlen( footer );
    285              if( *end == ' '  ) end++;
    286              if( *end == '\r' ) end++;
    287              if( *end == '\n' ) end++;
    288              *use_len = end - data;
    289          
    290              enc = 0;
    291          
    292              if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
    293              {
    294          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    295              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    296                  enc++;
    297          
    298                  s1 += 22;
    299                  if( *s1 == '\r' ) s1++;
    300                  if( *s1 == '\n' ) s1++;
    301                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    302          
    303          
    304          #if defined(MBEDTLS_DES_C)
    305                  if( s2 - s1 >= 23 && memcmp( s1, "DEK-Info: DES-EDE3-CBC,", 23 ) == 0 )
    306                  {
    307                      enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;
    308          
    309                      s1 += 23;
    310                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8 ) != 0 )
    311                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    312          
    313                      s1 += 16;
    314                  }
    315                  else if( s2 - s1 >= 18 && memcmp( s1, "DEK-Info: DES-CBC,", 18 ) == 0 )
    316                  {
    317                      enc_alg = MBEDTLS_CIPHER_DES_CBC;
    318          
    319                      s1 += 18;
    320                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8) != 0 )
    321                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    322          
    323                      s1 += 16;
    324                  }
    325          #endif /* MBEDTLS_DES_C */
    326          
    327          #if defined(MBEDTLS_AES_C)
    328                  if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
    329                  {
    330                      if( s2 - s1 < 22 )
    331                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    332                      else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
    333                          enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
    334                      else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
    335                          enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
    336                      else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
    337                          enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
    338                      else
    339                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    340          
    341                      s1 += 22;
    342                      if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
    343                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    344          
    345                      s1 += 32;
    346                  }
    347          #endif /* MBEDTLS_AES_C */
    348          
    349                  if( enc_alg == MBEDTLS_CIPHER_NONE )
    350                      return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    351          
    352                  if( *s1 == '\r' ) s1++;
    353                  if( *s1 == '\n' ) s1++;
    354                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    355          #else
    356                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
    357          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    358                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    359              }
    360          
    361              if( s1 >= s2 )
    362                  return( MBEDTLS_ERR_PEM_INVALID_DATA );
    363          
    364              ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
    365          
    366              if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
    367                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
    368          
    369              if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
    370                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
    371          
    372              if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    373              {
    374                  mbedtls_zeroize( buf, len );
    375                  mbedtls_free( buf );
    376                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
    377              }
    378          
    379              if( enc != 0 )
    380              {
    381          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    382              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    383                  if( pwd == NULL )
    384                  {
    385                      mbedtls_zeroize( buf, len );
    386                      mbedtls_free( buf );
    387                      return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
    388                  }
    389          
    390                  ret = 0;
    391          
    392          #if defined(MBEDTLS_DES_C)
    393                  if( enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC )
    394                      ret = pem_des3_decrypt( pem_iv, buf, len, pwd, pwdlen );
    395                  else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )
    396                      ret = pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );
    397          #endif /* MBEDTLS_DES_C */
    398          
    399          #if defined(MBEDTLS_AES_C)
    400                  if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
    401                      ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
    402                  else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
    403                      ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
    404                  else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
    405                      ret = pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
    406          #endif /* MBEDTLS_AES_C */
    407          
    408                  if( ret != 0 )
    409                  {
    410                      mbedtls_free( buf );
    411                      return( ret );
    412                  }
    413          
    414                  /*
    415                   * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
    416                   * length bytes (allow 4 to be sure) in all known use cases.
    417                   *
    418                   * Use that as heurisitic to try detecting password mismatchs.
    419                   */
    420                  if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
    421                  {
    422                      mbedtls_zeroize( buf, len );
    423                      mbedtls_free( buf );
    424                      return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
    425                  }
    426          #else
    427                  mbedtls_zeroize( buf, len );
    428                  mbedtls_free( buf );
    429                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
    430          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    431                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    432              }
    433          
    434              ctx->buf = buf;
    435              ctx->buflen = len;
    436          
    437              return( 0 );
    438          }
    439          
    440          void mbedtls_pem_free( mbedtls_pem_context *ctx )
    441          {
    442              if( ctx->buf != NULL )
    443                  mbedtls_zeroize( ctx->buf, ctx->buflen );
    444              mbedtls_free( ctx->buf );
    445              mbedtls_free( ctx->info );
    446          
    447              mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
    448          }
    449          #endif /* MBEDTLS_PEM_PARSE_C */
    450          
    451          #if defined(MBEDTLS_PEM_WRITE_C)
    452          int mbedtls_pem_write_buffer( const char *header, const char *footer,
    453                                const unsigned char *der_data, size_t der_len,
    454                                unsigned char *buf, size_t buf_len, size_t *olen )
    455          {
    456              int ret;
    457              unsigned char *encode_buf = NULL, *c, *p = buf;
    458              size_t len = 0, use_len, add_len = 0;
    459          
    460              mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );
    461              add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;
    462          
    463              if( use_len + add_len > buf_len )
    464              {
    465                  *olen = use_len + add_len;
    466                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    467              }
    468          
    469              if( use_len != 0 &&
    470                  ( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL ) )
    471                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
    472          
    473              if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,
    474                                         der_len ) ) != 0 )
    475              {
    476                  mbedtls_free( encode_buf );
    477                  return( ret );
    478              }
    479          
    480              memcpy( p, header, strlen( header ) );
    481              p += strlen( header );
    482              c = encode_buf;
    483          
    484              while( use_len )
    485              {
    486                  len = ( use_len > 64 ) ? 64 : use_len;
    487                  memcpy( p, c, len );
    488                  use_len -= len;
    489                  p += len;
    490                  c += len;
    491                  *p++ = '\n';
    492              }
    493          
    494              memcpy( p, footer, strlen( footer ) );
    495              p += strlen( footer );
    496          
    497              *p++ = '\0';
    498              *olen = p - buf;
    499          
    500              mbedtls_free( encode_buf );
    501              return( 0 );
    502          }
    503          #endif /* MBEDTLS_PEM_WRITE_C */
    504          #endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
