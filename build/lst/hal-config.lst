###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW94D6.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"hal-config.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\hal-config.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\hal-config.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\micro\cortexm3\efm32\hal-config.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief HAL config initialization
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          #include PLATFORM_HEADER
     18          #include "hal/hal.h"
     19          #include "em_device.h"
     20          #include "em_cmu.h"
     21          #include "em_emu.h"
     22          #include "ecode.h"
     23          #include "plugin/antenna/antenna.h"
     24          #include "plugin/serial/com.h"
     25          #include "plugin/serial/com_config.h"
     26          #if (PHY_RAIL || PHY_DUALRAIL)
     27          #include "rail.h"
     28          #include "rail_ieee802154.h"
     29          #elif defined (_EFR_DEVICE)
     30          #include "rfhal_pti.h"
     31          #endif
     32          #if HAL_IOEXP_VCOM_ENABLE
     33          #include "bsp.h"
     34          #include "retargetserial.h"
     35          #endif
     36          #if HAL_FEM_ENABLE
     37          #include "util/plugin/plugin-common/fem-control/fem-control.h"
     38          #endif
     39          #if HAL_COEX_ENABLE
     40          #include "coexistence/protocol/ieee802154/coexistence-802154.h"
     41          #endif
     42          
     43          static void halConfigClockInit(void)
     44          {
     45          // Initialize HFXO if used
     46          #if ((HAL_CLK_HFCLK_SOURCE == HAL_CLK_HFCLK_SOURCE_HFXO)   \
     47            || ((HAL_CLK_HFCLK_SOURCE == HAL_CLK_HFCLK_SOURCE_HFRCO) \
     48            && (HAL_CLK_PLL_CONFIGURATION == HAL_CLK_PLL_CONFIGURATION_80MHZ)))
     49            #if !BSP_CLK_HFXO_PRESENT
     50              #error Cannot select HFXO when HFXO is not present
     51            #endif
     52          
     53            CMU_HFXOInit_TypeDef hfxoInit = BSP_CLK_HFXO_INIT;
     54          
     55            #if defined(BSP_CLK_HFXO_CTUNE) && (BSP_CLK_HFXO_CTUNE >= 0)
     56            #if defined(_SILICON_LABS_32B_SERIES_2)
     57            hfxoInit.ctuneXiAna = BSP_CLK_HFXO_CTUNE;
     58            hfxoInit.ctuneXoAna = BSP_CLK_HFXO_CTUNE;
     59            #else
     60            hfxoInit.ctuneSteadyState = BSP_CLK_HFXO_CTUNE;
     61            #endif // series 2
     62            #endif // BSP_CLK_HFXO_CTUNE
     63          
     64            #if defined(_SILICON_LABS_32B_SERIES_2)
     65            uint8_t customSteadyCtuneXi;
     66            uint8_t customSteadyCtuneXo;
     67            uint16_t customSteadyCtuneToken;
     68          
     69            // check factory calibrated ctune value
     70            if (halInternalGetModuleCtuneXiXo(&customSteadyCtuneXi, &customSteadyCtuneXo)) {
     71              hfxoInit.ctuneXiAna = customSteadyCtuneXi;
     72              hfxoInit.ctuneXoAna = customSteadyCtuneXo;
     73            }
     74            // otherwise check for ctune in mfg token
     75            else if (halInternalGetCtuneToken(&customSteadyCtuneToken, &customSteadyCtuneToken)) {
     76              hfxoInit.ctuneXiAna = (uint8_t)customSteadyCtuneToken;
     77              hfxoInit.ctuneXoAna = (uint8_t)customSteadyCtuneToken;
     78            }
     79            #else
     80            uint16_t customSteadyCtuneModule;
     81            uint16_t customSteadyCtuneToken;
     82            // check factory calibrated ctune value
     83            if (halInternalGetModuleCtune(&customSteadyCtuneModule)) {
     84              hfxoInit.ctuneSteadyState = customSteadyCtuneModule;
     85            }
     86            // otherwise check for ctune in mfg token
     87            else if (halInternalGetCtuneToken(&customSteadyCtuneToken, &customSteadyCtuneToken)) {
     88              hfxoInit.ctuneSteadyState = customSteadyCtuneToken;
     89            } else {
     90              // satisfy MISRA 15.7
     91            }
     92            #endif // series 2
     93            CMU_HFXOInit(&hfxoInit);
     94          #endif // hfxo or hfrco with hfxo
     95          
     96          #if (HAL_CLK_HFCLK_SOURCE == HAL_CLK_HFCLK_SOURCE_HFXO)
     97            // Setting system HFXO frequency
     98            SystemHFXOClockSet(BSP_CLK_HFXO_FREQ);
     99          
    100            // Select the HFXO and, if supported, manually turn off HFRCO
    101            // If requested and supported, turn on autostart/select for series 1 devices
    102            #if defined(_SILICON_LABS_32B_SERIES_1)
    103              #if defined(HAL_CLK_HFXO_AUTOSTART) && HAL_CLK_HFXO_AUTOSTART == HAL_CLK_HFXO_AUTOSTART_SELECT
    104            // Automatically start and select HFXO
    105            CMU_HFXOAutostartEnable(0, true, true);
    106              #else
    107                #if defined(HAL_CLK_HFXO_AUTOSTART) && HAL_CLK_HFXO_AUTOSTART == HAL_CLK_HFXO_AUTOSTART_START
    108            // Automatically start HFXO
    109            CMU_HFXOAutostartEnable(0, true, false);
    110                #endif // HAL_CLK_HFXO_AUTOSTART
    111            CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);
    112              #endif // HAL_CLK_HFXO_AUTOSTART
    113          
    114            /* HFRCO not needed when using HFXO */
    115            CMU_OscillatorEnable(cmuOsc_HFRCO, false, false);
    116            #elif defined(_SILICON_LABS_32B_SERIES_2) // defined(_SILICON_LABS_32B_SERIES_1)
    117            CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFXO);
    118            #else // defined(_SILICON_LABS_32B_SERIES_2)
    119              #error Unknown device series
    120            #endif // defined(_SILICON_LABS_32B_SERIES_2)
    121          
    122          #elif (HAL_CLK_HFCLK_SOURCE == HAL_CLK_HFCLK_SOURCE_HFRCO)
    123            #if defined(_SILICON_LABS_32B_SERIES_2)
    124            // Use LFXO at 40MHz
    125              #if (HAL_CLK_PLL_CONFIGURATION == HAL_CLK_PLL_CONFIGURATION_40MHZ)
    126            CMU_LFXOInit_TypeDef lfxoInit = CMU_LFXOINIT_DEFAULT;
    127              #if defined(BSP_CLK_LFXO_CTUNE) && BSP_CLK_LFXO_CTUNE > 0
    128            lfxoInit.ctune = BSP_CLK_LFXO_CTUNE;
    129              #endif
    130            CMU_LFXOInit(&lfxoInit);
    131            CMU_DPLLInit_TypeDef dpllInit = CMU_DPLL_LFXO_TO_40MHZ;
    132              #endif
    133            // Use HFXO at 80MHz
    134              #if (HAL_CLK_PLL_CONFIGURATION == HAL_CLK_PLL_CONFIGURATION_80MHZ)
    135            CMU_DPLLInit_TypeDef dpllInit = CMU_DPLL_HFXO_TO_80MHZ;
    136              #endif
    137              #if (HAL_CLK_PLL_CONFIGURATION != HAL_CLK_PLL_CONFIGURATION_NONE)
    138            bool locked = false;
    139            while (!locked) {
    140              locked = CMU_DPLLLock(&dpllInit);
    141            }
    142              #endif
    143            CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFRCODPLL);
    144            #else
    145            CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFRCO);
    146            #endif // series 2
    147          #else
    148            #error Must define HAL_CLK_HFCLK_SOURCE
    149          #endif // HAL_CLK_HFCLK_SOURCE
    150          
    151          /* LFCLK */
    152          #if (HAL_CLK_LFACLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)   \
    153            || (HAL_CLK_LFBCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)  \
    154            || (HAL_CLK_LFCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)  \
    155            || (HAL_CLK_LFECLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)  \
    156            || (HAL_CLK_EM23CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO) \
    157            || (HAL_CLK_EM4CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)  \
    158            || (HAL_CLK_RTCCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    159            #if !BSP_CLK_LFXO_PRESENT
    160              #error "Cannot select LFXO when LFXO is not present"
    161            #endif
    162            uint8_t lfxoTuneModule;
    163            uint8_t lfxoTuneToken;
    164            uint8_t lfxoTempTune;
    165            CMU_LFXOInit_TypeDef lfxoInit = BSP_CLK_LFXO_INIT;
    166          
    167            // if halconfig specifies lfxo ctune
    168            #if defined(BSP_CLK_LFXO_CTUNE) && BSP_CLK_LFXO_CTUNE > 0
    169            lfxoTempTune = BSP_CLK_LFXO_CTUNE;
    170            #endif // BSP_CLK_HFXO_CTUNE
    171          
    172            // check factory calibrated ctune value
    173            if (halInternalGetModuleLfxoTune(&lfxoTuneModule)) {
    174              lfxoTempTune = lfxoTuneModule;
    175            }
    176            // otherwise check for lfxo tune in mfg token
    177            else if (halInternalGetLfxoTuneToken(&lfxoTuneToken)) {
    178              lfxoTempTune = lfxoTuneToken;
    179            } else {
    180              // satisfy MISRA 15.7
    181            }
    182          
    183            #if defined(_SILICON_LABS_32B_SERIES_1)
    184            lfxoInit.ctune = lfxoTempTune;
    185            #elif defined(_SILICON_LABS_32B_SERIES_2)
    186            lfxoInit.capTune = lfxoTempTune;
    187            #else
    188            #error Unknown device type
    189            #endif
    190          
    191            CMU_LFXOInit(&lfxoInit);
    192          
    193            // Set system LFXO frequency
    194            SystemLFXOClockSet(BSP_CLK_LFXO_FREQ);
    195          #endif // LFCLK
    196          
    197          #if defined(_SILICON_LABS_32B_SERIES_1)
    198            // LFA
    199          #if (HAL_CLK_LFACLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    200            CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);
    201          #elif (HAL_CLK_LFACLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    202            CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFRCO);
    203          #elif (HAL_CLK_LFACLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    204            CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_ULFRCO);
    205          #elif (HAL_CLK_LFACLK_SOURCE == HAL_CLK_LFCLK_SOURCE_HFLE)
    206            CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_HFCLKLE);
    207          #endif
    208          
    209            // LFB
    210          #if (HAL_CLK_LFBCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    211            CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFXO);
    212          #elif (HAL_CLK_LFBCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    213            CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFRCO);
    214          #elif (HAL_CLK_LFBCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    215            CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_ULFRCO);
    216          #elif (HAL_CLK_LFBCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_HFLE)
    217            CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_HFCLKLE);
    218          #endif
    219          
    220            // LFC
    221          #if (HAL_CLK_LFCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    222            CMU_ClockSelectSet(cmuClock_LFC, cmuSelect_LFXO);
    223          #elif (HAL_CLK_LFCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    224            CMU_ClockSelectSet(cmuClock_LFC, cmuSelect_LFRCO);
    225          #endif
    226          
    227            // LFE
    228          #if (HAL_CLK_LFECLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    229            CMU_ClockSelectSet(cmuClock_LFE, cmuSelect_LFXO);
    230          #elif (HAL_CLK_LFECLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    231            CMU_ClockSelectSet(cmuClock_LFE, cmuSelect_LFRCO);
    232          #elif (HAL_CLK_LFECLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    233            CMU_ClockSelectSet(cmuClock_LFE, cmuSelect_ULFRCO);
    234          #endif
    235          
    236          #elif defined(_SILICON_LABS_32B_SERIES_2)
    237            // EM23
    238          #if (HAL_CLK_EM23CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    239            CMU_ClockSelectSet(cmuClock_EM23GRPACLK, cmuSelect_LFXO);
    240          #elif (HAL_CLK_EM23CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    241            CMU_ClockSelectSet(cmuClock_EM23GRPACLK, cmuSelect_LFRCO);
    242          #elif (HAL_CLK_EM23CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    243            CMU_ClockSelectSet(cmuClock_EM23GRPACLK, cmuSelect_ULFRCO);
    244          #endif
    245          
    246            // EM4
    247          #if (HAL_CLK_EM4CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    248            CMU_ClockSelectSet(cmuClock_EM4GRPACLK, cmuSelect_LFXO);
    249          #elif (HAL_CLK_EM4CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    250            CMU_ClockSelectSet(cmuClock_EM4GRPACLK, cmuSelect_LFRCO);
    251          #elif (HAL_CLK_EM4CLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    252            CMU_ClockSelectSet(cmuClock_EM4GRPACLK, cmuSelect_ULFRCO);
    253          #endif
    254          
    255            // RTCC
    256          #if (HAL_CLK_RTCCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFXO)
    257            CMU_ClockSelectSet(cmuClock_RTCCCLK, cmuSelect_LFXO);
    258          #elif (HAL_CLK_RTCCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_LFRCO)
    259            CMU_ClockSelectSet(cmuClock_RTCCCLK, cmuSelect_LFRCO);
    260          #elif (HAL_CLK_RTCCCLK_SOURCE == HAL_CLK_LFCLK_SOURCE_ULFRCO)
    261            CMU_ClockSelectSet(cmuClock_RTCCCLK, cmuSelect_ULFRCO);
    262          #endif
    263          #endif // _SILICON_LABS_32B_SERIES_1
    264          }
    265          

   \                                 In section .text, align 2, keep-with-next
    266          Ecode_t halConfigInit(void)
    267          {
   \                     halConfigInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    268            Ecode_t status = ECODE_OK;
    269          
    270            INTERRUPTS_ON();   //enables using USB and the proper emberSerialReadByte
   \        0x4   0x....'....        BL       CORE_AtomicEnableIrq
    271          #if defined (_EMU_DCDCCTRL_MASK)
    272          #if BSP_DCDC_PRESENT
    273            EMU_DCDCInit_TypeDef dcdcInit = BSP_DCDC_INIT;
    274            #if HAL_DCDC_BYPASS
    275            dcdcInit.dcdcMode = emuDcdcMode_Bypass;
    276            #endif
    277            EMU_DCDCInit(&dcdcInit);
    278          #else
    279            EMU_DCDCPowerOff();
    280          #endif
    281          #endif //_EMU_DCDCCTRL_MASK
    282          
    283          #if HAL_EMU_ENABLE
    284            EMU_EM23Init_TypeDef em23init = EMU_EM23INIT_DEFAULT;
    285            #if HAL_EMU_EM23_VREG
    286            em23init.em23VregFullEn = true;
    287            #endif
    288            #if HAL_EMU_EM23_VSCALE == HAL_EMU_EM23_VSCALE_FASTWAKEUP
    289            em23init.vScaleEM23Voltage = emuVScaleEM23_FastWakeup;
    290            #elif HAL_EMU_EM23_VSCALE == HAL_EMU_EM23_VSCALE_LOWPOWER
    291            em23init.vScaleEM23Voltage = emuVScaleEM23_LowPower;
    292            #endif
    293            EMU_EM23Init(&em23init);
    294          #endif //HAL_EMU_ENABLE
    295          
    296            halConfigClockInit();
   \        0x8   0xA801             ADD      R0,SP,#+4
   \        0xA   0x....             LDR.N    R1,??DataTable1
   \        0xC   0x2214             MOVS     R2,#+20
   \        0xE   0x....'....        BL       __aeabi_memcpy4
   \       0x12   0x2185             MOVS     R1,#+133
   \       0x14   0xF88D 0x100E      STRB     R1,[SP, #+14]
   \       0x18   0xF88D 0x100D      STRB     R1,[SP, #+13]
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0xF10D 0x0001      ADD      R0,SP,#+1
   \       0x22   0x....'....        BL       halInternalGetModuleCtuneXiXo
   \       0x26   0xB130             CBZ.N    R0,??halConfigInit_0
   \       0x28   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x2C   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \       0x30   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x34   0xE00A             B.N      ??halConfigInit_1
   \                     ??halConfigInit_0: (+1)
   \       0x36   0xF10D 0x0102      ADD      R1,SP,#+2
   \       0x3A   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x3E   0x....'....        BL       halInternalGetCtuneToken
   \       0x42   0xB128             CBZ.N    R0,??halConfigInit_2
   \       0x44   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \       0x48   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \                     ??halConfigInit_1: (+1)
   \       0x4C   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \                     ??halConfigInit_2: (+1)
   \       0x50   0xA801             ADD      R0,SP,#+4
   \       0x52   0x....'....        BL       CMU_HFXOInit
   \       0x56   0x....             LDR.N    R0,??DataTable1_1  ;; 0x249f000
   \       0x58   0x....'....        BL       SystemHFXOClockSet
   \       0x5C   0x2103             MOVS     R1,#+3
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x....'....        BL       CMU_ClockSelectSet
   \       0x64   0x2108             MOVS     R1,#+8
   \       0x66   0x2007             MOVS     R0,#+7
   \       0x68   0x....'....        BL       CMU_ClockSelectSet
   \       0x6C   0x2108             MOVS     R1,#+8
   \       0x6E   0x2008             MOVS     R0,#+8
   \       0x70   0x....'....        BL       CMU_ClockSelectSet
   \       0x74   0x2108             MOVS     R1,#+8
   \       0x76   0x200D             MOVS     R0,#+13
   \       0x78   0x....'....        BL       CMU_ClockSelectSet
    297          
    298          #if (HAL_BUTTON_COUNT > 0)
    299            halInternalInitButton();
   \       0x7C   0x....'....        BL       halInternalInitButton
    300          #endif
    301          
    302          #if (HAL_LED_COUNT > 0)
    303            halInternalInitLed();
   \       0x80   0x....'....        BL       halInternalInitLed
    304          #endif
    305          
    306          #if (HAL_GPIO_MAX > 0)
    307            halConfigInitGpio();
    308          #endif
    309          
    310          #if defined (_EFR_DEVICE)
    311          #if (HAL_PTI_ENABLE)
    312            #if HAL_PTI_MODE == HAL_PTI_MODE_SPI
    313            // SPI Mode
    314              #define PTI_MODE RAIL_PTI_MODE_SPI
    315            #elif HAL_PTI_MODE == HAL_PTI_MODE_UART
    316            // UART Mode
    317              #define PTI_MODE RAIL_PTI_MODE_UART
    318            // DCLK unused in UART mode
    319              #undef BSP_PTI_DCLK_LOC
    320              #undef BSP_PTI_DCLK_PORT
    321              #undef BSP_PTI_DCLK_PIN
    322              #define BSP_PTI_DCLK_LOC  0
    323              #define BSP_PTI_DCLK_PORT 0
    324              #define BSP_PTI_DCLK_PIN  0
    325            #elif HAL_PTI_MODE == HAL_PTI_MODE_UART_ONEWIRE
    326            // Onewire UART Mode
    327              #define PTI_MODE RAIL_PTI_MODE_UART_ONEWIRE
    328            // DCLK unused in onewire mode
    329              #undef BSP_PTI_DCLK_LOC
    330              #undef BSP_PTI_DCLK_PORT
    331              #undef BSP_PTI_DCLK_PIN
    332              #define BSP_PTI_DCLK_LOC    0
    333              #define BSP_PTI_DCLK_PORT   0
    334              #define BSP_PTI_DCLK_PIN    0
    335            // DFRAME unused in onewire mode
    336              #undef BSP_PTI_DFRAME_LOC
    337              #undef BSP_PTI_DFRAME_PORT
    338              #undef BSP_PTI_DFRAME_PIN
    339              #define BSP_PTI_DFRAME_LOC  0
    340              #define BSP_PTI_DFRAME_PORT 0
    341              #define BSP_PTI_DFRAME_PIN  0
    342            #else
    343              #error HAL_PTI_MODE not recognized
    344            #endif //HAL_PTI_MODE
    345          
    346            // Newer chips use a different scheme for alternate function routing. For
    347            // those chips, the _LOC defines aren't used but still need definitions to
    348            // satisfy the compiler.
    349            #if !defined(_SILICON_LABS_32B_SERIES_1)
    350              #define BSP_PTI_DFRAME_LOC 0
    351              #define BSP_PTI_DOUT_LOC 0
    352              #define BSP_PTI_DCLK_LOC 0
    353            #endif
    354          
    355            RAIL_PtiConfig_t ptiInit = { PTI_MODE,
    356                                         HAL_PTI_BAUD_RATE,             /* 1.6 MHz baud */
    357                                         BSP_PTI_DOUT_LOC,              /* DOUT location */
    358                                         (uint8_t) BSP_PTI_DOUT_PORT,   /* DOUT port */
    359                                         BSP_PTI_DOUT_PIN,              /* DOUT pin */
    360                                         BSP_PTI_DCLK_LOC,              /* DCLK location */
    361                                         (uint8_t) BSP_PTI_DCLK_PORT,   /* DCLK port */
    362                                         BSP_PTI_DCLK_PIN,              /* DCLK pin */
    363                                         BSP_PTI_DFRAME_LOC,            /* DFRAME location */
    364                                         (uint8_t) BSP_PTI_DFRAME_PORT, /* DFRAME port */
    365                                         BSP_PTI_DFRAME_PIN };          /* DFRAME pin */
    366          #if (PHY_RAIL || PHY_DUALRAIL)
    367            RAIL_ConfigPti(NULL, &ptiInit);
    368          #else
    369            PTI_Config(&ptiInit);
    370          #endif
    371          #endif // HAL_PTI_ENABLE
    372          #endif // defined (_EFR_DEVICE)
    373          
    374          #if (HAL_COEX_ENABLE)
    375          #if     (PHY_RAIL || PHY_DUALRAIL)
    376            (void) RAIL_ConfigMultiTimer(true);
    377          #endif//(PHY_RAIL || PHY_DUALRAIL)
    378            HalPtaOptions ptaOptions = halPtaGetOptions();
    379            halPtaSetOptions(ptaOptions);
    380            halInternalInitPta();
    381          #endif
    382          
    383          #if (HAL_ANTDIV_ENABLE || defined(_SILICON_LABS_32B_SERIES_2))
    384            (void) halInitAntenna();
   \       0x84   0x....'....        BL       halInitAntenna
    385          #endif
    386          
    387          #if (HAL_SERIAL_USART0_ENABLE)
    388            COM_Init_t initDataUsart0 = COM_USART0_DEFAULT;
    389            status = COM_Init(comPortUsart0, &initDataUsart0);
    390            if (status != ECODE_OK) {
    391              return status;
    392            }
    393          #endif
    394          #if (HAL_SERIAL_USART1_ENABLE)
    395            COM_Init_t initDataUsart1 = (COM_Init_t) COM_USART1_DEFAULT;
    396            status = COM_Init(comPortUsart1, &initDataUsart1);
    397            if (status != ECODE_OK) {
    398              return status;
    399            }
    400          #endif
    401          #if (HAL_SERIAL_USART2_ENABLE)
    402            COM_Init_t initDataUsart2 = (COM_Init_t) COM_USART2_DEFAULT;
    403            status = COM_Init(comPortUsart2, &initDataUsart2);
    404            if (status != ECODE_OK) {
    405              return status;
    406            }
    407          #endif
    408          #if (HAL_SERIAL_USART3_ENABLE)
    409            COM_Init_t initDataUsart3 = (COM_Init_t) COM_USART3_DEFAULT;
    410            status = COM_Init(comPortUsart3, &initDataUsart3);
    411            if (status != ECODE_OK) {
    412              return status;
    413            }
    414          #endif
    415          #if (HAL_SERIAL_LEUART0_ENABLE)
    416            COM_Init_t initDataLeuart0 = (COM_Init_t) COM_LEUART0_DEFAULT;
    417            status = COM_Init(comPortLeuart0, &initDataLeuart0);
    418            if (status != ECODE_OK) {
    419              return status;
    420            }
    421          #endif
    422          #if (HAL_SERIAL_LEUART1_ENABLE)
    423            COM_Init_t initDataLeuart1 = (COM_Init_t) COM_LEUART1_DEFAULT;
    424            status = COM_Init(comPortLeuart1, &initDataLeuart1);
    425            if (status != ECODE_OK) {
    426              return status;
    427            }
    428          #endif
    429          
    430          #if (HAL_VCOM_ENABLE)
    431            #if HAL_IOEXP_VCOM_ENABLE
    432            BSP_Init(BSP_INIT_IOEXP);
    433            BSP_PeripheralAccess(BSP_IOEXP_VCOM, true);
    434            #elif defined (BSP_VCOM_ENABLE_PORT)
    435            GPIO_PinModeSet(BSP_VCOM_ENABLE_PORT, BSP_VCOM_ENABLE_PIN, gpioModePushPull, 1);
   \       0x88   0x2301             MOVS     R3,#+1
   \       0x8A   0x2204             MOVS     R2,#+4
   \       0x8C   0x2104             MOVS     R1,#+4
   \       0x8E   0x2003             MOVS     R0,#+3
   \       0x90   0x....'....        BL       GPIO_PinModeSet
    436            #else
    437            #warning VCOM enabled without configuring enable pin or IOEXP
    438            #endif
    439          #endif // (HAL_SERIAL_VCOM_ENABLE)
    440          
    441          #if (HAL_SERIAL_RXWAKE_ENABLE)
    442            COM_RxGpioWakeInit();
    443          #endif
    444          
    445          #if (HAL_FEM_ENABLE)
    446            initFem();
    447          #endif
    448          
    449          #if (HAL_WDOG_ENABLE)
    450            halInternalEnableWatchDog();
   \       0x94   0x....'....        BL       halInternalEnableWatchDog
    451          #endif
    452            return status;
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0xB007             ADD      SP,SP,#+28
   \       0x9C   0xBD00             POP      {PC}             ;; return
    453          }
    454          
    455          #if HAL_ANTDIV_RX_RUNTIME_PHY_SELECT
    456          static activeAntennaRxMode = HAL_ANTENNA_MODE_DISABLED;
    457          
    458          bool halAntDivRxPhyChanged(void)
    459          {
    460            return (halGetAntennaRxMode() == HAL_ANTENNA_MODE_DIVERSITY)
    461                   != (activeAntennaRxMode == HAL_ANTENNA_MODE_DIVERSITY)
    462          }
    463          
    464          static RAIL_Status_t halCoexConfigNormalPhy(RAIL_Handle_t railHandle)
    465          {
    466            activeAntennaRxMode = halGetAntennaRxMode();
    467            if (activeAntennaRxMode == HAL_ANTENNA_MODE_DIVERSITY) {
    468              return RAIL_IEEE802154_Config2p4GHzRadioAntDiv(railHandle);
    469            } else {
    470              return RAIL_IEEE802154_Config2p4GHzRadio(railHandle);
    471            }
    472          }
    473          #if HAL_COEX_PHY_ENABLED || HAL_COEX_RUNTIME_PHY_SELECT
    474          static RAIL_Status_t halCoexConfigCoexPhy(RAIL_Handle_t railHandle)
    475          {
    476            activeAntennaRxMode = halGetAntennaRxMode();
    477            if (activeAntennaRxMode == HAL_ANTENNA_MODE_DIVERSITY) {
    478              return RAIL_IEEE802154_Config2p4GHzRadioAntDivCoex(railHandle);
    479            } else {
    480              return RAIL_IEEE802154_Config2p4GHzRadioCoex(railHandle);
    481            }
    482          }
    483          #endif//HAL_COEX_PHY_ENABLED || HAL_COEX_RUNTIME_PHY_SELECT
    484          #elif ANTENNA_USE_RAIL_SCHEME && (ANTENNA_RX_DEFAULT_MODE != HAL_ANTENNA_MODE_DISABLED)
    485          #define halCoexConfigNormalPhy RAIL_IEEE802154_Config2p4GHzRadioAntDiv
    486          #define halCoexConfigCoexPhy   RAIL_IEEE802154_Config2p4GHzRadioAntDivCoex
    487          #else
    488          #define halCoexConfigNormalPhy RAIL_IEEE802154_Config2p4GHzRadio
    489          #define halCoexConfigCoexPhy   RAIL_IEEE802154_Config2p4GHzRadioCoex
    490          #endif
    491          
    492          #if     HAL_COEX_RUNTIME_PHY_SELECT
    493          #if     HAL_COEX_PHY_ENABLED
    494          bool halCoexPhySelectedCoex = true;
    495          #else//!HAL_COEX_PHY_ENABLED
    496          bool halCoexPhySelectedCoex = false;
    497          #endif//HAL_COEX_PHY_ENABLED
    498          #endif//HAL_COEX_RUNTIME_PHY_SELECT
    499          

   \                                 In section .text, align 2, keep-with-next
    500          RAIL_Status_t halPluginConfig2p4GHzRadio(RAIL_Handle_t railHandle)
    501          {
   \                     halPluginConfig2p4GHzRadio: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    502            // Establish the proper radio config supporting antenna diversity
    503            RAIL_Status_t status;
    504           #if     HAL_COEX_RUNTIME_PHY_SELECT
    505            if (halCoexPhySelectedCoex) {
    506              status = halCoexConfigCoexPhy(railHandle);
    507            } else {
    508              status = halCoexConfigNormalPhy(railHandle);
    509            }
    510           #elif   HAL_COEX_PHY_ENABLED
    511            status = halCoexConfigCoexPhy(railHandle);
    512           #else
    513            status = halCoexConfigNormalPhy(railHandle);
   \        0x2   0x....'....        BL       RAIL_IEEE802154_Config2p4GHzRadio
   \        0x6   0x0004             MOVS     R4,R0
    514           #endif//HAL_COEX_RUNTIME_PHY_SELECT
    515            assert(status == RAIL_STATUS_NO_ERROR);
   \        0x8   0xD004             BEQ.N    ??halPluginConfig2p4GHzRadio_0
   \        0xA   0xF240 0x2103      MOVW     R1,#+515
   \        0xE   0x....             LDR.N    R0,??DataTable1_2
   \       0x10   0x....'....        BL       halInternalAssertFailed
    516          
    517           #if ANTENNA_USE_RAIL_SCHEME && (ANTENNA_RX_DEFAULT_MODE != HAL_ANTENNA_MODE_DISABLED)
    518            // Tell RAIL what Rx antenna mode to use
    519            extern EmberStatus emRadioConfigRxAntenna(HalAntennaMode mode);
    520            assert(emRadioConfigRxAntenna(halGetAntennaRxMode()) == EMBER_SUCCESS);
    521           #endif
    522          
    523            return status;
   \                     ??halPluginConfig2p4GHzRadio_0: (+1)
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
    524          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x0249'F000        DC32     0x249f000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x0B 0x0B          DC8 11, 11, 2, 0, 0, 32, 32, 0, 3, 140, 140, 60, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x02 0x00    
   \              0x00 0x20    
   \              0x20 0x00    
   \              0x03 0x8C    
   \              0x8C 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x68 0x61          DC8 "hal-config.c"
   \              0x6C 0x2D    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x2E 0x63    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   halConfigInit
        32   -> CMU_ClockSelectSet
        32   -> CMU_HFXOInit
        32   -> CORE_AtomicEnableIrq
        32   -> GPIO_PinModeSet
        32   -> SystemHFXOClockSet
        32   -> __aeabi_memcpy4
        32   -> halInitAntenna
        32   -> halInternalEnableWatchDog
        32   -> halInternalGetCtuneToken
        32   -> halInternalGetModuleCtuneXiXo
        32   -> halInternalInitButton
        32   -> halInternalInitLed
       8   halPluginConfig2p4GHzRadio
         8   -> RAIL_IEEE802154_Config2p4GHzRadio
         8   -> halInternalAssertFailed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      20  ?_0
      16  ?_1
     158  halConfigInit
      24  halPluginConfig2p4GHzRadio

 
  36 bytes in section .rodata
 194 bytes in section .text
 
 194 bytes of CODE  memory
  36 bytes of CONST memory

Errors: none
Warnings: none
