###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:43
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\debug-jtag\debug-jtag-efr32.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW30FA.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\debug-jtag\debug-jtag-efr32.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"debug-jtag-efr32.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\debug-jtag\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\debug-jtag-efr32.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\debug-jtag-efr32.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\base\hal\plugin\debug-jtag\debug-jtag-efr32.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief EFM32/EFR32 Debug Transport Mechanism
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc. Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement. This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          #include PLATFORM_HEADER
     18          #include <string.h>
     19          #include "hal/hal.h"
     20          #include "hal/plugin/debug-jtag/debug-channel.h"
     21          #include "em_chip.h"
     22          #include "em_cmu.h"
     23          #include "em_emu.h"
     24          #include "em_device.h"
     25          #include "em_gpio.h"
     26          
     27          #include "plugin/debug/rtt/SEGGER_RTT.h"
     28          
     29          #if DEBUG_LEVEL >= BASIC_DEBUG
     30          
     31          #define OUT_VERSION_INDEX   0
     32          #define OUT_TYPE_INDEX      1
     33          #define OUT_SEQUENCE_INDEX  3
     34          #define OUT_DATA_INDEX      4
     35          #define OUT_VERSION 0xD1
     36          
     37          #define TIMEOUT_MS 500
     38          
     39          // This is the division factor used to generate the correct baud rate:
     40          // NOTE:  If the prescaler is changed, then the delay in emDebugPowerDown
     41          //        must be adjusted to be 50 bit times at the new baud rate.
     42          #define SPEED_HZ 500000
     43          // This is the amount of time needed to allow the SWO hardware to finish sending
     44          // data.
     45          // 20 byte fifo (four 4 byte transmissions plus their header byte)
     46          // 10 bits per byte
     47          // 500000 baud rate
     48          // (1/500000) * (20*10) = 400 us
     49          #define TX_COMPLETE_DELAY 400
     50          

   \                                 In section .bss, align 1
     51          static uint8_t sequenceNumber = 0;
   \                     sequenceNumber:
   \        0x0                      DS8 1
     52          // Size of RTT down buffer
     53          #define DEBUG_VUART_BUFFER_DOWN_SIZE 64
     54          // RTT down channel number

   \                                 In section .data, align 4
     55          static int rtt_buffer_index = -1;
   \                     rtt_buffer_index:
   \        0x0   0xFFFF'FFFF        DC32 -1
     56          // RTT down channel ring buffer

   \                                 In section .bss, align 4
     57          static char rtt_buffer[DEBUG_VUART_BUFFER_DOWN_SIZE];
   \                     rtt_buffer:
   \        0x0                      DS8 64
     58          
     59          #define DEBUG_OFF           0
     60          #define DEBUG_INITIALIZED   1
     61          #define DEBUG_ENABLED       2
     62          #define DEBUG_POWERING_DOWN 3
     63          
     64          //debugChannelState is a variable only used by Zip and Connect.
     65          #if defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT)
     66          static uint8_t debugChannelState = DEBUG_OFF;
     67          #endif //defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT))
     68          
     69          // Fallback BSP_TRACE definitions match EFR32 WSTK routing
     70          #ifndef BSP_TRACE_SWO_LOC
     71          #define BSP_TRACE_SWO_LOC  0
     72          #endif
     73          
     74          #if !defined(BSP_TRACE_SWO_PORT) || !defined(BSP_TRACE_SWO_PIN)
     75          #define BSP_TRACE_SWO_PIN  2
     76          #define BSP_TRACE_SWO_PORT gpioPortF
     77          #endif
     78          
     79          #define TARGET_FREQUENCY 875000U
     80          

   \                                 In section .text, align 2, keep-with-next
     81          EmberStatus emDebugInit(void)
     82          {
   \                     emDebugInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     83          #if !defined(_SILICON_LABS_32B_SERIES_2)
     84            // Initialize SWO for target -> debugger output (up-channel)
     85            // enable gpio clock
     86            CMU_ClockEnable(cmuClock_GPIO, true);
     87          #endif
     88          
     89            // Enable Serial wire output pin
     90            GPIO_DbgSWOEnable(true);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x....             LDR.N    R2,??DataTable7  ;; 0x4003d444
   \        0x6   0x6011             STR      R1,[R2, #+0]
     91          
     92            // set location to 0
     93            GPIO_DbgLocationSet(BSP_TRACE_SWO_LOC);
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....'....        BL       GPIO_DbgLocationSet
     94          
     95            GPIO_PinModeSet(BSP_TRACE_SWO_PORT, BSP_TRACE_SWO_PIN, gpioModePushPull, 1);
   \        0xE   0x2301             MOVS     R3,#+1
   \       0x10   0x2204             MOVS     R2,#+4
   \       0x12   0x2103             MOVS     R1,#+3
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x....'....        BL       GPIO_PinModeSet
     96          
     97          #if !(defined(__CORTEX_M) && (__CORTEX_M == 0x00))
     98          //Fancy debugging is not supported on M0(+)...
     99            emberDebugReportRestore(true);
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x....'....        BL       emberDebugReportRestore
    100            emDebugPowerUp();
   \       0x20   0x....'....        BL       emDebugPowerUp
    101            emDebugClearStats();
   \       0x24   0x....'....        BL       emDebugClearStats
    102          #else
    103          #if !defined(_SILICON_LABS_32B_SERIES_2)
    104            // enable debug clock, which is done by emDebugPowerUp for non-M0 cores
    105            CMU_OscillatorEnable(cmuOsc_AUXHFRCO, true, true);
    106          #endif
    107          #endif
    108          
    109          //debugChannelState is a variable only used by Zip and Connect.
    110          #if defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT)
    111            debugChannelState = DEBUG_INITIALIZED;
    112          #endif //defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT))
    113          
    114            // Initialize RTT for debugger -> target input (down-channel)
    115            SEGGER_RTT_Init();
   \       0x28   0x....'....        BL       SEGGER_RTT_Init
    116          
    117            // The "silabsvuartdown" RTT channel name is used by the debugger to find the
    118            // location of the RTT buffer in RAM, and can therefore not be changed without
    119            // updating the board controller firmware.
    120            rtt_buffer_index = SEGGER_RTT_AllocDownBuffer("silabsvuartdown",
    121                                                          rtt_buffer,
    122                                                          DEBUG_VUART_BUFFER_DOWN_SIZE,
    123                                                          SEGGER_RTT_MODE_NO_BLOCK_TRIM);
   \       0x2C   0x2301             MOVS     R3,#+1
   \       0x2E   0x2240             MOVS     R2,#+64
   \       0x30   0x....             LDR.N    R1,??DataTable7_1
   \       0x32   0x....             LDR.N    R0,??DataTable7_2
   \       0x34   0x....'....        BL       SEGGER_RTT_AllocDownBuffer
   \       0x38   0x....             LDR.N    R1,??DataTable7_3
   \       0x3A   0x6008             STR      R0,[R1, #+0]
    124          
    125            if (rtt_buffer_index >= 0) {
   \       0x3C   0x0FC0             LSRS     R0,R0,#+31
    126              return EMBER_SUCCESS;
   \       0x3E   0xBD02             POP      {R1,PC}          ;; return
    127            } else {
    128              return EMBER_ERR_FATAL;
    129            }
    130          }
    131          
    132          // This code uses ITM_TCR_TRACEBUSID_Pos.  Core m33 devices use
    133          // ITM_TCR_TRACEBUSID_Pos but core m3,4,7 use ITM_TCR_TraceBusID_Pos so
    134          // ITM_TCR_TraceBusID_Pos needs to be mapped onto ITM_TCR_TRACEBUSID_Pos.
    135          #if defined(ITM_TCR_TraceBusID_Pos)
    136            #define ITM_TCR_TRACEBUSID_Pos ITM_TCR_TraceBusID_Pos
    137          #endif
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void emDebugPowerUp(void)
    140          {
   \                     emDebugPowerUp: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    141          #if !defined(_SILICON_LABS_32B_SERIES_2)
    142            // enable debug clock
    143            CMU_OscillatorEnable(cmuOsc_AUXHFRCO, true, true);
    144          #endif
    145          
    146            /* Enable trace in core debug */
    147          #if defined(ITM)
    148            CoreDebug->DHCSR |= CoreDebug_DHCSR_C_DEBUGEN_Msk;
   \        0x2   0x....             LDR.N    R0,??DataTable7_4  ;; 0xe000edf0
   \        0x4   0x6801             LDR      R1,[R0, #+0]
    149            CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //trace enable
    150            ITM->LAR  = 0xC5ACCE55UL; // unlock itm
   \        0x6   0x....             LDR.N    R4,??DataTable7_5  ;; 0xe0000fb0
    151            ITM->TER  = 0x0UL;        // trace enable
   \        0x8   0x....             LDR.N    R5,??DataTable7_6  ;; 0xe0000e00
   \        0xA   0xF041 0x0101      ORR      R1,R1,#0x1
   \        0xE   0x6001             STR      R1,[R0, #+0]
   \       0x10   0x68C2             LDR      R2,[R0, #+12]
   \       0x12   0x2100             MOVS     R1,#+0
    152            ITM->TCR  = 0x0UL;        // trace control
   \       0x14   0x....             LDR.N    R6,??DataTable7_7  ;; 0xe0000e80
   \       0x16   0xF042 0x7280      ORR      R2,R2,#0x1000000
   \       0x1A   0x60C2             STR      R2,[R0, #+12]
   \       0x1C   0x....             LDR.N    R0,??DataTable7_8  ;; 0xc5acce55
   \       0x1E   0x6020             STR      R0,[R4, #+0]
   \       0x20   0x6029             STR      R1,[R5, #+0]
   \       0x22   0x6031             STR      R1,[R6, #+0]
    153            TPI->SPPR = 2UL;          // pin protocol (2 = NRZ)
   \       0x24   0x2302             MOVS     R3,#+2
   \       0x26   0x....             LDR.N    R1,??DataTable7_9  ;; 0xe00400f0
   \       0x28   0x600B             STR      R3,[R1, #+0]
    154            // Set TPIU prescaler for the current debug clock frequency.
    155          #if defined(_SILICON_LABS_32B_SERIES_2)
    156            CMU_Clock_TypeDef clk = cmuClock_TRACECLK;
    157          #else
    158            CMU_Clock_TypeDef clk = cmuClock_DBG;
    159          #endif
    160            uint32_t div = (CMU_ClockFreqGet(clk) + (TARGET_FREQUENCY / 2U)) / TARGET_FREQUENCY; // rounding
    161            TPI->ACPR = div - 1;      // clock prescaler
   \       0x2A   0x200C             MOVS     R0,#+12
   \       0x2C   0x....'....        BL       CMU_ClockFreqGet
   \       0x30   0x....             LDR.N    R1,??DataTable7_10  ;; 0x6acfc
   \       0x32   0x1808             ADDS     R0,R1,R0
   \       0x34   0x....             LDR.N    R2,??DataTable7_11  ;; 0xd59f8
   \       0x36   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \       0x3A   0x....             LDR.N    R3,??DataTable7_12  ;; 0xe0040010
    162            ITM->TPR  = 0x0UL;        // trace priveledge
   \       0x3C   0x2100             MOVS     R1,#+0
   \       0x3E   0x1E40             SUBS     R0,R0,#+1
   \       0x40   0x6018             STR      R0,[R3, #+0]
   \       0x42   0x6429             STR      R1,[R5, #+64]
    163            DWT->CTRL = ((0x4UL << DWT_CTRL_NUMCOMP_Pos)
    164                         | (1UL << DWT_CTRL_CYCTAP_Pos)
    165                         | (0xFUL << DWT_CTRL_POSTINIT_Pos)
    166                         | (0xFUL << DWT_CTRL_POSTPRESET_Pos)
    167                         | (1UL << DWT_CTRL_CYCCNTENA_Pos));
   \       0x44   0x....             LDR.N    R0,??DataTable7_13  ;; 0x400003ff
   \       0x46   0x6520             STR      R0,[R4, #+80]
    168            ITM->TCR  = ((1UL << ITM_TCR_TRACEBUSID_Pos)
    169                         | (1UL << ITM_TCR_DWTENA_Pos)
    170                         | (1UL << ITM_TCR_SYNCENA_Pos)
    171                         | (1UL << ITM_TCR_ITMENA_Pos));
   \       0x48   0x....             LDR.N    R1,??DataTable7_14  ;; 0x1000d
   \       0x4A   0x6031             STR      R1,[R6, #+0]
    172            TPI->FFCR = ((1UL << TPI_FFCR_TrigIn_Pos));     // disable formatter
   \       0x4C   0xF44F 0x7280      MOV      R2,#+256
   \       0x50   0x....             LDR.N    R0,??DataTable7_15  ;; 0xe0040304
   \       0x52   0x6002             STR      R2,[R0, #+0]
    173            ITM->TER  |= (1UL << 8);   // enable stimulus channel 8 // BinaryDebugProtocol
   \       0x54   0x682B             LDR      R3,[R5, #+0]
   \       0x56   0xF443 0x7380      ORR      R3,R3,#0x100
   \       0x5A   0x602B             STR      R3,[R5, #+0]
    174            //Left the following code around in case it might be used in the future.
    175            //ITM->TER  |= (1UL<<0);   // enable stimulus channel 0 // Raw VUART/port 0
    176          #endif
    177          }
   \       0x5C   0xBD70             POP      {R4-R6,PC}       ;; return
    178          
    179          #if defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT)
    180          
    181          //NOTE:  If emDebugPowerDown is ever called, emDebugPowerUp must be called
    182          //       in order to restore configuration.
    183          
    184          void emDebugPowerDown(void)
    185          {
    186            uint8_t done = false;
    187          
    188            // Only begin the power down process if we're in the enabled state
    189            {
    190              DECLARE_INTERRUPT_STATE;
    191              DISABLE_INTERRUPTS();
    192              if (debugChannelState != DEBUG_ENABLED) {
    193                done = true;
    194              } else {
    195                // Set the debug state back down to initialized
    196                debugChannelState = DEBUG_POWERING_DOWN;
    197              }
    198              RESTORE_INTERRUPTS();
    199            }
    200            // Now that we're out of the disabled interrupts block return if we are done
    201            if (done) {
    202              return;
    203            }
    204          
    205            if (ITM->TCR & ITM_TCR_ITMENA_Msk) {
    206              DWT->CTRL = (DWT->CTRL & (~DWT_CTRL_SYNCTAP_Msk));
    207          
    208              ITM->TCR &= ~ITM_TCR_ITMENA_Msk;
    209          
    210              while (ITM->TCR & ITM_TCR_BUSY_Msk) {
    211                // do nothing
    212              }
    213          
    214              halCommonDelayMicroseconds(100);
    215            }
    216          #if !defined(_SILICON_LABS_32B_SERIES_2)
    217            // disable debug oscillator
    218            CMU_OscillatorEnable(cmuOsc_AUXHFRCO, false, false);
    219          #endif
    220          
    221            TPI->SPPR = 0;
    222            TPI->FFCR = 0;
    223            CoreDebug->DHCSR = 0;
    224          
    225            debugChannelState = DEBUG_INITIALIZED;
    226          }
    227          
    228          bool halStackDebugActive(void)
    229          {
    230            return ((CoreDebug->DHCSR && CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0);
    231          }
    232          
    233          uint8_t emDebugAddInitialFraming(uint8_t *buff, uint16_t debugType)
    234          {
    235            buff[OUT_VERSION_INDEX]  = OUT_VERSION;
    236            buff[OUT_TYPE_INDEX]     = LOW_BYTE(debugType);
    237            buff[OUT_TYPE_INDEX + 1] = HIGH_BYTE(debugType);
    238            buff[OUT_SEQUENCE_INDEX] = sequenceNumber++;
    239            return OUT_DATA_INDEX;
    240          }
    241          
    242          ///Left the following code around in case it might be used in the future.
    243          //__STATIC_INLINE uint8_t itmSendByteChannel0( uint8_t byte )
    244          //{
    245          //   if( (ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << 0) ) )
    246          //   {
    247          //      while (ITM->PORT[0].u32 == 0);
    248          //      ITM->PORT[0].u8 = byte;
    249          //   }
    250          //   return byte;
    251          //}
    252          
    253          __STATIC_INLINE uint8_t itmSendByteChannel8(uint8_t byte)
    254          {
    255            if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << 8))) {
    256              while (ITM->PORT[8].u32 == 0) ;
    257              ITM->PORT[8].u8 = byte;
    258            }
    259            return byte;
    260          }
    261          
    262          // Byte format used by swoOutput() over ITM Stimulus Port 8:
    263          //
    264          // byte 0 = '['
    265          // byte 1 = length
    266          // byte 2 = buffer[0] (the payload)
    267          // byte x = buffer[...] (the payload)
    268          // byte y = crc of payload, high byte
    269          // byte y+1 = crc of payload, low byte
    270          // byte z = ']'
    271          
    272          static EmberStatus swoOutput(uint8_t *data, uint8_t length)
    273          {
    274            length += 5;
    275            uint8_t index = 0;
    276            uint16_t startTime = halCommonGetInt16uMillisecondTick();
    277            uint16_t crc = 0xFFFF;
    278            uint8_t outputByte = 0;
    279          
    280            while ((halStackDebugActive()) && (index < length)) {
    281              uint16_t now = halCommonGetInt16uMillisecondTick();
    282              if (elapsedTimeInt16u(startTime, now) > TIMEOUT_MS) {
    283                break;
    284              }
    285          
    286              if (index == 0) {
    287                outputByte = '[';
    288                index++;
    289              } else if (index == 1) {
    290                outputByte = length - 5;
    291                index++;
    292              } else if (index == length - 3) {
    293                outputByte = LOW_BYTE(crc);
    294                index++;
    295              } else if (index == length - 2) {
    296                outputByte = HIGH_BYTE(crc);
    297                index++;
    298              } else if (index == length - 1) {
    299                outputByte = ']';
    300                index++;
    301              } else if (index == length) {
    302                outputByte = 0;
    303              } else {
    304                outputByte = data[index - 2];// emberGetLinkedBuffersByte(buffer, index - 2);
    305                crc = halCommonCrc16(outputByte, crc);
    306                index++;
    307              }
    308          
    309              itmSendByteChannel8(outputByte);
    310          //Left the following code around in case it might be used in the future.
    311          //      itmSendByteChannel0(outputByte);
    312            }
    313          
    314            if (index == length) {
    315              return EMBER_SUCCESS;
    316            } else {
    317              return EMBER_ERR_FATAL;
    318            }
    319          }
    320          
    321          //x?EmberStatus halStackDebugPutBuffer(EmberMessageBuffer buffer)
    322          //x?{
    323          //x?  if (emberMessageBufferLength(buffer) < OUT_DATA_INDEX) {
    324          //x?    return EMBER_ERR_FATAL;
    325          //x?  }
    326          //x?  return swoOutput(buffer);
    327          //x?}
    328          
    329          //zip and znet are fine until this function....
    330          EmberStatus emDebugSend(uint8_t *data, uint8_t *length)
    331          {
    332            EmberStatus status = EMBER_SUCCESS;
    333            if (*length > OUT_DATA_INDEX) {
    334              status = swoOutput(data, *length);
    335            }
    336            *length = OUT_DATA_INDEX;
    337            return status;
    338          }
    339          
    340          void emDebugReceiveData(void)
    341          {
    342            uint8_t buf[DEBUG_VUART_BUFFER_DOWN_SIZE];
    343            int len = 0;
    344          
    345            len = SEGGER_RTT_Read(rtt_buffer_index, buf, DEBUG_VUART_BUFFER_DOWN_SIZE);
    346          
    347            if (len) {
    348              emDebugProcessIncoming(EM_DEBUG_VIRTUAL_UART_RX, buf, len);
    349            }
    350          }
    351          
    352          #else //defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT))
    353          #include "stack/include/packet-buffer.h"
    354          
    355          //NOTE:  If emDebugPowerDown is ever called, emDebugPowerUp must be called
    356          //       in order to restore configuration.
    357          

   \                                 In section .text, align 2, keep-with-next
    358          void emDebugPowerDown(void)
    359          {
   \                     emDebugPowerDown: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    360          #if defined(ITM)
    361            if (ITM->TCR & ITM_TCR_ITMENA_Msk) {
   \        0x2   0x....             LDR.N    R0,??DataTable7_7  ;; 0xe0000e80
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x07CA             LSLS     R2,R1,#+31
   \        0x8   0xD50E             BPL.N    ??emDebugPowerDown_0
    362              DWT->CTRL = (DWT->CTRL & (~DWT_CTRL_SYNCTAP_Msk));
   \        0xA   0x....             LDR.N    R1,??DataTable7_16  ;; 0xe0001000
   \        0xC   0x680B             LDR      R3,[R1, #+0]
   \        0xE   0xF423 0x6340      BIC      R3,R3,#0xC00
   \       0x12   0x600B             STR      R3,[R1, #+0]
    363          
    364              ITM->TCR &= ~ITM_TCR_ITMENA_Msk;
   \       0x14   0x6801             LDR      R1,[R0, #+0]
   \       0x16   0x0849             LSRS     R1,R1,#+1
   \       0x18   0x0049             LSLS     R1,R1,#+1
   \       0x1A   0x6001             STR      R1,[R0, #+0]
    365          
    366              while ((ITM->TCR & ITM_TCR_BUSY_Msk) != 0U) {
   \                     ??emDebugPowerDown_1: (+1)
   \       0x1C   0x6802             LDR      R2,[R0, #+0]
   \       0x1E   0x0211             LSLS     R1,R2,#+8
   \       0x20   0xD4FC             BMI.N    ??emDebugPowerDown_1
    367                // do nothing
    368              }
    369          
    370              halCommonDelayMicroseconds(100);
   \       0x22   0x2064             MOVS     R0,#+100
   \       0x24   0x....'....        BL       halCommonDelayMicroseconds
    371            }
    372            // disable debug oscillator
    373          #if !defined(_SILICON_LABS_32B_SERIES_2)
    374            CMU_OscillatorEnable(cmuOsc_AUXHFRCO, false, false);
    375          #endif
    376          
    377            TPI->SPPR = 0;
   \                     ??emDebugPowerDown_0: (+1)
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x....             LDR.N    R0,??DataTable7_9  ;; 0xe00400f0
   \       0x2C   0x6001             STR      R1,[R0, #+0]
    378            TPI->FFCR = 0;
   \       0x2E   0x....             LDR.N    R3,??DataTable7_15  ;; 0xe0040304
   \       0x30   0x6019             STR      R1,[R3, #+0]
    379            CoreDebug->DHCSR = 0;
   \       0x32   0x....             LDR.N    R0,??DataTable7_4  ;; 0xe000edf0
   \       0x34   0x6001             STR      R1,[R0, #+0]
    380          #endif
    381          }
   \       0x36   0xBD01             POP      {R0,PC}          ;; return
    382          

   \                                 In section .text, align 2, keep-with-next
    383          bool halStackDebugActive(void)
    384          {
    385          #if defined(CoreDebug)
    386            return ((CoreDebug->DHCSR && CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0);
   \                     halStackDebugActive: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7_4  ;; 0xe000edf0
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xB100             CBZ.N    R0,??halStackDebugActive_0
   \        0x6   0x2001             MOVS     R0,#+1
   \                     ??halStackDebugActive_0: (+1)
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x4770             BX       LR               ;; return
    387          #else
    388            return false;
    389          #endif
    390          }
    391          

   \                                 In section .text, align 2, keep-with-next
    392          uint8_t emDebugAddInitialFraming(uint8_t *buff, uint16_t debugType)
    393          {
    394          #if defined(ITM)
    395            buff[OUT_VERSION_INDEX]  = OUT_VERSION;
   \                     emDebugAddInitialFraming: (+1)
   \        0x0   0x22D1             MOVS     R2,#+209
   \        0x2   0x7002             STRB     R2,[R0, #+0]
    396            buff[OUT_TYPE_INDEX]     = LOW_BYTE(debugType);
   \        0x4   0x7041             STRB     R1,[R0, #+1]
    397            buff[OUT_TYPE_INDEX + 1] = HIGH_BYTE(debugType);
   \        0x6   0x0A09             LSRS     R1,R1,#+8
   \        0x8   0x7081             STRB     R1,[R0, #+2]
    398            buff[OUT_SEQUENCE_INDEX] = sequenceNumber++;
   \        0xA   0x....             LDR.N    R1,??DataTable7_17
   \        0xC   0x780A             LDRB     R2,[R1, #+0]
   \        0xE   0x70C2             STRB     R2,[R0, #+3]
   \       0x10   0x1C52             ADDS     R2,R2,#+1
   \       0x12   0x700A             STRB     R2,[R1, #+0]
    399            return OUT_DATA_INDEX;
   \       0x14   0x2004             MOVS     R0,#+4
   \       0x16   0x4770             BX       LR               ;; return
    400          #else
    401            return 0;
    402          #endif
    403          }
    404          
    405          ///Left the following code around in case it might be used in the future.
    406          //__STATIC_INLINE uint8_t itmSendByteChannel0( uint8_t byte )
    407          //{
    408          //   if( (ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << 0) ) )
    409          //   {
    410          //      while (ITM->PORT[0].u32 == 0);
    411          //      ITM->PORT[0].u8 = byte;
    412          //   }
    413          //   return byte;
    414          //}
    415          
    416          __STATIC_INLINE uint8_t itmSendByteChannel8(uint8_t byte)
    417          {
    418          #if defined(ITM)
    419            if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << 8))) {
    420              while (ITM->PORT[8].u32 == 0) {
    421              }
    422              ITM->PORT[8].u8 = byte;
    423            }
    424          #endif
    425            return byte;
    426          }
    427          
    428          // Byte format used by swoOutput() over ITM Stimulus Port 8:
    429          //
    430          // byte 0 = '['
    431          // byte 1 = length
    432          // byte 2 = buffer[0] (the payload)
    433          // byte x = buffer[...] (the payload)
    434          // byte y = crc of payload, high byte
    435          // byte y+1 = crc of payload, low byte
    436          // byte z = ']'
    437          

   \                                 In section .text, align 2, keep-with-next
    438          static EmberStatus swoOutput(EmberMessageBuffer buffer)
    439          {
   \                     swoOutput: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
    440            uint8_t length = emberMessageBufferLength(buffer) + 5;
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x....'....        LDR.W    R10,??DataTable7_18
   \        0xA   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \        0xE   0xB082             SUB      SP,SP,#+8
    441            uint8_t index = 0;
   \       0x10   0x2700             MOVS     R7,#+0
   \       0x12   0x5D06             LDRB     R6,[R0, R4]
    442            uint16_t startTime = halCommonGetInt16uMillisecondTick();
   \       0x14   0x....'....        BL       halCommonGetInt16uMillisecondTick
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0x1D76             ADDS     R6,R6,#+5
   \       0x1C   0xB2F6             UXTB     R6,R6
    443            uint16_t crc = 0xFFFF;
   \       0x1E   0xF64F 0x78FF      MOVW     R8,#+65535
    444            uint8_t outputByte = 0;
   \       0x22   0x....'....        LDR.W    R9,??DataTable7_19  ;; 0xe0000020
   \       0x26   0xE042             B.N      ??swoOutput_0
    445          
    446            while ((halStackDebugActive()) && (index < length)) {
    447              uint16_t now = halCommonGetInt16uMillisecondTick();
    448              if (elapsedTimeInt16u(startTime, now) > TIMEOUT_MS) {
    449                break;
    450              }
    451          
    452              if (index == 0) {
    453                outputByte = '[';
    454                index++;
    455              } else if (index == 1) {
    456                outputByte = emberMessageBufferLength(buffer);
    457                index++;
    458              } else if (index == length - 3) {
    459                outputByte = LOW_BYTE(crc);
    460                index++;
    461              } else if (index == length - 2) {
    462                outputByte = HIGH_BYTE(crc);
    463                index++;
    464              } else if (index == length - 1) {
    465                outputByte = ']';
    466                index++;
    467              } else if (index == length) {
    468                outputByte = 0;
    469              } else {
    470                outputByte = emberGetLinkedBuffersByte(buffer, index - 2);
   \                     ??swoOutput_1: (+1)
   \       0x28   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x2C   0x1EB9             SUBS     R1,R7,#+2
   \       0x2E   0xB2C9             UXTB     R1,R1
   \       0x30   0x....'....        BL       emberGetLinkedBuffersByte
   \       0x34   0x4605             MOV      R5,R0
    471                crc = halCommonCrc16(outputByte, crc);
   \       0x36   0x4641             MOV      R1,R8
   \       0x38   0x....'....        BL       halCommonCrc16
   \       0x3C   0x4680             MOV      R8,R0
    472                index++;
   \       0x3E   0xE027             B.N      ??swoOutput_2
    473              }
   \                     ??swoOutput_3: (+1)
   \       0x40   0x42B5             CMP      R5,R6
   \       0x42   0xDA39             BGE.N    ??swoOutput_4
   \       0x44   0x....'....        BL       halCommonGetInt16uMillisecondTick
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0xF240 0x12F5      MOVW     R2,#+501
   \       0x4E   0x1A40             SUBS     R0,R0,R1
   \       0x50   0xB280             UXTH     R0,R0
   \       0x52   0x4290             CMP      R0,R2
   \       0x54   0xDA30             BGE.N    ??swoOutput_4
   \       0x56   0xB2F8             UXTB     R0,R7
   \       0x58   0xB910             CBNZ.N   R0,??swoOutput_5
   \       0x5A   0x255B             MOVS     R5,#+91
   \       0x5C   0x2701             MOVS     R7,#+1
   \       0x5E   0xE018             B.N      ??swoOutput_6
   \                     ??swoOutput_5: (+1)
   \       0x60   0x2801             CMP      R0,#+1
   \       0x62   0xD104             BNE.N    ??swoOutput_7
   \       0x64   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x68   0x2702             MOVS     R7,#+2
   \       0x6A   0x5D05             LDRB     R5,[R0, R4]
   \       0x6C   0xE011             B.N      ??swoOutput_6
   \                     ??swoOutput_7: (+1)
   \       0x6E   0x1EF0             SUBS     R0,R6,#+3
   \       0x70   0x4285             CMP      R5,R0
   \       0x72   0xF107 0x0B01      ADD      R11,R7,#+1
   \       0x76   0xBF08             IT       EQ 
   \       0x78   0x4645             MOVEQ    R5,R8
   \       0x7A   0xD009             BEQ.N    ??swoOutput_2
   \       0x7C   0x1EB1             SUBS     R1,R6,#+2
   \       0x7E   0x428D             CMP      R5,R1
   \       0x80   0xBF08             IT       EQ 
   \       0x82   0xEA4F 0x2518      LSREQ    R5,R8,#+8
   \       0x86   0xD003             BEQ.N    ??swoOutput_2
   \       0x88   0x1E70             SUBS     R0,R6,#+1
   \       0x8A   0x4285             CMP      R5,R0
   \       0x8C   0xD1CC             BNE.N    ??swoOutput_1
   \       0x8E   0x255D             MOVS     R5,#+93
   \                     ??swoOutput_2: (+1)
   \       0x90   0x465F             MOV      R7,R11
    474          
    475              itmSendByteChannel8(outputByte);
   \                     ??swoOutput_6: (+1)
   \       0x92   0x....             LDR.N    R0,??DataTable7_7  ;; 0xe0000e80
   \       0x94   0x6801             LDR      R1,[R0, #+0]
   \       0x96   0x07CA             LSLS     R2,R1,#+31
   \       0x98   0xD509             BPL.N    ??swoOutput_0
   \       0x9A   0x....             LDR.N    R0,??DataTable7_6  ;; 0xe0000e00
   \       0x9C   0x6801             LDR      R1,[R0, #+0]
   \       0x9E   0x05CA             LSLS     R2,R1,#+23
   \       0xA0   0xD505             BPL.N    ??swoOutput_0
   \                     ??swoOutput_8: (+1)
   \       0xA2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD0FB             BEQ.N    ??swoOutput_8
   \       0xAA   0xF889 0x5000      STRB     R5,[R9, #+0]
    476          //Left the following code around in case it might be used in the future.
    477          //      itmSendByteChannel0(outputByte);
    478            }
   \                     ??swoOutput_0: (+1)
   \       0xAE   0x....             LDR.N    R1,??DataTable7_4  ;; 0xe000edf0
   \       0xB0   0x6808             LDR      R0,[R1, #+0]
   \       0xB2   0xB2FD             UXTB     R5,R7
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD1C3             BNE.N    ??swoOutput_3
    479          
    480            if (index == length) {
   \                     ??swoOutput_4: (+1)
   \       0xB8   0x42B5             CMP      R5,R6
   \       0xBA   0xBF0C             ITE      EQ 
   \       0xBC   0x2000             MOVEQ    R0,#+0
   \       0xBE   0x2001             MOVNE    R0,#+1
    481              return EMBER_SUCCESS;
    482            } else {
    483              return EMBER_ERR_FATAL;
   \       0xC0   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    484            }
    485          }
    486          

   \                                 In section .text, align 2, keep-with-next
    487          EmberStatus halStackDebugPutBuffer(EmberMessageBuffer buffer)
    488          {
   \                     halStackDebugPutBuffer: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    489            if (emberMessageBufferLength(buffer) < OUT_DATA_INDEX) {
   \        0x2   0x....             LDR.N    R1,??DataTable7_18
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0x5C14             LDRB     R4,[R2, R0]
   \        0x8   0x2C04             CMP      R4,#+4
   \        0xA   0xDA01             BGE.N    ??halStackDebugPutBuffer_0
    490              return EMBER_ERR_FATAL;
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0xBD10             POP      {R4,PC}
    491            }
    492            return swoOutput(buffer);
   \                     ??halStackDebugPutBuffer_0: (+1)
   \       0x10   0xE8BD 0x4010      POP      {R4,LR}
   \       0x14   0x....             B.N      swoOutput
    493          }
    494          

   \                                 In section .text, align 2, keep-with-next
    495          void emDebugReceiveData(void)
    496          {
    497            uint8_t buf[DEBUG_VUART_BUFFER_DOWN_SIZE];
    498            int len = 0;
    499          
    500            len = SEGGER_RTT_Read(rtt_buffer_index, buf, DEBUG_VUART_BUFFER_DOWN_SIZE);
   \                     emDebugReceiveData: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable7_3
   \        0x2   0xB510             PUSH     {R4,LR}
   \        0x4   0x6818             LDR      R0,[R3, #+0]
   \        0x6   0xB090             SUB      SP,SP,#+64
   \        0x8   0x2240             MOVS     R2,#+64
   \        0xA   0x4669             MOV      R1,SP
   \        0xC   0x....'....        BL       SEGGER_RTT_Read
    501          
    502            if (len) {
   \       0x10   0xB158             CBZ.N    R0,??emDebugReceiveData_0
    503              EmberMessageBuffer message = emberFillLinkedBuffers(buf, len);
   \       0x12   0xB2C1             UXTB     R1,R0
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       emberFillLinkedBuffers
   \       0x1A   0x4604             MOV      R4,R0
    504              emDebugProcessIncoming(EM_DEBUG_VIRTUAL_UART_RX, message);
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0x2012             MOVS     R0,#+18
   \       0x20   0x....'....        BL       emDebugProcessIncoming
    505              emberReleaseMessageBuffer(message);
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       emReleaseMessageBuffer
    506            }
    507          }
   \                     ??emDebugReceiveData_0: (+1)
   \       0x2A   0xB010             ADD      SP,SP,#+64
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x4003'D444        DC32     0x4003d444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x....'....        DC32     rtt_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     rtt_buffer_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0xE000'EDF0        DC32     0xe000edf0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0xE000'0FB0        DC32     0xe0000fb0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0xE000'0E00        DC32     0xe0000e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0xE000'0E80        DC32     0xe0000e80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0xC5AC'CE55        DC32     0xc5acce55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0xE004'00F0        DC32     0xe00400f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x0006'ACFC        DC32     0x6acfc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x000D'59F8        DC32     0xd59f8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0xE004'0010        DC32     0xe0040010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x4000'03FF        DC32     0x400003ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x0001'000D        DC32     0x1000d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0xE004'0304        DC32     0xe0040304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \        0x0   0xE000'1000        DC32     0xe0001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \        0x0   0x....'....        DC32     sequenceNumber

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \        0x0   0x....'....        DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \        0x0   0xE000'0020        DC32     0xe0000020

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x73 0x69          DC8 "silabsvuartdown"
   \              0x6C 0x61    
   \              0x62 0x73    
   \              0x76 0x75    
   \              0x61 0x72    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x00    
    508          
    509          #endif //defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT))
    510          
    511          #endif // DEBUG_LEVEL >= BASIC_DEBUG

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emDebugAddInitialFraming
       8   emDebugInit
         8   -> GPIO_DbgLocationSet
         8   -> GPIO_PinModeSet
         8   -> SEGGER_RTT_AllocDownBuffer
         8   -> SEGGER_RTT_Init
         8   -> emDebugClearStats
         8   -> emDebugPowerUp
         8   -> emberDebugReportRestore
       8   emDebugPowerDown
         8   -> halCommonDelayMicroseconds
      16   emDebugPowerUp
        16   -> CMU_ClockFreqGet
      72   emDebugReceiveData
        72   -> SEGGER_RTT_Read
        72   -> emDebugProcessIncoming
        72   -> emReleaseMessageBuffer
        72   -> emberFillLinkedBuffers
       0   halStackDebugActive
       8   halStackDebugPutBuffer
         0   -> swoOutput
      48   swoOutput
        48   -> emberGetLinkedBuffersByte
        48   -> halCommonCrc16
        48   -> halCommonGetInt16uMillisecondTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      16  ?_0
      24  emDebugAddInitialFraming
      64  emDebugInit
      56  emDebugPowerDown
      94  emDebugPowerUp
      46  emDebugReceiveData
      12  halStackDebugActive
      22  halStackDebugPutBuffer
      64  rtt_buffer
       4  rtt_buffer_index
       1  sequenceNumber
     196  swoOutput

 
  65 bytes in section .bss
   4 bytes in section .data
  16 bytes in section .rodata
 594 bytes in section .text
 
 594 bytes of CODE  memory
  16 bytes of CONST memory
  69 bytes of DATA  memory

Errors: none
Warnings: none
