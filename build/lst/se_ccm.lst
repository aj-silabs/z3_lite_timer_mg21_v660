###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:45
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\se_ccm.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW24D9.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\se_ccm.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"se_ccm.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\se_ccm.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\se_ccm.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\sl_crypto\src\se_ccm.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief AES-CCM abstraction based on Secure Element
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: APACHE-2.0
     10           *
     11           * This software is subject to an open source license and is distributed by
     12           * Silicon Laboratories Inc. pursuant to the terms of the Apache License,
     13           * Version 2.0 available at https://www.apache.org/licenses/LICENSE-2.0.
     14           * Such terms and conditions may be further supplemented by the Silicon Labs
     15           * Master Software License Agreement (MSLA) available at www.silabs.com and its
     16           * sections applicable to open source software.
     17           *
     18           ******************************************************************************/
     19          
     20          /*
     21           * This file includes alternative plugin implementations of various
     22           * functions in ccm.c using the Secure Element accelerator incorporated
     23           * in MCU devices from Silicon Laboratories.
     24           */
     25          
     26          #include "mbedtls/ccm.h"
     27          #include "mbedtls/aes.h"
     28          
     29          #if defined(MBEDTLS_AES_C)
     30          #if defined(MBEDTLS_CCM_ALT)
     31          
     32          #include "em_device.h"
     33          
     34          #if defined(SEMAILBOX_PRESENT)
     35          
     36          #include "em_se.h"
     37          #include "em_core.h"
     38          #include "se_management.h"
     39          #include <string.h>
     40          
     41          /*
     42           * Initialize CCM context
     43           */

   \                                 In section .text, align 2, keep-with-next
     44          void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
     45          {
     46              if( ctx == NULL ) {
   \                     mbedtls_ccm_init: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xBF1C             ITT      NE 
     47                  return;
     48              }
     49          
     50              memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
   \        0x4   0x2124             MOVNE    R1,#+36
   \        0x6   0x....'....        BNE.W    __aeabi_memclr4
     51          }
   \        0xA   0x4770             BX       LR               ;; return
     52          
     53          /*
     54           * Clear CCM context
     55           */

   \                                 In section .text, align 2, keep-with-next
     56          void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
     57          {
     58              if( ctx == NULL ) {
   \                     mbedtls_ccm_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xBF1C             ITT      NE 
     59                  return;
     60              }
     61          
     62              memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
   \        0x4   0x2124             MOVNE    R1,#+36
   \        0x6   0x....'....        BNE.W    __aeabi_memclr4
     63          }
   \        0xA   0x4770             BX       LR               ;; return
     64          
     65          /*
     66           * CCM key schedule
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
     69                                  mbedtls_cipher_id_t cipher,
     70                                  const unsigned char *key,
     71                                  unsigned int keybits )
     72          {
   \                     mbedtls_ccm_setkey: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x4614             MOV      R4,R2
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x461F             MOV      R7,R3
     73              if( ctx == NULL || key == NULL ) {
   \        0xA   0xBF18             IT       NE 
   \        0xC   0x2C00             CMPNE    R4,#+0
   \        0xE   0xD00A             BEQ.N    ??mbedtls_ccm_setkey_0
     74                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
     75              }
     76          
     77              memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
   \       0x10   0x2124             MOVS     R1,#+36
   \       0x12   0x....'....        BL       __aeabi_memclr4
     78          
     79              if ( cipher != MBEDTLS_CIPHER_ID_AES ) {
   \       0x16   0x2E02             CMP      R6,#+2
   \       0x18   0xD105             BNE.N    ??mbedtls_ccm_setkey_0
     80                  return MBEDTLS_ERR_CCM_BAD_INPUT;
     81              }
     82          
     83              if ( ( 128UL != keybits ) && ( 192UL != keybits ) && ( 256UL != keybits ) ) {
   \       0x1A   0x2F80             CMP      R7,#+128
   \       0x1C   0xBF1C             ITT      NE 
   \       0x1E   0x2FC0             CMPNE    R7,#+192
   \       0x20   0xF5B7 0x7F80      CMPNE    R7,#+256
   \       0x24   0xD002             BEQ.N    ??mbedtls_ccm_setkey_1
     84                  /* Unsupported key size */
     85                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
   \                     ??mbedtls_ccm_setkey_0: (+1)
   \       0x26   0xF06F 0x000C      MVN      R0,#+12
   \       0x2A   0xBDF2             POP      {R1,R4-R7,PC}
     86              }
     87          
     88              ctx->keybits = keybits;
   \                     ??mbedtls_ccm_setkey_1: (+1)
   \       0x2C   0x622F             STR      R7,[R5, #+32]
     89              memcpy(ctx->key, key, keybits/8);
   \       0x2E   0x08FA             LSRS     R2,R7,#+3
   \       0x30   0x4621             MOV      R1,R4
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       __aeabi_memcpy
     90          
     91              return 0;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     92          }
     93          

   \                                 In section .text, align 2, keep-with-next
     94          int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
     95                                   const unsigned char *iv, size_t iv_len,
     96                                   const unsigned char *add, size_t add_len,
     97                                   const unsigned char *input, unsigned char *output,
     98                                   unsigned char *tag, size_t tag_len )
     99          {
   \                     mbedtls_ccm_encrypt_and_tag: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB09B             SUB      SP,SP,#+108
   \        0x6   0x0004             MOVS     R4,R0
    100              unsigned char q;
    101          
    102              if( ctx == NULL || tag == NULL || iv == NULL ) {
   \        0x8   0xF06F 0x090C      MVN      R9,#+12
   \        0xC   0xBF1C             ITT      NE 
   \        0xE   0x9E28             LDRNE    R6,[SP, #+160]
   \       0x10   0x2E00             CMPNE    R6,#+0
   \       0x12   0xD024             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_0
   \       0x14   0x9201             STR      R2,[SP, #+4]
   \       0x16   0x0010             MOVS     R0,R2
   \       0x18   0xD021             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_0
    103                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    104              }
    105              if (add_len > 0 && add == NULL ) {
   \       0x1A   0x9825             LDR      R0,[SP, #+148]
   \       0x1C   0x9D24             LDR      R5,[SP, #+144]
   \       0x1E   0xB108             CBZ.N    R0,??mbedtls_ccm_encrypt_and_tag_1
   \       0x20   0x2D00             CMP      R5,#+0
   \       0x22   0xD01C             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_0
   \                     ??mbedtls_ccm_encrypt_and_tag_1: (+1)
   \       0x24   0x9100             STR      R1,[SP, #+0]
    106                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    107              }
    108              if( length > 0 && (input == NULL || output == NULL) ) {
   \       0x26   0x9F26             LDR      R7,[SP, #+152]
   \       0x28   0xF8DD 0x809C      LDR      R8,[SP, #+156]
   \       0x2C   0x0008             MOVS     R0,R1
   \       0x2E   0xD004             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_2
   \       0x30   0x2F00             CMP      R7,#+0
   \       0x32   0xBF18             IT       NE 
   \       0x34   0xF1B8 0x0F00      CMPNE    R8,#+0
   \       0x38   0xD011             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_0
    109                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    110              }
    111          
    112              if ( ctx->keybits != 128UL && ctx->keybits != 192UL && ctx->keybits != 256UL) {
   \                     ??mbedtls_ccm_encrypt_and_tag_2: (+1)
   \       0x3A   0x6A20             LDR      R0,[R4, #+32]
   \       0x3C   0x2880             CMP      R0,#+128
   \       0x3E   0xBF1C             ITT      NE 
   \       0x40   0x28C0             CMPNE    R0,#+192
   \       0x42   0xF5B0 0x7F80      CMPNE    R0,#+256
   \       0x46   0xF040 0x808C      BNE.W    ??mbedtls_ccm_encrypt_and_tag_3
   \       0x4A   0x....'....        BL       ?Subroutine1
    113                  return MBEDTLS_ERR_CCM_BAD_INPUT;
    114              }
    115          
    116              /* Test for invalid (too long) message length. This test is included here because
    117                 the SE does not implement the test. When the SE ultimately implements the test
    118                 the following test can be removed.  */
    119              q = 16 - 1 - (unsigned char) iv_len;
    120              if ( (q < sizeof(length)) && (length >= (1UL<<(q*8))) )
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x4E   0xD202             BCS.N    ??mbedtls_ccm_encrypt_and_tag_4
   \       0x50   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x54   0xD207             BCS.N    ??mbedtls_ccm_encrypt_and_tag_5
   \                     ??mbedtls_ccm_encrypt_and_tag_4: (+1)
   \       0x56   0xF8DD 0xB0A4      LDR      R11,[SP, #+164]
    121                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    122          
    123              if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
   \       0x5A   0xF1BB 0x0F02      CMP      R11,#+2
   \                     ??mbedtls_ccm_encrypt_and_tag_0: (+1)
   \       0x5E   0xF000 0x8080      BEQ.W    ??mbedtls_ccm_encrypt_and_tag_3
   \       0x62   0xF1BB 0x0F11      CMP      R11,#+17
   \                     ??mbedtls_ccm_encrypt_and_tag_5: (+1)
   \       0x66   0xD27C             BCS.N    ??mbedtls_ccm_encrypt_and_tag_3
   \       0x68   0xEA5F 0x70CB      LSLS     R0,R11,#+31
   \       0x6C   0xD479             BMI.N    ??mbedtls_ccm_encrypt_and_tag_3
    124                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    125          
    126              /* Also implies q is within bounds */
    127              if( iv_len < 7 || iv_len > 13 )
   \       0x6E   0xF1AA 0x0107      SUB      R1,R10,#+7
   \       0x72   0x2907             CMP      R1,#+7
   \       0x74   0xBF3E             ITTT     CC 
   \       0x76   0x9825             LDRCC    R0,[SP, #+148]
   \       0x78   0xF64F 0x7101      MOVWCC   R1,#+65281
   \       0x7C   0x4288             CMPCC    R0,R1
    128                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    129          
    130              if( add_len > 0xFF00 ) {
   \       0x7E   0xBF3F             ITTTT    CC 
   \       0x80   0x9800             LDRCC    R0,[SP, #+0]
   \       0x82   0x4440             ADDCC    R0,R0,R8
   \       0x84   0x....             LDRCC.N  R1,??DataTable3  ;; 0x20018000
   \       0x86   0x4288             CMPCC    R0,R1
    131                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    132              }
    133          
    134              if ((uint32_t)output + length > RAM_MEM_END) {
   \       0x88   0xD26B             BCS.N    ??mbedtls_ccm_encrypt_and_tag_3
    135                  return MBEDTLS_ERR_CCM_BAD_INPUT;
    136              }
    137          
    138              SE_Command_t command = SE_COMMAND_DEFAULT(SE_COMMAND_AES_CCM_ENCRYPT);
   \       0x8A   0xA813             ADD      R0,SP,#+76
   \       0x8C   0x....             LDR.N    R1,??DataTable3_1
   \       0x8E   0x2220             MOVS     R2,#+32
   \       0x90   0x....'....        BL       __aeabi_memcpy4
    139              SE_DataTransfer_t key = SE_DATATRANSFER_DEFAULT(ctx->key, (ctx->keybits / 8));
   \       0x94   0x....             LDR.N    R1,??DataTable3_2
   \       0x96   0x....'....        BL       ?Subroutine5
    140          
    141              SE_DataTransfer_t in_data = SE_DATATRANSFER_DEFAULT((void*)input, length);
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x9A   0x9410             STR      R4,[SP, #+64]
   \       0x9C   0x6A20             LDR      R0,[R4, #+32]
   \       0x9E   0x....             LDR.N    R2,??DataTable3_3
   \       0xA0   0x08C0             LSRS     R0,R0,#+3
   \       0xA2   0xF040 0x5000      ORR      R0,R0,#0x20000000
   \       0xA6   0x9012             STR      R0,[SP, #+72]
   \       0xA8   0xE892 0x4009      LDM      R2,{R0,R3,LR}
    142              SE_DataTransfer_t in_add = SE_DATATRANSFER_DEFAULT((void*)add, add_len);
   \       0xAC   0xAA0A             ADD      R2,SP,#+40
   \       0xAE   0xE881 0x4009      STM      R1,{R0,R3,LR}
   \       0xB2   0x970D             STR      R7,[SP, #+52]
   \       0xB4   0x9900             LDR      R1,[SP, #+0]
   \       0xB6   0x....             LDR.N    R3,??DataTable3_4
   \       0xB8   0xF041 0x5100      ORR      R1,R1,#0x20000000
   \       0xBC   0x910F             STR      R1,[SP, #+60]
   \       0xBE   0xE893 0x4081      LDM      R3,{R0,R7,LR}
   \       0xC2   0xE882 0x4081      STM      R2,{R0,R7,LR}
   \       0xC6   0x950A             STR      R5,[SP, #+40]
   \       0xC8   0x....'....        BL       ?Subroutine6
    143              SE_DataTransfer_t in_nonce = SE_DATATRANSFER_DEFAULT((void*)iv, iv_len);
   \                     ??CrossCallReturnLabel_13: (+1)
   \       0xCC   0x....             LDR.N    R2,??DataTable3_5
   \       0xCE   0xE892 0x00A8      LDM      R2,{R3,R5,R7}
   \       0xD2   0xF04A 0x5200      ORR      R2,R10,#0x20000000
   \       0xD6   0xE880 0x00A8      STM      R0,{R3,R5,R7}
   \       0xDA   0x9801             LDR      R0,[SP, #+4]
    144              SE_DataTransfer_t out_data = SE_DATATRANSFER_DEFAULT(output, length);
   \       0xDC   0xAB04             ADD      R3,SP,#+16
   \       0xDE   0x9007             STR      R0,[SP, #+28]
   \       0xE0   0x9209             STR      R2,[SP, #+36]
   \       0xE2   0x....             LDR.N    R2,??DataTable3_6
   \       0xE4   0xE892 0x40A0      LDM      R2,{R5,R7,LR}
    145              SE_DataTransfer_t out_tag = SE_DATATRANSFER_DEFAULT(tag, tag_len);
   \       0xE8   0x....             LDR.N    R2,??DataTable3_7
    146          
    147              SE_addDataInput(&command, &key);
   \       0xEA   0xA813             ADD      R0,SP,#+76
   \       0xEC   0xE883 0x40A0      STM      R3,{R5,R7,LR}
   \       0xF0   0xF8CD 0x8010      STR      R8,[SP, #+16]
   \       0xF4   0x9106             STR      R1,[SP, #+24]
   \       0xF6   0xE892 0x00A8      LDM      R2,{R3,R5,R7}
   \       0xFA   0xA901             ADD      R1,SP,#+4
   \       0xFC   0xE881 0x00A8      STM      R1,{R3,R5,R7}
   \      0x100   0x9601             STR      R6,[SP, #+4]
   \      0x102   0xF04B 0x5600      ORR      R6,R11,#0x20000000
   \      0x106   0x9603             STR      R6,[SP, #+12]
   \      0x108   0xA910             ADD      R1,SP,#+64
   \      0x10A   0x....'....        BL       SE_addDataInput
    148              SE_addDataInput(&command, &in_nonce);
   \      0x10E   0x....'....        BL       ?Subroutine3
    149              SE_addDataInput(&command, &in_add);
   \                     ??CrossCallReturnLabel_10: (+1)
   \      0x112   0xA90A             ADD      R1,SP,#+40
   \      0x114   0x....'....        BL       ??Subroutine3_0
    150              SE_addDataInput(&command, &in_data);
   \                     ??CrossCallReturnLabel_8: (+1)
   \      0x118   0xA90D             ADD      R1,SP,#+52
   \      0x11A   0x....'....        BL       ??Subroutine3_0
    151              SE_addDataOutput(&command, &out_data);
   \                     ??CrossCallReturnLabel_7: (+1)
   \      0x11E   0x....'....        BL       ?Subroutine7
    152              SE_addDataOutput(&command, &out_tag);
   \                     ??CrossCallReturnLabel_17: (+1)
   \      0x122   0xA901             ADD      R1,SP,#+4
   \      0x124   0x....'....        BL       ??Subroutine7_0
    153          
    154              SE_addParameter(&command, (ctx->keybits / 8));
   \                     ??CrossCallReturnLabel_15: (+1)
   \      0x128   0x6A21             LDR      R1,[R4, #+32]
   \      0x12A   0xA813             ADD      R0,SP,#+76
   \      0x12C   0x08C9             LSRS     R1,R1,#+3
   \      0x12E   0x....'....        BL       SE_addParameter
    155              SE_addParameter(&command, ((iv_len & 0xFFFF) << 16) | (tag_len & 0xFFFF));
   \      0x132   0x....'....        BL       ?Subroutine4
    156              SE_addParameter(&command, add_len);
   \                     ??CrossCallReturnLabel_25: (+1)
   \      0x136   0x9925             LDR      R1,[SP, #+148]
   \      0x138   0x....'....        BL       ??Subroutine9_0
    157              SE_addParameter(&command, length);
   \                     ??CrossCallReturnLabel_23: (+1)
   \      0x13C   0x9900             LDR      R1,[SP, #+0]
   \      0x13E   0x....'....        BL       ??Subroutine9_0
    158          
    159              int status = se_management_acquire();
   \                     ??CrossCallReturnLabel_22: (+1)
   \      0x142   0x....'....        BL       se_management_acquire
    160              if (status != 0) {
   \      0x146   0xB968             CBNZ.N   R0,??mbedtls_ccm_encrypt_and_tag_6
    161                  return status;
    162              }
    163          
    164              SE_executeCommand(&command);
   \      0x148   0xA813             ADD      R0,SP,#+76
   \      0x14A   0x....'....        BL       SE_executeCommand
   \      0x14E   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_18: (+1)
   \      0x152   0x6904             LDR      R4,[R0, #+16]
    165              SE_Response_t command_status = SE_readCommandResponse();
    166          
    167              se_management_release();
   \      0x154   0x....'....        BL       se_management_release
    168          
    169              if ( command_status == SE_RESPONSE_OK ) {
   \      0x158   0xF414 0x2F70      TST      R4,#0xF0000
   \      0x15C   0xBF08             IT       EQ 
   \      0x15E   0x2000             MOVEQ    R0,#+0
    170                  return 0;
   \      0x160   0xD000             BEQ.N    ??mbedtls_ccm_encrypt_and_tag_6
    171              } else {
    172                  return MBEDTLS_ERR_CCM_BAD_INPUT;
   \                     ??mbedtls_ccm_encrypt_and_tag_3: (+1)
   \      0x162   0x4648             MOV      R0,R9
    173              }
   \                     ??mbedtls_ccm_encrypt_and_tag_6: (+1)
   \      0x164   0x....             B.N      ?Subroutine0
    174          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xB01B             ADD      SP,SP,#+108
   \        0x2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable3_15  ;; 0x4c000044
   \                     ??Subroutine8_0: (+1)
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x02C9             LSLS     R1,R1,#+11
   \        0x6   0xD5FC             BPL.N    ??Subroutine8_0
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \        0x0   0xA904             ADD      R1,SP,#+16
   \                     ??Subroutine7_0: (+1)
   \        0x2   0xA813             ADD      R0,SP,#+76
   \        0x4   0x....'....        B.W      SE_addDataOutput

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0x9A25             LDR      R2,[SP, #+148]
   \        0x2   0xA807             ADD      R0,SP,#+28
   \        0x4   0xF042 0x5200      ORR      R2,R2,#0x20000000
   \        0x8   0x920C             STR      R2,[SP, #+48]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0xE891 0x100C      LDM      R1,{R2,R3,R12}
   \        0x4   0xA810             ADD      R0,SP,#+64
   \        0x6   0xA90D             ADD      R1,SP,#+52
   \        0x8   0xE880 0x100C      STM      R0,{R2,R3,R12}
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0xFA1F 0xF08B      UXTH     R0,R11
   \        0x4   0xEA40 0x410A      ORR      R1,R0,R10, LSL #+16
   \        0x8                      REQUIRE ??Subroutine9_0
   \        0x8                      ;; // Fall through to label ??Subroutine9_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine9_0: (+1)
   \        0x0   0xA813             ADD      R0,SP,#+76
   \        0x2   0x....'....        B.W      SE_addParameter

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0xA907             ADD      R1,SP,#+28
   \                     ??Subroutine3_0: (+1)
   \        0x2   0xA813             ADD      R0,SP,#+76
   \        0x4   0x....'....        B.W      SE_addDataInput

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x9900             LDR      R1,[SP, #+0]
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x00C0             LSLS     R0,R0,#+3
   \        0x6   0x4082             LSLS     R2,R2,R0
   \        0x8   0x4291             CMP      R1,R2
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x469A             MOV      R10,R3
   \        0x2   0xFA5F 0xF08A      UXTB     R0,R10
   \        0x6   0xF1C0 0x000F      RSB      R0,R0,#+15
   \        0xA   0xB2C1             UXTB     R1,R0
   \        0xC   0x2904             CMP      R1,#+4
   \        0xE   0x4770             BX       LR

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x0405'0000        DC32 67436544, 0H, 0H, 0, 0, 0, 0, 0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  
    175          

   \                                 In section .text, align 2, keep-with-next
    176          int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
    177                                const unsigned char *iv, size_t iv_len,
    178                                const unsigned char *add, size_t add_len,
    179                                const unsigned char *input, unsigned char *output,
    180                                const unsigned char *tag, size_t tag_len )
    181          {
   \                     mbedtls_ccm_auth_decrypt: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB09B             SUB      SP,SP,#+108
   \        0x6   0x0005             MOVS     R5,R0
    182              unsigned char q;
    183          
    184              if( ctx == NULL || tag == NULL || iv == NULL ) {
   \        0x8   0xF06F 0x090C      MVN      R9,#+12
   \        0xC   0xBF1C             ITT      NE 
   \        0xE   0x9F28             LDRNE    R7,[SP, #+160]
   \       0x10   0x2F00             CMPNE    R7,#+0
   \       0x12   0xD024             BEQ.N    ??mbedtls_ccm_auth_decrypt_0
   \       0x14   0x9201             STR      R2,[SP, #+4]
   \       0x16   0x0010             MOVS     R0,R2
   \       0x18   0xD021             BEQ.N    ??mbedtls_ccm_auth_decrypt_0
    185                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    186              }
    187              if (add_len > 0 && add == NULL ) {
   \       0x1A   0x9825             LDR      R0,[SP, #+148]
   \       0x1C   0x9E24             LDR      R6,[SP, #+144]
   \       0x1E   0xB108             CBZ.N    R0,??mbedtls_ccm_auth_decrypt_1
   \       0x20   0x2E00             CMP      R6,#+0
   \       0x22   0xD01C             BEQ.N    ??mbedtls_ccm_auth_decrypt_0
   \                     ??mbedtls_ccm_auth_decrypt_1: (+1)
   \       0x24   0x9100             STR      R1,[SP, #+0]
    188                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    189              }
    190              if( length > 0 && (input == NULL || output == NULL) ) {
   \       0x26   0xF8DD 0x8098      LDR      R8,[SP, #+152]
   \       0x2A   0x9C27             LDR      R4,[SP, #+156]
   \       0x2C   0x0008             MOVS     R0,R1
   \       0x2E   0xD004             BEQ.N    ??mbedtls_ccm_auth_decrypt_2
   \       0x30   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x34   0xBF18             IT       NE 
   \       0x36   0x2C00             CMPNE    R4,#+0
   \       0x38   0xD011             BEQ.N    ??mbedtls_ccm_auth_decrypt_0
    191                  return ( MBEDTLS_ERR_CCM_BAD_INPUT );
    192              }
    193          
    194              if ( ctx->keybits != 128UL && ctx->keybits != 192UL && ctx->keybits != 256UL) {
   \                     ??mbedtls_ccm_auth_decrypt_2: (+1)
   \       0x3A   0x6A28             LDR      R0,[R5, #+32]
   \       0x3C   0x2880             CMP      R0,#+128
   \       0x3E   0xBF1C             ITT      NE 
   \       0x40   0x28C0             CMPNE    R0,#+192
   \       0x42   0xF5B0 0x7F80      CMPNE    R0,#+256
   \       0x46   0xF040 0x8097      BNE.W    ??mbedtls_ccm_auth_decrypt_3
   \       0x4A   0x....'....        BL       ?Subroutine1
    195                  return MBEDTLS_ERR_CCM_BAD_INPUT;
    196              }
    197          
    198              /* Test for invalid (too long) message length. This test is included here because
    199                 the SE does not implement the test. When the SE ultimately implements the test
    200                 the following test can be removed.  */
    201              q = 16 - 1 - (unsigned char) iv_len;
    202              if ( (q < sizeof(length)) && (length >= (1UL<<(q*8))) )
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x4E   0xD202             BCS.N    ??mbedtls_ccm_auth_decrypt_4
   \       0x50   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x54   0xD219             BCS.N    ??mbedtls_ccm_auth_decrypt_5
   \                     ??mbedtls_ccm_auth_decrypt_4: (+1)
   \       0x56   0xF8DD 0xB0A4      LDR      R11,[SP, #+164]
    203                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    204          
    205              if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
   \       0x5A   0xF1BB 0x0F02      CMP      R11,#+2
   \                     ??mbedtls_ccm_auth_decrypt_0: (+1)
   \       0x5E   0xF000 0x808B      BEQ.W    ??mbedtls_ccm_auth_decrypt_3
   \       0x62   0xF1BB 0x0F11      CMP      R11,#+17
   \       0x66   0xD210             BCS.N    ??mbedtls_ccm_auth_decrypt_5
   \       0x68   0xEA5F 0x70CB      LSLS     R0,R11,#+31
   \       0x6C   0xF100 0x8084      BMI.W    ??mbedtls_ccm_auth_decrypt_3
    206                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    207          
    208              /* Also implies q is within bounds */
    209              if( iv_len < 7 || iv_len > 13 )
   \       0x70   0xF1AA 0x0107      SUB      R1,R10,#+7
   \       0x74   0x2907             CMP      R1,#+7
   \       0x76   0xBF3E             ITTT     CC 
   \       0x78   0x9825             LDRCC    R0,[SP, #+148]
   \       0x7A   0xF64F 0x7101      MOVWCC   R1,#+65281
   \       0x7E   0x4288             CMPCC    R0,R1
    210                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    211          
    212              if( add_len > 0xFF00 ) {
   \       0x80   0xBF3F             ITTTT    CC 
   \       0x82   0x9800             LDRCC    R0,[SP, #+0]
   \       0x84   0x1900             ADDCC    R0,R0,R4
   \       0x86   0x....             LDRCC.N  R1,??DataTable3  ;; 0x20018000
   \       0x88   0x4288             CMPCC    R0,R1
    213                  return( MBEDTLS_ERR_CCM_BAD_INPUT );
    214              }
    215          
    216              if ((uint32_t)output + length > RAM_MEM_END) {
   \                     ??mbedtls_ccm_auth_decrypt_5: (+1)
   \       0x8A   0xD275             BCS.N    ??mbedtls_ccm_auth_decrypt_3
    217                  return MBEDTLS_ERR_CCM_BAD_INPUT;
    218              }
    219          
    220              SE_Command_t command = SE_COMMAND_DEFAULT(SE_COMMAND_AES_CCM_DECRYPT);
   \       0x8C   0xA813             ADD      R0,SP,#+76
   \       0x8E   0x....             LDR.N    R1,??DataTable3_8
   \       0x90   0x2220             MOVS     R2,#+32
   \       0x92   0x....'....        BL       __aeabi_memcpy4
    221              SE_DataTransfer_t key = SE_DATATRANSFER_DEFAULT(ctx->key, (ctx->keybits / 8));
   \       0x96   0x....             LDR.N    R1,??DataTable3_9
   \       0x98   0x....'....        BL       ?Subroutine5
    222          
    223              SE_DataTransfer_t in_data = SE_DATATRANSFER_DEFAULT((void*)input, length);
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x9C   0x9510             STR      R5,[SP, #+64]
   \       0x9E   0x6A28             LDR      R0,[R5, #+32]
   \       0xA0   0x....             LDR.N    R2,??DataTable3_10
   \       0xA2   0x08C0             LSRS     R0,R0,#+3
   \       0xA4   0xF040 0x5000      ORR      R0,R0,#0x20000000
   \       0xA8   0x9012             STR      R0,[SP, #+72]
   \       0xAA   0xE892 0x4009      LDM      R2,{R0,R3,LR}
    224              SE_DataTransfer_t in_add = SE_DATATRANSFER_DEFAULT((void*)add, add_len);
   \       0xAE   0xAA0A             ADD      R2,SP,#+40
   \       0xB0   0xE881 0x4009      STM      R1,{R0,R3,LR}
   \       0xB4   0xF8CD 0x8034      STR      R8,[SP, #+52]
   \       0xB8   0x9900             LDR      R1,[SP, #+0]
   \       0xBA   0x....             LDR.N    R3,??DataTable3_11
   \       0xBC   0xF041 0x5100      ORR      R1,R1,#0x20000000
   \       0xC0   0x910F             STR      R1,[SP, #+60]
   \       0xC2   0xE893 0x4101      LDM      R3,{R0,R8,LR}
   \       0xC6   0xE882 0x4101      STM      R2,{R0,R8,LR}
   \       0xCA   0x960A             STR      R6,[SP, #+40]
   \       0xCC   0x....'....        BL       ?Subroutine6
    225              SE_DataTransfer_t in_nonce = SE_DATATRANSFER_DEFAULT((void*)iv, iv_len);
   \                     ??CrossCallReturnLabel_14: (+1)
   \       0xD0   0x....             LDR.N    R2,??DataTable3_12
   \       0xD2   0xE892 0x4048      LDM      R2,{R3,R6,LR}
   \       0xD6   0xF04A 0x5200      ORR      R2,R10,#0x20000000
   \       0xDA   0xE880 0x4048      STM      R0,{R3,R6,LR}
   \       0xDE   0x9801             LDR      R0,[SP, #+4]
    226              SE_DataTransfer_t out_data = SE_DATATRANSFER_DEFAULT(output, length);
   \       0xE0   0xAB04             ADD      R3,SP,#+16
   \       0xE2   0x9007             STR      R0,[SP, #+28]
   \       0xE4   0x9209             STR      R2,[SP, #+36]
   \       0xE6   0x....             LDR.N    R2,??DataTable3_13
   \       0xE8   0xE892 0x4140      LDM      R2,{R6,R8,LR}
    227              SE_DataTransfer_t in_tag = SE_DATATRANSFER_DEFAULT((void*)tag, tag_len);
   \       0xEC   0x....             LDR.N    R2,??DataTable3_14
    228          
    229              SE_addDataInput(&command, &key);
   \       0xEE   0xA813             ADD      R0,SP,#+76
   \       0xF0   0xE883 0x4140      STM      R3,{R6,R8,LR}
   \       0xF4   0x9404             STR      R4,[SP, #+16]
   \       0xF6   0x9106             STR      R1,[SP, #+24]
   \       0xF8   0xE892 0x4048      LDM      R2,{R3,R6,LR}
   \       0xFC   0xA901             ADD      R1,SP,#+4
   \       0xFE   0xE881 0x4048      STM      R1,{R3,R6,LR}
   \      0x102   0x9701             STR      R7,[SP, #+4]
   \      0x104   0xF04B 0x5700      ORR      R7,R11,#0x20000000
   \      0x108   0x9703             STR      R7,[SP, #+12]
   \      0x10A   0xA910             ADD      R1,SP,#+64
   \      0x10C   0x....'....        BL       SE_addDataInput
    230              SE_addDataInput(&command, &in_nonce);
   \      0x110   0x....'....        BL       ?Subroutine3
    231              SE_addDataInput(&command, &in_add);
   \                     ??CrossCallReturnLabel_9: (+1)
   \      0x114   0xA90A             ADD      R1,SP,#+40
   \      0x116   0x....'....        BL       ??Subroutine3_0
    232              SE_addDataInput(&command, &in_data);
   \                     ??CrossCallReturnLabel_6: (+1)
   \      0x11A   0xA90D             ADD      R1,SP,#+52
   \      0x11C   0x....'....        BL       ??Subroutine3_0
    233              SE_addDataOutput(&command, &out_data);
   \                     ??CrossCallReturnLabel_5: (+1)
   \      0x120   0x....'....        BL       ?Subroutine7
    234              SE_addDataInput(&command, &in_tag);
   \                     ??CrossCallReturnLabel_16: (+1)
   \      0x124   0xA901             ADD      R1,SP,#+4
   \      0x126   0x....'....        BL       ??Subroutine3_0
    235          
    236              SE_addParameter(&command, (ctx->keybits / 8));
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x12A   0x6A29             LDR      R1,[R5, #+32]
   \      0x12C   0xA813             ADD      R0,SP,#+76
   \      0x12E   0x08C9             LSRS     R1,R1,#+3
   \      0x130   0x....'....        BL       SE_addParameter
    237              SE_addParameter(&command, ((iv_len & 0xFFFF) << 16) | (tag_len & 0xFFFF));
   \      0x134   0x....'....        BL       ?Subroutine4
    238              SE_addParameter(&command, add_len);
   \                     ??CrossCallReturnLabel_24: (+1)
   \      0x138   0x9925             LDR      R1,[SP, #+148]
   \      0x13A   0x....'....        BL       ??Subroutine9_0
    239              SE_addParameter(&command, length);
   \                     ??CrossCallReturnLabel_21: (+1)
   \      0x13E   0x9900             LDR      R1,[SP, #+0]
   \      0x140   0x....'....        BL       ??Subroutine9_0
    240          
    241              int status = se_management_acquire();
   \                     ??CrossCallReturnLabel_20: (+1)
   \      0x144   0x....'....        BL       se_management_acquire
    242              if (status != 0) {
   \      0x148   0xB9B8             CBNZ.N   R0,??mbedtls_ccm_auth_decrypt_6
    243                  return status;
    244              }
    245          
    246              SE_executeCommand(&command);
   \      0x14A   0xA813             ADD      R0,SP,#+76
   \      0x14C   0x....'....        BL       SE_executeCommand
   \      0x150   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_19: (+1)
   \      0x154   0x6905             LDR      R5,[R0, #+16]
    247              SE_Response_t command_status = SE_readCommandResponse();
    248          
    249              se_management_release();
   \      0x156   0x....'....        BL       se_management_release
   \      0x15A   0xF405 0x2570      AND      R5,R5,#0xF0000
    250          
    251              if ( command_status == SE_RESPONSE_OK ) {
   \      0x15E   0xB90D             CBNZ.N   R5,??mbedtls_ccm_auth_decrypt_7
    252                  return 0;
   \      0x160   0x2000             MOVS     R0,#+0
   \      0x162   0xE00A             B.N      ??mbedtls_ccm_auth_decrypt_6
    253              } else if ( command_status == SE_RESPONSE_INVALID_SIGNATURE ) {
   \                     ??mbedtls_ccm_auth_decrypt_7: (+1)
   \      0x164   0xF5B5 0x3F40      CMP      R5,#+196608
   \      0x168   0xD106             BNE.N    ??mbedtls_ccm_auth_decrypt_3
    254                  memset( output, 0, length );
   \      0x16A   0x9900             LDR      R1,[SP, #+0]
   \      0x16C   0x4620             MOV      R0,R4
   \      0x16E   0x....'....        BL       __aeabi_memclr
    255                  return MBEDTLS_ERR_CCM_AUTH_FAILED;
   \      0x172   0xF06F 0x000E      MVN      R0,#+14
   \      0x176   0xE000             B.N      ??mbedtls_ccm_auth_decrypt_6
    256              } else {
    257                  return MBEDTLS_ERR_CCM_BAD_INPUT;
   \                     ??mbedtls_ccm_auth_decrypt_3: (+1)
   \      0x178   0x4648             MOV      R0,R9
    258              }
   \                     ??mbedtls_ccm_auth_decrypt_6: (+1)
   \      0x17A                      REQUIRE ?Subroutine0
   \      0x17A                      ;; // Fall through to label ?Subroutine0
    259          }

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x0406'0000        DC32 67502080, 0H, 0H, 0, 0, 0, 0, 0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x0000'0000        DC32 0H, 1H, 0
   \              0x0000'0001  
   \              0x0000'0000  

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x2001'8000        DC32     0x20018000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0x4C00'0044        DC32     0x4c000044
    260          
    261          #endif /* SEMAILBOX_PRESENT */
    262          
    263          #endif /* MBEDTLS_CCM_ALT */
    264          
    265          #endif /* MBEDTLS_AES_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   mbedtls_ccm_auth_decrypt
       144   -> SE_addDataInput
       144   -> SE_addDataOutput
       144   -> SE_addParameter
       144   -> SE_executeCommand
       144   -> __aeabi_memclr
       144   -> __aeabi_memcpy4
       144   -> se_management_acquire
       144   -> se_management_release
     144   mbedtls_ccm_encrypt_and_tag
       144   -> SE_addDataInput
       144   -> SE_addDataOutput
       144   -> SE_addParameter
       144   -> SE_executeCommand
       144   -> __aeabi_memcpy4
       144   -> se_management_acquire
       144   -> se_management_release
       0   mbedtls_ccm_free
         0   -> __aeabi_memclr4
       0   mbedtls_ccm_init
         0   -> __aeabi_memclr4
      24   mbedtls_ccm_setkey
        24   -> __aeabi_memclr4
        24   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       6  ??Subroutine9_0
       6  ?Subroutine0
      16  ?Subroutine1
      12  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
      14  ?Subroutine5
      12  ?Subroutine6
       8  ?Subroutine7
      10  ?Subroutine8
      32  ?_0
      12  ?_1
      12  ?_10
      12  ?_11
      12  ?_12
      12  ?_13
      12  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
      32  ?_7
      12  ?_8
      12  ?_9
     378  mbedtls_ccm_auth_decrypt
     358  mbedtls_ccm_encrypt_and_tag
      12  mbedtls_ccm_free
      12  mbedtls_ccm_init
      60  mbedtls_ccm_setkey

 
 208 bytes in section .rodata
 984 bytes in section .text
 
 984 bytes of CODE  memory
 208 bytes of CONST memory

Errors: none
Warnings: none
