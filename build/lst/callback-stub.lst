###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:23
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\callback-stub.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWDF3C.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\callback-stub.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"callback-stub.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\callback-stub.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\callback-stub.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\callback-stub.c
      1          // This file is generated by Simplicity Studio.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          #include "hal/hal.h"
     10          #include EMBER_AF_API_NETWORK_STEERING
     11          
     12          
     13          
     14          /** @brief Add To Current App Tasks
     15           *
     16           * This function is only useful to sleepy end devices.  This function will note
     17           * the passed item as part of a set of tasks the application has outstanding
     18           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
     19           * application behaves with regard to sleeping and polling.  Until the
     20           * outstanding task is completed, the device may poll more frequently and sleep
     21           * less often.
     22           *
     23           * @param tasks   Ver.: always
     24           */

   \                                 In section .text, align 2, keep-with-next
     25          void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks)
     26          {
     27          }
   \                     emberAfAddToCurrentAppTasksCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     28          
     29          /** @brief Allow Network Write Attribute
     30           *
     31           * This function is called by the application framework before it writes an
     32           * attribute in response to a write attribute request from an external device.
     33           * The value passed into this callback is the value to which the attribute is to
     34           * be set by the framework.
     35                  Example:	In mirroring simple metering data
     36           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     37           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     38           * attributes on its mirror. The-meter-mirror sample application, located in
     39           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     40           * write simple metering attributes on the mirror regardless of the fact that
     41           * most simple metering attributes are defined as read-only by the ZigBee
     42           * specification.
     43                  Note:	The ZCL specification does not (as of this
     44           * writing) specify any permission-level security for writing writeable
     45           * attributes. As far as the ZCL specification is concerned, if an attribute is
     46           * writeable, any device that has a link key for the device should be able to
     47           * write that attribute. Furthermore if an attribute is read only, it should not
     48           * be written over the air. Thus, if you implement permissions for writing
     49           * attributes as a feature, you MAY be operating outside the specification. This
     50           * is unlikely to be a problem for writing read-only attributes, but it may be a
     51           * problem for attributes that are writeable according to the specification but
     52           * restricted by the application implementing this callback.
     53           *
     54           * @param endpoint   Ver.: always
     55           * @param clusterId   Ver.: always
     56           * @param attributeId   Ver.: always
     57           * @param mask   Ver.: always
     58           * @param manufacturerCode   Ver.: always
     59           * @param value   Ver.: always
     60           * @param type   Ver.: always
     61           */

   \                                 In section .text, align 2, keep-with-next
     62          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(uint8_t endpoint,
     63                                                                                    EmberAfClusterId clusterId,
     64                                                                                    EmberAfAttributeId attributeId,
     65                                                                                    uint8_t mask,
     66                                                                                    uint16_t manufacturerCode,
     67                                                                                    uint8_t* value,
     68                                                                                    uint8_t type)
     69          {
     70            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
     71          }
     72          
     73          /** @brief Attribute Read Access
     74           *
     75           * This function is called whenever the Application Framework needs to check
     76           * access permission for an attribute read.
     77           *
     78           * @param endpoint   Ver.: always
     79           * @param clusterId   Ver.: always
     80           * @param manufacturerCode   Ver.: always
     81           * @param attributeId   Ver.: always
     82           */

   \                                 In section .text, align 2, keep-with-next
     83          bool emberAfAttributeReadAccessCallback(uint8_t endpoint,
     84                                                  EmberAfClusterId clusterId,
     85                                                  uint16_t manufacturerCode,
     86                                                  uint16_t attributeId)
     87          {
     88            return true;
   \                     emberAfAttributeReadAccessCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
     89          }
     90          
     91          /** @brief Attribute Write Access
     92           *
     93           * This function is called whenever the Application Framework needs to check
     94           * access permission for an attribute write.
     95           *
     96           * @param endpoint   Ver.: always
     97           * @param clusterId   Ver.: always
     98           * @param manufacturerCode   Ver.: always
     99           * @param attributeId   Ver.: always
    100           */

   \                                 In section .text, align 2, keep-with-next
    101          bool emberAfAttributeWriteAccessCallback(uint8_t endpoint,
    102                                                   EmberAfClusterId clusterId,
    103                                                   uint16_t manufacturerCode,
    104                                                   uint16_t attributeId)
    105          {
    106            return true;
   \                     emberAfAttributeWriteAccessCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    107          }
    108          
    109          /** @brief Key Establishment Cluster Client Command Received
    110           *
    111           * This function is called by the application framework when a server-to-client
    112           * key establishment command is received but has yet to be handled by the
    113           * framework code.  This function should return a bool value indicating whether
    114           * the command has been handled by the application code and should not be
    115           * further processed by the framework.
    116           *
    117           * @param cmd   Ver.: always
    118           */

   \                                 In section .text, align 2, keep-with-next
    119          bool emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd)
    120          {
    121            return false;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    122          }
    123          
    124          /** @brief Cluster Init
    125           *
    126           * This function is called when a specific cluster is initialized. It gives the
    127           * application an opportunity to take care of cluster initialization procedures.
    128           * It is called exactly once for each endpoint where cluster is present.
    129           *
    130           * @param endpoint   Ver.: always
    131           * @param clusterId   Ver.: always
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          void emberAfClusterInitCallback(uint8_t endpoint,
    134                                          EmberAfClusterId clusterId)
    135          {
    136          }
   \                     emberAfClusterInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    137          
    138          /** @brief Cluster Security Custom
    139           *
    140           * This callback is fired when determining if APS encryption is required for a
    141           * cluster outside of the specification's required clusters.  In other words,
    142           * for the Smart Energy profile this would be a cluster beyond the list that
    143           * normally requires APS encryption.
    144           *
    145           * @param profileId The profile ID  Ver.: always
    146           * @param clusterId The cluster ID  Ver.: always
    147           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    148           * always
    149           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          bool emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    152                                                    EmberAfClusterId clusterId,
    153                                                    bool incoming,
    154                                                    uint8_t commandId)
    155          {
    156            // By default, assume APS encryption is not required.
    157            return false;
   \                     emberAfClusterSecurityCustomCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    158          }
    159          
    160          /** @brief Configure Reporting Response
    161           *
    162           * This function is called by the application framework when a Configure
    163           * Reporting Response command is received from an external device.  The
    164           * application should return true if the message was processed or false if it
    165           * was not.
    166           *
    167           * @param clusterId The cluster identifier of this response.  Ver.: always
    168           * @param buffer Buffer containing the list of attribute status records.  Ver.:
    169           * always
    170           * @param bufLen The length in bytes of the list.  Ver.: always
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          bool emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
    173                                                         uint8_t *buffer,
    174                                                         uint16_t bufLen)
    175          {
    176            return false;
   \                     emberAfConfigureReportingResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    177          }
    178          
    179          /** @brief Default Response
    180           *
    181           * This function is called by the application framework when a Default Response
    182           * command is received from an external device.  The application should return
    183           * true if the message was processed or false if it was not.
    184           *
    185           * @param clusterId The cluster identifier of this response.  Ver.: always
    186           * @param commandId The command identifier to which this is a response.  Ver.:
    187           * always
    188           * @param status Specifies either SUCCESS or the nature of the error that was
    189           * detected in the received command.  Ver.: always
    190           */

   \                                 In section .text, align 2, keep-with-next
    191          bool emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
    192                                              uint8_t commandId,
    193                                              EmberAfStatus status)
    194          {
    195            return false;
   \                     emberAfDefaultResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    196          }
    197          
    198          /** @brief Discover Attributes Response
    199           *
    200           * This function is called by the application framework when a Discover
    201           * Attributes Response or Discover Attributes Extended Response command is
    202           * received from an external device.  The Discover Attributes Response command
    203           * contains a bool indicating if discovery is complete and a list of zero or
    204           * more attribute identifier/type records. The final argument indicates whether
    205           * the response is in the extended format or not.  The application should return
    206           * true if the message was processed or false if it was not.
    207           *
    208           * @param clusterId The cluster identifier of this response.  Ver.: always
    209           * @param discoveryComplete Indicates whether there are more attributes to be
    210           * discovered.  true if there are no more attributes to be discovered.  Ver.:
    211           * always
    212           * @param buffer Buffer containing the list of attribute identifier/type
    213           * records.  Ver.: always
    214           * @param bufLen The length in bytes of the list.  Ver.: always
    215           * @param extended Indicates whether the response is in the extended format or
    216           * not.  Ver.: always
    217           */

   \                                 In section .text, align 2, keep-with-next
    218          bool emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
    219                                                         bool discoveryComplete,
    220                                                         uint8_t *buffer,
    221                                                         uint16_t bufLen,
    222                                                         bool extended)
    223          {
    224            return false;
   \                     emberAfDiscoverAttributesResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    225          }
    226          
    227          /** @brief Discover Commands Generated Response
    228           *
    229           * This function is called by the framework when Discover Commands Generated
    230           * Response is received.
    231           *
    232           * @param clusterId The cluster identifier of this response.  Ver.: always
    233           * @param manufacturerCode Manufacturer code  Ver.: always
    234           * @param discoveryComplete Indicates whether there are more commands to be
    235           * discovered.  Ver.: always
    236           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    237           * always
    238           * @param commandIdCount The length of bytes of the list, whish is the same as
    239           * the number of identifiers.  Ver.: always
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          bool emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    242                                                                uint16_t manufacturerCode,
    243                                                                bool discoveryComplete,
    244                                                                uint8_t *commandIds,
    245                                                                uint16_t commandIdCount)
    246          {
    247            return false;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    248          }
    249          
    250          /** @brief Discover Commands Received Response
    251           *
    252           * This function is called by the framework when Discover Commands Received
    253           * Response is received.
    254           *
    255           * @param clusterId The cluster identifier of this response.  Ver.: always
    256           * @param manufacturerCode Manufacturer code  Ver.: always
    257           * @param discoveryComplete Indicates whether there are more commands to be
    258           * discovered.  Ver.: always
    259           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    260           * always
    261           * @param commandIdCount The length of bytes of the list, whish is the same as
    262           * the number of identifiers.  Ver.: always
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          bool emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    265                                                               uint16_t manufacturerCode,
    266                                                               bool discoveryComplete,
    267                                                               uint8_t *commandIds,
    268                                                               uint16_t commandIdCount)
    269          {
    270            return false;
   \                     emberAfDiscoverCommandsReceivedResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    271          }
    272          
    273          /** @brief Eeprom Init
    274           *
    275           * Tells the system to initialize the EEPROM if it is not already initialized.
    276           *
    277           */

   \                                 In section .text, align 2, keep-with-next
    278          void emberAfEepromInitCallback(void)
    279          {
    280          }
   \                     emberAfEepromInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    281          
    282          /** @brief Eeprom Note Initialized State
    283           *
    284           * Records the state of the EEPROM so that an intelligent driver (like the
    285           * EEPROM plugin) can re-initialize the driver prior to any calls to it.
    286           *
    287           * @param state The state of the EEPROM, false=re-initalization needed,
    288           * true=no-re-init needed  Ver.: always
    289           */

   \                                 In section .text, align 2, keep-with-next
    290          void emberAfEepromNoteInitializedStateCallback(bool state)
    291          {
    292          }
   \                     emberAfEepromNoteInitializedStateCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    293          
    294          /** @brief Eeprom Shutdown
    295           *
    296           * Tells the system to shutdown the EEPROM if it is not already shutdown.
    297           *
    298           */

   \                                 In section .text, align 2, keep-with-next
    299          void emberAfEepromShutdownCallback(void)
    300          {
    301          }
   \                     emberAfEepromShutdownCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    302          
    303          /** @brief External Attribute Read
    304           *
    305           * Like emberAfExternalAttributeWriteCallback above, this function is called
    306           * when the framework needs to read an attribute that is not stored within the
    307           * Application Framework's data structures.
    308                  All of the important
    309           * information about the attribute itself is passed as a pointer to an
    310           * EmberAfAttributeMetadata struct, which is stored within the application and
    311           * used to manage the attribute. A complete description of the
    312           * EmberAfAttributeMetadata struct is provided in
    313           * app/framework/include/af-types.h
    314                  This function assumes that the
    315           * application is able to read the attribute, write it into the passed buffer,
    316           * and return immediately. Any attributes that require a state machine for
    317           * reading and writing are not really candidates for externalization at the
    318           * present time. The Application Framework does not currently include a state
    319           * machine for reading or writing attributes that must take place across a
    320           * series of application ticks. Attributes that cannot be read in a timely
    321           * manner should be stored within the Application Framework and updated
    322           * occasionally by the application code from within the
    323           * emberAfMainTickCallback.
    324                  If the application was successfully able to
    325           * read the attribute and write it into the passed buffer, it should return a
    326           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    327           * application was not able to read the attribute.
    328           *
    329           * @param endpoint   Ver.: always
    330           * @param clusterId   Ver.: always
    331           * @param attributeMetadata   Ver.: always
    332           * @param manufacturerCode   Ver.: always
    333           * @param buffer   Ver.: always
    334           */

   \                                 In section .text, align 2, keep-with-next
    335          EmberAfStatus emberAfExternalAttributeReadCallback(uint8_t endpoint,
    336                                                             EmberAfClusterId clusterId,
    337                                                             EmberAfAttributeMetadata *attributeMetadata,
    338                                                             uint16_t manufacturerCode,
    339                                                             uint8_t *buffer)
    340          {
    341            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    342          }
    343          
    344          /** @brief External Attribute Write
    345           *
    346           * This function is called whenever the Application Framework needs to write an
    347           * attribute which is not stored within the data structures of the Application
    348           * Framework itself. One of the new features in Version 2 is the ability to
    349           * store attributes outside the Framework. This is particularly useful for
    350           * attributes that do not need to be stored because they can be read off the
    351           * hardware when they are needed, or are stored in some central location used by
    352           * many modules within the system. In this case, you can indicate that the
    353           * attribute is stored externally. When the framework needs to write an external
    354           * attribute, it makes a call to this callback.
    355                  This callback is very
    356           * useful for host micros which need to store attributes in persistent memory.
    357           * Because each host micro (used with an Ember NCP) has its own type of
    358           * persistent memory storage, the Application Framework does not include the
    359           * ability to mark attributes as stored in flash the way that it does for Ember
    360           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    361           * in persistent memory should be marked as external and accessed through the
    362           * external read and write callbacks. Any host code associated with the
    363           * persistent storage should be implemented within this callback.
    364                  All of
    365           * the important information about the attribute itself is passed as a pointer
    366           * to an EmberAfAttributeMetadata struct, which is stored within the application
    367           * and used to manage the attribute. A complete description of the
    368           * EmberAfAttributeMetadata struct is provided in
    369           * app/framework/include/af-types.h.
    370                  This function assumes that the
    371           * application is able to write the attribute and return immediately. Any
    372           * attributes that require a state machine for reading and writing are not
    373           * candidates for externalization at the present time. The Application Framework
    374           * does not currently include a state machine for reading or writing attributes
    375           * that must take place across a series of application ticks. Attributes that
    376           * cannot be written immediately should be stored within the Application
    377           * Framework and updated occasionally by the application code from within the
    378           * emberAfMainTickCallback.
    379                  If the application was successfully able to
    380           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    381           * other return value indicates the application was not able to write the
    382           * attribute.
    383           *
    384           * @param endpoint   Ver.: always
    385           * @param clusterId   Ver.: always
    386           * @param attributeMetadata   Ver.: always
    387           * @param manufacturerCode   Ver.: always
    388           * @param buffer   Ver.: always
    389           */

   \                                 In section .text, align 2, keep-with-next
    390          EmberAfStatus emberAfExternalAttributeWriteCallback(uint8_t endpoint,
    391                                                              EmberAfClusterId clusterId,
    392                                                              EmberAfAttributeMetadata *attributeMetadata,
    393                                                              uint16_t manufacturerCode,
    394                                                              uint8_t *buffer)
    395          {
    396            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    397          }
    398          
    399          /** @brief Find Unused Pan Id And Form
    400           *
    401           * This function is called by the framework to search for an unused PAN id and
    402           * form a new network.  The application should return EMBER_SUCCESS if the
    403           * operation was initiated successfully.
    404           *
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          EmberStatus emberAfFindUnusedPanIdAndFormCallback(void)
    407          {
    408            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfFindUnusedPanIdAndFormCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
    409          }
    410          
    411          /** @brief Get Current App Tasks
    412           *
    413           * This function is only useful to sleepy end devices.  This function will
    414           * return the set of tasks the application has outstanding.  These tasks affect
    415           * how the application behaves with regard to sleeping and polling.
    416           *
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void)
    419          {
    420            return 0;
   \                     emberAfGetCurrentAppTasksCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    421          }
    422          
    423          /** @brief Get Current Poll Control
    424           *
    425           * This function will retrieve the current poll control that the system is using
    426           * for the current network.  This is determined by examining all the scheduled
    427           * events and obtaining the most restrictive poll control context across all
    428           * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
    429           * EMBER_AF_LONG_POLL.
    430           *
    431           */

   \                                 In section .text, align 2, keep-with-next
    432          EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void)
    433          {
    434            return EMBER_AF_LONG_POLL;
   \                     emberAfGetCurrentPollControlCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    435          }
    436          
    437          /** @brief Get Current Poll Interval Ms
    438           *
    439           * This function is only useful to end devices.  This function will return the
    440           * current poll interval (in milliseconds) for the current network.  This
    441           * interval is the maximum amount of time a child is currently waiting between
    442           * polls of its parent.
    443           *
    444           */

   \                                 In section .text, align 2, keep-with-next
    445          uint32_t emberAfGetCurrentPollIntervalMsCallback(void)
    446          {
    447            return 0;
   \                     emberAfGetCurrentPollIntervalMsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    448          }
    449          
    450          /** @brief Get Current Poll Interval Qs
    451           *
    452           * This function is only useful to end devices.  This function will return the
    453           * current poll interval (in quarter seconds) for the current network.  This
    454           * interval is the maximum amount of time a child is currently waiting between
    455           * polls of its parent.
    456           *
    457           */

   \                                 In section .text, align 2, keep-with-next
    458          uint32_t emberAfGetCurrentPollIntervalQsCallback(void)
    459          {
    460            return 0;
   \                     emberAfGetCurrentPollIntervalQsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    461          }
    462          
    463          /** @brief Get Current Sleep Control
    464           *
    465           * This function will retrieve the current sleep control that the system is
    466           * using.  This is determined by examining all the scheduled events and
    467           * obtaining the most restrictive sleep control context across all events.  The
    468           * most restrictive sleep control is EMBER_AF_STAY_AWAKE followed by
    469           * EMBER_AF_OK_TO_SLEEP.
    470           *
    471           */

   \                                 In section .text, align 2, keep-with-next
    472          EmberAfEventSleepControl emberAfGetCurrentSleepControlCallback(void)
    473          {
    474            return EMBER_AF_OK_TO_SLEEP;
   \                     emberAfGetCurrentSleepControlCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    475          }
    476          
    477          /** @brief Get Current Time
    478           *
    479           * This callback is called when device attempts to get current time from the
    480           * hardware. If this device has means to retrieve exact time, then this method
    481           * should implement it. If the callback can't provide the exact time it should
    482           * return 0 to indicate failure. Default action is to return 0, which indicates
    483           * that device does not have access to real time.
    484           *
    485           */

   \                                 In section .text, align 2, keep-with-next
    486          uint32_t emberAfGetCurrentTimeCallback(void)
    487          {
    488            return 0;
   \                     emberAfGetCurrentTimeCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    489          }
    490          
    491          /** @brief Get Default Poll Control
    492           *
    493           * This function will retrieve the default poll control for the current network
    494           * as previously set by emberAfSetDefaultPollControlCallback().  The default
    495           * poll control will limit whether the network can long poll.
    496           *
    497           */

   \                                 In section .text, align 2, keep-with-next
    498          EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void)
    499          {
    500            return EMBER_AF_LONG_POLL;
   \                     emberAfGetDefaultPollControlCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    501          }
    502          
    503          /** @brief Get Default Sleep Control
    504           *
    505           * This function will retrieve the default sleep control the system is using as
    506           * previously set by emberAfSetDefaultSleepControlCallback().  The default sleep
    507           * control will limit whether the device can sleep.
    508           *
    509           */

   \                                 In section .text, align 2, keep-with-next
    510          EmberAfEventSleepControl emberAfGetDefaultSleepControlCallback(void)
    511          {
    512            return EMBER_AF_OK_TO_SLEEP;
   \                     emberAfGetDefaultSleepControlCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    513          }
    514          
    515          /** @brief Get Endpoint By Index
    516           *
    517           * Get the endpoint number based on the passed index.  By default the framework
    518           * handles this by managing endpoints based on the precompiled configuration
    519           * defined in AppBuilder.  This callback can override this behavior at runtime
    520           * and provide additional endpoints or different data than the compiled values. 
    521           * If the index is overridden than the callback shall return true and set the
    522           * endpointReturn parameter accordingly. A value of 0xFF means the endpoint
    523           * doesn't exist at that index.
    524                  Otherwise false must be returned by the
    525           * callback and the default framework behavior will be executed.  This is only
    526           * applicable to the SOC devices.
    527           *
    528           * @param index The index of the endpoint.  Ver.: always
    529           * @param endpointReturn The value of endpoint.  Ver.: always
    530           */

   \                                 In section .text, align 2, keep-with-next
    531          bool emberAfGetEndpointByIndexCallback(uint8_t index,
    532                                                 uint8_t* endpointReturn)
    533          {
    534            return false;
   \                     emberAfGetEndpointByIndexCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    535          }
    536          
    537          /** @brief Get Endpoint Description
    538           *
    539           * This callback is called by the framework whenever it receives a ZDO request
    540           * to enumerate the details about an endpoint.  By default the framework
    541           * provides the information based on the precompiled endpoint information as
    542           * defined in AppBuilder.  This callback can override that behavior at runtime
    543           * and return different information.  If the endpoint information is being
    544           * overridden then the callback must return true.  Otherwise it should return
    545           * false, which allows the framework to perform its default behavior.  This is
    546           * only applicable to SOC devices.
    547           *
    548           * @param endpoint The endpoint number that is being queried.  Ver.: always
    549           * @param result This is a pointer to a data structure where the endpoint
    550           * information is written if the callback is providing the information.  Ver.:
    551           * always
    552           */

   \                                 In section .text, align 2, keep-with-next
    553          bool emberAfGetEndpointDescriptionCallback(uint8_t endpoint,
    554                                                     EmberEndpointDescription* result)
    555          {
    556            return false;
   \                     emberAfGetEndpointDescriptionCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    557          }
    558          
    559          /** @brief Get Endpoint Info
    560           *
    561           * This function is a callback to an application implemented endpoint that
    562           * operates outside the normal application framework.  When the framework wishes
    563           * to perform operations with that endpoint it uses this callback to retrieve
    564           * the endpoint's information.  If the endpoint exists and the application can
    565           * provide data then true shall be returned.  Otherwise the callback must return
    566           * false.
    567           *
    568           * @param endpoint The endpoint to retrieve data for.  Ver.: always
    569           * @param returnNetworkIndex The index corresponding to the ZigBee network the
    570           * endpoint belongs to.  If not using a multi-network device, 0 must be
    571           * returned.  Otherwise on a multi-network device the stack will switch to this
    572           * network before sending the message.  Ver.: always
    573           * @param returnEndpointInfo A pointer to a data struct that will be written
    574           * with information about the endpoint.  Ver.: always
    575           */

   \                                 In section .text, align 2, keep-with-next
    576          bool emberAfGetEndpointInfoCallback(uint8_t endpoint,
    577                                              uint8_t* returnNetworkIndex,
    578                                              EmberAfEndpointInfoStruct* returnEndpointInfo)
    579          {
    580            return false;
   \                     emberAfGetEndpointInfoCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    581          }
    582          
    583          /** @brief Get Form And Join Extended Pan Id
    584           *
    585           * This callback is called by the framework to get the extended PAN ID used by
    586           * the current network for forming and joining.  The extended PAN ID used for
    587           * forming and joining is not necessarily the same extended PAN ID actually in
    588           * use on the network.
    589           *
    590           * @param resultLocation   Ver.: always
    591           */

   \                                 In section .text, align 2, keep-with-next
    592          void emberAfGetFormAndJoinExtendedPanIdCallback(uint8_t *resultLocation)
    593          {
    594          }
   \                     emberAfGetFormAndJoinExtendedPanIdCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    595          
    596          /** @brief Get Long Poll Interval Ms
    597           *
    598           * This function is only useful to end devices.  This function will return the
    599           * long poll interval (in milliseconds) for the current network.  This interval
    600           * is the maximum amount of time a child will wait between polls of its parent
    601           * when it is not expecting data.
    602           *
    603           */

   \                                 In section .text, align 2, keep-with-next
    604          uint32_t emberAfGetLongPollIntervalMsCallback(void)
    605          {
    606            return 0;
   \                     emberAfGetLongPollIntervalMsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    607          }
    608          
    609          /** @brief Get Long Poll Interval Qs
    610           *
    611           * This function is only useful to end devices.  This function will return the
    612           * long poll interval (in quarter seconds) for the current network.  This
    613           * interval is the maximum amount of time a child will wait between polls of its
    614           * parent when it is not expecting data.
    615           *
    616           */

   \                                 In section .text, align 2, keep-with-next
    617          uint32_t emberAfGetLongPollIntervalQsCallback(void)
    618          {
    619            return 0;
   \                     emberAfGetLongPollIntervalQsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    620          }
    621          
    622          /** @brief Get Short Poll Interval Ms
    623           *
    624           * This function is only useful to sleepy end devices.  This function will
    625           * return the short poll interval (in milliseconds) for the current network. 
    626           * This interval is the maximum amount of time a child will wait between polls
    627           * of its parent when it is expecting data.
    628           *
    629           */

   \                                 In section .text, align 2, keep-with-next
    630          uint16_t emberAfGetShortPollIntervalMsCallback(void)
    631          {
    632            return 0;
   \                     emberAfGetShortPollIntervalMsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    633          }
    634          
    635          /** @brief Get Short Poll Interval Qs
    636           *
    637           * This function is only useful to sleepy end devices.  This function will
    638           * return the short poll interval (in quarter seconds) for the current network. 
    639           * This interval is the maximum amount of time a child will wait between polls
    640           * of its parent when it is expecting data.
    641           *
    642           */

   \                                 In section .text, align 2, keep-with-next
    643          uint16_t emberAfGetShortPollIntervalQsCallback(void)
    644          {
    645            return 0;
   \                     emberAfGetShortPollIntervalQsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    646          }
    647          
    648          /** @brief Get Source Route Overhead
    649           *
    650           * This function is called by the framework to determine the overhead required
    651           * in the network frame for source routing to a particular destination.
    652           *
    653           * @param destination The node id of the destination  Ver.: always
    654           */

   \                                 In section .text, align 2, keep-with-next
    655          uint8_t emberAfGetSourceRouteOverheadCallback(EmberNodeId destination)
    656          {
    657            return 0;
   \                     emberAfGetSourceRouteOverheadCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    658          }
    659          
    660          /** @brief Get Wake Timeout Bitmask
    661           *
    662           * This function is only useful to sleepy end devices.  This function will
    663           * return the wake timeout bitmask for the current network.  The bitmask
    664           * determines which tasks will timeout automatically and which tasks require
    665           * manual removal from the task list.
    666           *
    667           */

   \                                 In section .text, align 2, keep-with-next
    668          EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void)
    669          {
    670            return 0;
   \                     emberAfGetWakeTimeoutBitmaskCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    671          }
    672          
    673          /** @brief Get Wake Timeout Ms
    674           *
    675           * This function is only useful to sleepy end devices.  This function will
    676           * return the wake timeout (in milliseconds) for the current network.  This
    677           * timeout is the maximum amount of time a child will wait for a task in the
    678           * wake bitmask to finish.  While waiting, the device will short poll.
    679           *
    680           */

   \                                 In section .text, align 2, keep-with-next
    681          uint16_t emberAfGetWakeTimeoutMsCallback(void)
    682          {
    683            return 0;
   \                     emberAfGetWakeTimeoutMsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    684          }
    685          
    686          /** @brief Get Wake Timeout Qs
    687           *
    688           * This function is only useful to sleepy end devices.  This function will
    689           * return the wake timeout (in quarter seconds) for the current network.  This
    690           * timeout is the maximum amount of time a child will wait for a task in the
    691           * wake bitmask to finish.  While waiting, the device will short poll.
    692           *
    693           */

   \                                 In section .text, align 2, keep-with-next
    694          uint16_t emberAfGetWakeTimeoutQsCallback(void)
    695          {
    696            return 0;
   \                     emberAfGetWakeTimeoutQsCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    697          }
    698          
    699          /** @brief Incoming Packet Filter
    700           *
    701           * ** REQUIRES INCLUDING THE PACKET-HANDOFF PLUGIN **
    702          
    703                  This is called by
    704           * the Packet Handoff plugin when the stack receives a packet from one of the
    705           * protocol layers specified in ::EmberZigbeePacketType.
    706          
    707                  The packetType
    708           * argument is one of the values of the ::EmberZigbeePacketType enum. If the
    709           * stack receives an 802.15.4 MAC beacon, it will call this function with the
    710           * packetType argument set to ::EMBER_ZIGBEE_PACKET_TYPE_BEACON.
    711          
    712                  The
    713           * implementation of this callback may alter the data contained in packetData,
    714           * modify options and flags in the auxillary data, or consume the packet itself,
    715           * either sending the message, or discarding it as it sees fit.
    716           *
    717           * @param packetType the type of packet and associated protocol layer  Ver.:
    718           * always
    719           * @param packetData flat buffer containing the packet data associated with the
    720           * packet type  Ver.: always
    721           * @param size_p a pointer containing the size value of the packet  Ver.: always
    722           * @param data auxillary data included with the packet  Ver.: always
    723           */

   \                                 In section .text, align 2, keep-with-next
    724          EmberPacketAction emberAfIncomingPacketFilterCallback(EmberZigbeePacketType packetType,
    725                                                                uint8_t* packetData,
    726                                                                uint8_t* size_p,
    727                                                                void* data)
    728          {
    729            return EMBER_ACCEPT_PACKET;
   \                     emberAfIncomingPacketFilterCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    730          }
    731          
    732          /** @brief Initiate Inter Pan Key Establishment
    733           *
    734           * This function is called by the framework to initiate key establishment with a
    735           * remote device on a different PAN.  The application should return
    736           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    737           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    738           * occur.
    739           *
    740           * @param panId The PAN id of the remote device.  Ver.: always
    741           * @param eui64 The EUI64 of the remote device.  Ver.: always
    742           */

   \                                 In section .text, align 2, keep-with-next
    743          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    744                                                                      const EmberEUI64 eui64)
    745          {
    746            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
    747          }
    748          
    749          /** @brief Initiate Key Establishment
    750           *
    751           * This function is called by the framework to initiate key establishment with a
    752           * remote device.  The application should return EMBER_SUCCESS if key
    753           * establishment was initiated successfully.  The application should call
    754           * ::emberAfKeyEstablishmentCallback as events occur.
    755           *
    756           * @param nodeId The node id of the remote device.  Ver.: always
    757           * @param endpoint The endpoint on the remote device.  Ver.: always
    758           */

   \                                 In section .text, align 2, keep-with-next
    759          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    760                                                              uint8_t endpoint)
    761          {
    762            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
    763          }
    764          
    765          /** @brief Initiate Partner Link Key Exchange
    766           *
    767           * This function is called by the framework to initiate a partner link key
    768           * exchange with a remote device.  The application should return EMBER_SUCCESS
    769           * if the partner link key exchange was initiated successfully.  When the
    770           * partner link key exchange completes, the application should call the given
    771           * callback.
    772           *
    773           * @param target The node id of the remote device.  Ver.: always
    774           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    775           * always
    776           * @param callback The callback that should be called when the partner link key
    777           * exchange completse.  Ver.: always
    778           */

   \                                 In section .text, align 2, keep-with-next
    779          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    780                                                                    uint8_t endpoint,
    781                                                                    EmberAfPartnerLinkKeyExchangeCallback *callback)
    782          {
    783            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
    784          }
    785          
    786          /** @brief Inter Pan Key Establishment
    787           *
    788           * A callback by the key-establishment code to indicate an event has occurred. 
    789           * For error codes this is purely a notification.  For non-error status codes
    790           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    791           * disallow the operation.  If the application returns true then the key
    792           * establishment is allowed to proceed.  If it returns false, then key
    793           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    794           *
    795           * @param status   Ver.: always
    796           * @param amInitiator   Ver.: always
    797           * @param panId   Ver.: always
    798           * @param eui64   Ver.: always
    799           * @param delayInSeconds   Ver.: always
    800           */

   \                                 In section .text, align 2, keep-with-next
    801          bool emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    802                                                       bool amInitiator,
    803                                                       EmberPanId panId,
    804                                                       const EmberEUI64 eui64,
    805                                                       uint8_t delayInSeconds)
    806          {
    807            return true;
   \                     emberAfInterPanKeyEstablishmentCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    808          }
    809          
    810          /** @brief Key Establishment
    811           *
    812           * A callback by the key-establishment code to indicate an event has occurred. 
    813           * For error codes this is purely a notification.  For non-error status codes
    814           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    815           * disallow the operation.  If the application returns true then the key
    816           * establishment is allowed to proceed.  If it returns false, then key
    817           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    818           *
    819           * @param status   Ver.: always
    820           * @param amInitiator   Ver.: always
    821           * @param partnerShortId   Ver.: always
    822           * @param delayInSeconds   Ver.: always
    823           */

   \                                 In section .text, align 2, keep-with-next
    824          bool emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    825                                               bool amInitiator,
    826                                               EmberNodeId partnerShortId,
    827                                               uint8_t delayInSeconds)
    828          {
    829            return true;
   \                     emberAfKeyEstablishmentCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
    830          }
    831          
    832          /** @brief Main Start
    833           *
    834           * This function is called at the start of main after the HAL has been
    835           * initialized.  The standard main function arguments of argc and argv are
    836           * passed in.  However not all platforms have support for main() function
    837           * arguments.  Those that do not are passed NULL for argv, therefore argv should
    838           * be checked for NULL before using it.  If the callback determines that the
    839           * program must exit, it should return true.  The value returned by main() will
    840           * be the value written to the returnCode pointer.  Otherwise the callback
    841           * should return false to let normal execution continue.
    842           *
    843           * @param returnCode   Ver.: always
    844           * @param argc   Ver.: always
    845           * @param argv   Ver.: always
    846           */

   \                                 In section .text, align 2, keep-with-next
    847          bool emberAfMainStartCallback(int* returnCode,
    848                                        int argc,
    849                                        char** argv)
    850          {
    851            // NOTE:  argc and argv may not be supported on all platforms, so argv MUST be
    852            // checked for NULL before referencing it.  On those platforms without argc 
    853            // and argv "0" and "NULL" are passed respectively.
    854          
    855            return false;  // exit?
   \                     emberAfMainStartCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    856          }
    857          
    858          /** @brief Main Tick
    859           *
    860           * Whenever main application tick is called, this callback will be called at the
    861           * end of the main tick execution.
    862           *
    863           */

   \                                 In section .text, align 2, keep-with-next
    864          void emberAfMainTickCallback(void)
    865          {
    866          }
   \                     emberAfMainTickCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    867          
    868          /** @brief Message Sent
    869           *
    870           * This function is called by the application framework from the message sent
    871           * handler, when it is informed by the stack regarding the message sent status.
    872           * All of the values passed to the emberMessageSentHandler are passed on to this
    873           * callback. This provides an opportunity for the application to verify that its
    874           * message has been sent successfully and take the appropriate action. This
    875           * callback should return a bool value of true or false. A value of true
    876           * indicates that the message sent notification has been handled and should not
    877           * be handled by the application framework.
    878           *
    879           * @param type   Ver.: always
    880           * @param indexOrDestination   Ver.: always
    881           * @param apsFrame   Ver.: always
    882           * @param msgLen   Ver.: always
    883           * @param message   Ver.: always
    884           * @param status   Ver.: always
    885           */

   \                                 In section .text, align 2, keep-with-next
    886          bool emberAfMessageSentCallback(EmberOutgoingMessageType type,
    887                                          uint16_t indexOrDestination,
    888                                          EmberApsFrame* apsFrame,
    889                                          uint16_t msgLen,
    890                                          uint8_t* message,
    891                                          EmberStatus status)
    892          {
    893            return false;
   \                     emberAfMessageSentCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    894          }
    895          
    896          /** @brief Ncp Init
    897           *
    898           * This function is called when the network coprocessor is being initialized,
    899           * either at startup or upon reset.  It provides applications on opportunity to
    900           * perform additional configuration of the NCP.  The function is always called
    901           * twice when the NCP is initialized.  In the first invocation, memoryAllocation
    902           * will be true and the application should only issue EZSP commands that affect
    903           * memory allocation on the NCP.  For example, tables on the NCP can be resized
    904           * in the first call.  In the second invocation, memoryAllocation will be false
    905           * and the application should only issue EZSP commands that do not affect memory
    906           * allocation.  For example, tables on the NCP can be populated in the second
    907           * call.  This callback is not called on SoCs.
    908           *
    909           * @param memoryAllocation   Ver.: always
    910           */

   \                                 In section .text, align 2, keep-with-next
    911          void emberAfNcpInitCallback(bool memoryAllocation)
    912          {
    913          }
   \                     emberAfNcpInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    914          
    915          /** @brief Ncp Is Awake Isr
    916           *
    917           * This function is called IN ISR CONTEXT.  It notes that the NCP is awake after
    918           * sleeping.  Care should be taken to do minimal processing in this ISR handler
    919           * function.
    920           *
    921           */

   \                                 In section .text, align 2, keep-with-next
    922          void emberAfNcpIsAwakeIsrCallback(void)
    923          {
    924          }
   \                     emberAfNcpIsAwakeIsrCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    925          
    926          /** @brief Network Key Update Complete
    927           *
    928           * This is called by the framework when a network key update operation started
    929           * by the trust center is complete.
    930           *
    931           * @param status   Ver.: always
    932           */

   \                                 In section .text, align 2, keep-with-next
    933          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    934          {
    935          }
   \                     emberAfNetworkKeyUpdateCompleteCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    936          
    937          /** @brief Ota Bootload
    938           *
    939           * The platform specific routine to bootload the device from a ZigBee
    940           * over-the-air upgrade file.
    941           *
    942           * @param id A pointer to the structure that contains the information about what
    943           * OTA image to bootload.  Ver.: always
    944           * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
    945           * bootload the device.  Ver.: always
    946           */

   \                                 In section .text, align 2, keep-with-next
    947          uint8_t emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
    948                                             uint16_t ncpUpgradeTagId)
    949          {
   \                     emberAfOtaBootloadCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    950            // Please implement me
    951            emberAfCorePrintln("Not supported.");
   \        0x2   0x....             LDR.N    R1,??DataTable6
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x....'....        BL       emberAfPrintln
    952            return 1;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xBD02             POP      {R1,PC}          ;; return
    953          }
    954          
    955          /** @brief Ota Client Bootload
    956           *
    957           * This callback is fired when the OTA Client recevies a command to bootload the
    958           * newly downloaded OTA image.  This callback will perform the platform specific
    959           * to bootload their device.
    960           *
    961           * @param id This is the identifier relating to the image that has been
    962           * downloaded and is ready for bootload.  Ver.: always
    963           */

   \                                 In section .text, align 2, keep-with-next
    964          void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id)
    965          {
    966            // Any final preperation prior to the bootload should be done here.
    967            // It is assumed that the device will reset in most all cases.
    968            // Please implement me.
    969          }
   \                     emberAfOtaClientBootloadCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    970          
    971          /** @brief Ota Client Custom Verify
    972           *
    973           * This callback is executed by the OTA client after the signature verification
    974           * has successfully completed.  It allows the device to do its own custom
    975           * verification of the image (such as verifying that the EBL is intact).
    976           *
    977           * @param newVerification This indicates if a new verification should be
    978           * started.  Ver.: always
    979           * @param id This is ID of the image to be verified.  Ver.: always
    980           */

   \                                 In section .text, align 2, keep-with-next
    981          EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(bool newVerification,
    982                                                                        const EmberAfOtaImageId* id)
    983          {
    984            // Manufacturing specific checks can be made to the image in this function to
    985            // determine if it is valid.  This function is called AFTER cryptographic 
    986            // checks have passed.  If the cryptographic checks failed, this function will
    987            // never be called.
    988            
    989            // The function shall return one of the following based on its own 
    990            // verification process.
    991            // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
    992            // 2) EMBER_AF_IMAGE_BAD  - the image is not valid 
    993            // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
    994            //      checks are needed.  This callback shall be re-executed later to 
    995            //      continue verification.  This allows other code in the framework to run.
    996            return EMBER_AF_IMAGE_GOOD;
   \                     emberAfOtaClientCustomVerifyCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    997          }
    998          
    999          /** @brief Ota Client Download Complete
   1000           *
   1001           * This callback indicates that the OTA client has completed the download of a
   1002           * file.  If the file has been completely downloaded and cryptographic checks
   1003           * have been turned on, then those will be performed prior to this callback and
   1004           * that outcome included in the 'success' result.  On failure, this callback is
   1005           * merely informative, and the return type is ignored.  On succesful download,
   1006           * this callback allows the client to perform any additional verification of the
   1007           * downloaded image and return that result to the OTA server.
   1008           *
   1009           * @param success This indicates the success or failure of the download and
   1010           * cryptographic verification process (if applicable).  Ver.: always
   1011           * @param id This is the image identifier information that corresponds to the
   1012           * download result.  Ver.: always
   1013           */

   \                                 In section .text, align 2, keep-with-next
   1014          bool emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
   1015                                                        const EmberAfOtaImageId* id)
   1016          {
   1017            // At this point the image has been completely downloaded and cryptographic 
   1018            // checks (if applicable) have been performed.
   1019          
   1020            if (!success) {
   1021              emberAfOtaBootloadClusterPrintln("Download failed.");
   1022              return true;   // return value is ignored
   1023            }
   1024            
   1025            // This is for any additional validation that needs to be performed
   1026            // on the image by the application.
   1027            
   1028            // The results of checks here will be returned back to the OTA server
   1029            // in the Upgrade End request.
   1030            return true;
   \                     emberAfOtaClientDownloadCompleteCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1031          }
   1032          
   1033          /** @brief Ota Client Incoming Message Raw
   1034           *
   1035           * This callback is for processing incoming messages for the Over-the-air
   1036           * bootload cluster client.  ZCL will not process the message and instead hand
   1037           * the raw over the air data to the callback for its own processing.
   1038           *
   1039           * @param message A pointer to the structure containing the message buffer and
   1040           * other information about it.  Ver.: always
   1041           */

   \                                 In section .text, align 2, keep-with-next
   1042          bool emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand *message)
   1043          {
   1044            return false;
   \                     emberAfOtaClientIncomingMessageRawCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1045          }
   1046          
   1047          /** @brief Ota Client Start
   1048           *
   1049           * This callback should be called when the profile specific registration has
   1050           * completed successfully.  It will start the client's state machine that will
   1051           * find the OTA server, query it for the next image, download the image, wait
   1052           * for the bootload message, and kick off the bootload.
   1053           *
   1054           */

   \                                 In section .text, align 2, keep-with-next
   1055          void emberAfOtaClientStartCallback(void)
   1056          {
   1057          }
   \                     emberAfOtaClientStartCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1058          
   1059          /** @brief Ota Client Version Info
   1060           *
   1061           * This function is called by the OTA client when a new query will occur to the
   1062           * server asking what the next version of firmware is.  The client can inform
   1063           * the cluster software as to what information to use in the query (and
   1064           * subsequent download).
   1065           *
   1066           * @param currentImageInfo This is the information to use in the next query by
   1067           * the client cluster code.  It contains the manufacturer ID, image type ID, and
   1068           * the firmware version to be specified in the query message sent to the server.
   1069           *  Ver.: always
   1070           * @param hardwareVersion This is a pointer to the hardware version to use in
   1071           * the query.  If no hardware version should be used, then
   1072           * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
   1073           */

   \                                 In section .text, align 2, keep-with-next
   1074          void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
   1075                                                   uint16_t* hardwareVersion)
   1076          {
   1077            // Customer will fill in the image info with their manufacturer ID,
   1078            // image type ID, and current software version number.
   1079            // The deviceSpecificFileEui64 can be ignored.
   1080          
   1081            // It may be necessary to dynamically determine this by talking to
   1082            // another device, as is the case with a host talking to an NCP device.
   1083          
   1084            // However, this routine will be called repeatedly so it may be wise
   1085            // to cache the data!
   1086          
   1087          /* This is commented out since the #defines below are not defined.
   1088          
   1089            if (currentImageInfo != NULL) {
   1090              MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
   1091              currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
   1092              currentImageInfo->imageTypeId     = EMBER_AF_IMAGE_TYPE_ID;
   1093              currentImageInfo->firmwareVersion = EMBER_AF_CUSTOM_FIRMWARE_VERSION;
   1094            }
   1095          
   1096            if (hardwareVersion != NULL) {
   1097              *hardwareVersion = EMBER_AF_INVALID_HARDWARE_VERSION;
   1098            }
   1099          
   1100            assert(false);
   1101          */
   1102          }
   \                     emberAfOtaClientVersionInfoCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1103          
   1104          /** @brief Ota Page Request Server Policy
   1105           *
   1106           * This callback is called by the OTA server page request code when it wants to
   1107           * determine if it is allowed for an OTA client to make a page request.  It is
   1108           * only called if page request support has been enabled on the server.  It
   1109           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
   1110           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
   1111           *
   1112           */

   \                                 In section .text, align 2, keep-with-next
   1113          uint8_t emberAfOtaPageRequestServerPolicyCallback(void)
   1114          {
   1115            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1116          }
   1117          
   1118          /** @brief Ota Server Block Size
   1119           *
   1120           * This function provides a way for the server to adjust the block size of its
   1121           * response to an Image block request by a client.
   1122           *
   1123           * @param clientNodeId The node Id of OTA client making an image block request. 
   1124           * Ver.: always
   1125           */

   \                                 In section .text, align 2, keep-with-next
   1126          uint8_t emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
   1127          {
   \                     emberAfOtaServerBlockSizeCallback: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   1128            // This function provides a way for the server to potentially
   1129            // adjust the block size based on the client who is requesting.
   1130            // In other words if we are using source routing we will limit
   1131            // data returned by enough to put a source route into the message.
   1132          
   1133            // Image Block Response Message Format
   1134            // Status Code: 1-byte
   1135            // Manuf Code:  2-bytes
   1136            // Image Type:  2-bytes
   1137            // File Ver:    4-bytes
   1138            // File Offset: 4-bytes
   1139            // Data Size:   1-byte
   1140            // Data:        variable
   1141            const uint8_t IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
   1142          
   1143            EmberApsFrame apsFrame;
   1144            uint8_t maxSize;
   1145            apsFrame.options = EMBER_APS_OPTION_NONE;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1146          
   1147            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \        0xA   0x....'....        BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \        0xE   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
   1148              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \       0x10   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \       0x14   0xF040 0x0020      ORR      R0,R0,#0x20
   \       0x18   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1149            }
   1150          
   1151            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
   1152                                                     clientNodeId,
   1153                                                     &apsFrame);
   1154            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
   1155            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0: (+1)
   \       0x1C   0x466A             MOV      R2,SP
   \       0x1E   0x4621             MOV      R1,R4
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x....'....        BL       emberAfMaximumApsPayloadLength
   \       0x26   0x3811             SUBS     R0,R0,#+17
   \       0x28   0xB2C0             UXTB     R0,R0
   \       0x2A   0xB004             ADD      SP,SP,#+16
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return
   1156          }
   1157          
   1158          /** @brief Ota Server Incoming Message Raw
   1159           *
   1160           * This callback is for processing incoming messages for the Over-the-air
   1161           * bootload cluster server.  ZCL will not process the message and instead hand
   1162           * the raw over the air data to the callback for its own processing.
   1163           *
   1164           * @param message A pointer to the structure containing the message buffer and
   1165           * other information about it.  Ver.: always
   1166           */

   \                                 In section .text, align 2, keep-with-next
   1167          bool emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message)
   1168          {
   1169            return false;
   \                     emberAfOtaServerIncomingMessageRawCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1170          }
   1171          
   1172          /** @brief Ota Server Query
   1173           *
   1174           * This callback is fired when the OTA server receives a query request by the
   1175           * client.  The callback lets the server application indicate to the client what
   1176           * the 'next' version of software is for the device, or if there is not one
   1177           * available.
   1178           *
   1179           * @param currentImageId This is the current software image that the client
   1180           * hase.  Ver.: always
   1181           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
   1182           * version of the client device.  If NULL, the client did not specify a hardware
   1183           * version.  Ver.: always
   1184           * @param nextUpgradeImageId This is a pointer to a data structure containing
   1185           * the 'next' software version for the client to download.  Ver.: always
   1186           */

   \                                 In section .text, align 2, keep-with-next
   1187          uint8_t emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
   1188                                                uint16_t* hardwareVersion,
   1189                                                EmberAfOtaImageId* nextUpgradeImageId)
   1190          {
   1191            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
   1192            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
   1193            // If no new software image is available (i.e. the client should not download a firmware image)
   1194            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
   1195            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback: (+1)
   \        0x0   0x2098             MOVS     R0,#+152
   \        0x2   0x4770             BX       LR               ;; return
   1196          }
   1197          
   1198          /** @brief Ota Server Send Image Notify
   1199           *
   1200           * This callback is an indication to the OTA server that it should send out
   1201           * notification about an OTA file that is available for download.
   1202           *
   1203           * @param dest The destination of the image notify message.  May be a broadcast
   1204           * address.  Ver.: always
   1205           * @param endpoint The destination endpoint of the image notify message.  May be
   1206           * a broadcast endpoint.  Ver.: always
   1207           * @param payloadType The type of data the image notify message will contain.  0
   1208           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
   1209           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
   1210           * @param queryJitter The percentage of nodes that should respond to this
   1211           * message, from 1-100.  On receipt of this message, each recipient will
   1212           * randomly choose a percentage and only query the server if their percentage is
   1213           * below this value.  Ver.: always
   1214           * @param id The image information that will be put in the message.  The data
   1215           * within this struct that will be appended to the message is determined by the
   1216           * previous 'payloadType' argument.  Ver.: always
   1217           */

   \                                 In section .text, align 2, keep-with-next
   1218          bool emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
   1219                                                       uint8_t endpoint,
   1220                                                       uint8_t payloadType,
   1221                                                       uint8_t queryJitter,
   1222                                                       const EmberAfOtaImageId* id)
   1223          {
   1224            return false;
   \                     emberAfOtaServerSendImageNotifyCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1225          }
   1226          
   1227          /** @brief Ota Server Upgrade End Request
   1228           *
   1229           * This function is called when the OTA server receives a request an upgrade end
   1230           * request.  If the request indicated a successful download by the client, the
   1231           * server must tell the client when and if to upgrade to the downloaded image.
   1232           *
   1233           * @param source The node ID of the device that sent the upgrade end request. 
   1234           * Ver.: always
   1235           * @param status This is the ZCL status sent by the client indicating the result
   1236           * of its attempt to download the new upgrade image.  If the status is not
   1237           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
   1238           * response mesasge will be generated by the server.  Ver.: always
   1239           * @param returnValue If the server returns true indicating that the client
   1240           * should apply the upgrade, this time value indicates when in the future the
   1241           * client should apply the upgrade.  Ver.: always
   1242           * @param imageId This variable indicates the software version that the client
   1243           * successfully downloaded and is asking to upgrade to.  Ver.: always
   1244           */

   \                                 In section .text, align 2, keep-with-next
   1245          bool emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
   1246                                                         uint8_t status,
   1247                                                         uint32_t* returnValue,
   1248                                                         const EmberAfOtaImageId* imageId)
   1249          {
   1250            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
   1251            // merely informative and no response message will be generated by the server.
   1252            // If the server wants the client to NOT apply the upgrade, then it should
   1253            // return false.
   1254            // If the server wants the client to apply the upgrade, it should return true
   1255            // and set the 'returnValue' parameter to when it wants the client to
   1256            // apply the upgrade.  There are three possible values:
   1257            //   0               =  Apply the upgrade now
   1258            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
   1259            //   (anything-else) =  Apply the upgrade X minutes from now.
   1260            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x6010             STR      R0,[R2, #+0]
   1261            return true;
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x4770             BX       LR               ;; return
   1262          }
   1263          
   1264          /** @brief Ota Storage Check Temp Data
   1265           *
   1266           * This callback will validate temporary data in the storage device to determine
   1267           * whether it is a complete file, a partially downloaded file, or there is no
   1268           * file present.  When a complete or partial file is found it will return
   1269           * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
   1270           * respectively.  In that case, the currentOffset, totalImageSize, and
   1271           * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
   1272           * returned, no temporary data is present.
   1273           *
   1274           * @param currentOffset A pointer to a value that will be written with the
   1275           * offset within the total file size that has been successfully stored in the
   1276           * storage device.  This will indicate how much data has been currently
   1277           * dowloaded.  Ver.: always
   1278           * @param totalImageSize A pointer to a value that will be written with the
   1279           * total image size of the OTA file when a download has completed.  This does
   1280           * not indicate how much data has actually been downloaded currently.  Ver.:
   1281           * always
   1282           * @param newFileInfo This is the image id of the temporary file data stored in
   1283           * the storage device.  Ver.: always
   1284           */

   \                                 In section .text, align 2, keep-with-next
   1285          EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(uint32_t* currentOffset,
   1286                                                                         uint32_t* totalImageSize,
   1287                                                                         EmberAfOtaImageId* newFileInfo)
   1288          {
   1289            // If the image data cannot be successfully verified, an error should be returned.
   1290            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageCheckTempDataCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1291          }
   1292          
   1293          /** @brief Ota Storage Clear Temp Data
   1294           *
   1295           * This function clears any existing temp data that was downloaed.  It is used
   1296           * immediately prior to downloading a raw image over the air.
   1297           *
   1298           */

   \                                 In section .text, align 2, keep-with-next
   1299          EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void)
   1300          {
   1301            // If the image data cannot be stored, an error should be returned.
   1302            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageClearTempDataCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1303          }
   1304          
   1305          /** @brief Ota Storage Close
   1306           *
   1307           * This callback shuts down the ZigBee Over-the-air storage module.
   1308           *
   1309           */

   \                                 In section .text, align 2, keep-with-next
   1310          void emberAfOtaStorageCloseCallback(void)
   1311          {
   1312            // Please implement me.
   1313            assert(false);
   \                     emberAfOtaStorageCloseCallback: (+1)
   \        0x0   0xF240 0x5121      MOVW     R1,#+1313
   \        0x4   0x....             B.N      ?Subroutine2
   1314          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable6_1
   \        0x2   0x....'....        B.W      halInternalAssertFailed
   1315          
   1316          /** @brief Ota Storage Driver Download Finish
   1317           *
   1318           * This callback defines the low-level means by which a device records the final
   1319           * offset value of the download image.
   1320           *
   1321           * @param offset The value of the final offset of the image download.  Ver.:
   1322           * always
   1323           */

   \                                 In section .text, align 2, keep-with-next
   1324          void emberAfOtaStorageDriverDownloadFinishCallback(uint32_t offset)
   1325          {
   1326            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1327            // Please implement me.
   1328            assert(false);
   \                     emberAfOtaStorageDriverDownloadFinishCallback: (+1)
   \        0x0   0xF44F 0x61A6      MOV      R1,#+1328
   \        0x4                      REQUIRE ?Subroutine2
   \        0x4                      ;; // Fall through to label ?Subroutine2
   1329          }
   1330          
   1331          /** @brief Ota Storage Driver Init
   1332           *
   1333           * The initialization code for the OTA storage driver.
   1334           *
   1335           */

   \                                 In section .text, align 2, keep-with-next
   1336          bool emberAfOtaStorageDriverInitCallback(void)
   1337          {
   \                     emberAfOtaStorageDriverInitCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1338            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1339            // Please implement me.
   1340            assert(false);
   \        0x2   0xF240 0x513C      MOVW     R1,#+1340
   \        0x6   0x....             B.N      ?Subroutine0
   1341            return false;
   1342          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable6_1
   \        0x2   0x....'....        BL       halInternalAssertFailed
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
   1343          
   1344          /** @brief Ota Storage Driver Invalidate Image
   1345           *
   1346           * This callback invalidates the image stored on disk so that it will not be
   1347           * bootloaded, and it will not be a valid image that is in the middle of
   1348           * downloading.
   1349           *
   1350           */

   \                                 In section .text, align 2, keep-with-next
   1351          EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void)
   1352          {
   \                     emberAfOtaStorageDriverInvalidateImageCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1353            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1354            // Please implement me.
   1355            assert(false);
   \        0x2   0xF240 0x514B      MOVW     R1,#+1355
   \        0x6   0x....             B.N      ?Subroutine1
   1356            return EMBER_AF_OTA_STORAGE_ERROR;
   1357          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable6_1
   \        0x2   0x....'....        BL       halInternalAssertFailed
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
   1358          
   1359          /** @brief Ota Storage Driver Prepare To Resume Download
   1360           *
   1361           * This callback allows the underlying storage driver to prepare to resume the
   1362           * OTA file download.  For example, the driver may exceute a page erase to
   1363           * insure the next page is ready to be written to.
   1364           *
   1365           */

   \                                 In section .text, align 2, keep-with-next
   1366          EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void)
   1367          {
   \                     emberAfOtaStorageDriverPrepareToResumeDownloadCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1368            assert(false);
   \        0x2   0xF44F 0x61AB      MOV      R1,#+1368
   \        0x6                      REQUIRE ?Subroutine1
   \        0x6                      ;; // Fall through to label ?Subroutine1
   1369            return EMBER_AF_OTA_STORAGE_ERROR;
   1370          }
   1371          
   1372          /** @brief Ota Storage Driver Read
   1373           *
   1374           * This callback defines the low-level means by which a device reads from the
   1375           * OTA storage device.
   1376           *
   1377           * @param offset The address offset from the start of the storage device where
   1378           * data is to be read.  Ver.: always
   1379           * @param length The length of the data to be read from the storage device. 
   1380           * Ver.: always
   1381           * @param returnData A pointer where the data read from the device should be
   1382           * written to.  Ver.: always
   1383           */

   \                                 In section .text, align 2, keep-with-next
   1384          bool emberAfOtaStorageDriverReadCallback(uint32_t offset,
   1385                                                   uint32_t length,
   1386                                                   uint8_t* returnData)
   1387          {
   \                     emberAfOtaStorageDriverReadCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1388            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1389            // Please implement me.
   1390            assert(false);
   \        0x2   0xF240 0x516E      MOVW     R1,#+1390
   \        0x6                      REQUIRE ?Subroutine0
   \        0x6                      ;; // Fall through to label ?Subroutine0
   1391            return false;
   1392          }
   1393          
   1394          /** @brief Ota Storage Driver Retrieve Last Stored Offset
   1395           *
   1396           * This callback defines the low-level means by which a device retrieves the
   1397           * last persistently recorded download offset.  This may be different than last
   1398           * actual download offset.
   1399           *
   1400           */

   \                                 In section .text, align 2, keep-with-next
   1401          uint32_t emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void)
   1402          {
   \                     emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1403            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1404            // Please implement me.
   1405            assert(false);
   \        0x2   0xF240 0x517D      MOVW     R1,#+1405
   \        0x6   0x....             B.N      ?Subroutine0
   1406            return 0;
   1407          }
   1408          
   1409          /** @brief Ota Storage Driver Write
   1410           *
   1411           * This callback defines the low-level means by which a device reads from the
   1412           * OTA storage device.
   1413           *
   1414           * @param dataToWrite A pointer to the data that will be written to the storage
   1415           * device.  Ver.: always
   1416           * @param offset The address offset from the start of the storage device where
   1417           * data will be written.  Ver.: always
   1418           * @param length The length of the data to be written to the storage device. 
   1419           * Ver.: always
   1420           */

   \                                 In section .text, align 2, keep-with-next
   1421          bool emberAfOtaStorageDriverWriteCallback(const uint8_t* dataToWrite,
   1422                                                    uint32_t offset,
   1423                                                    uint32_t length)
   1424          {
   \                     emberAfOtaStorageDriverWriteCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1425            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1426            // Please implement me.
   1427            assert(false);
   \        0x2   0xF240 0x5193      MOVW     R1,#+1427
   \        0x6   0x....             B.N      ?Subroutine0
   1428            return false;
   1429          }
   1430          
   1431          /** @brief Ota Storage Finish Download
   1432           *
   1433           * This function indicates to the storage module that the download has finished.
   1434           *
   1435           * @param offset The final offset of the downloaded file (i.e. the total size) 
   1436           * Ver.: always
   1437           */

   \                                 In section .text, align 2, keep-with-next
   1438          EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(uint32_t offset)
   1439          {
   1440            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageFinishDownloadCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1441          }
   1442          
   1443          /** @brief Ota Storage Get Count
   1444           *
   1445           * This callback returns the total number of ZigBee Over-the-air upgrade images
   1446           * stored in the storage module.
   1447           *
   1448           */

   \                                 In section .text, align 2, keep-with-next
   1449          uint8_t emberAfOtaStorageGetCountCallback(void)
   1450          {
   1451            return 0;
   \                     emberAfOtaStorageGetCountCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1452          }
   1453          
   1454          /** @brief Ota Storage Get Full Header
   1455           *
   1456           * This callback populates the EmberAfOtaHeader structure pointed to by the
   1457           * returnData with data about the OTA file stored in the storage module.
   1458           *
   1459           * @param id This is a pointer to the image id for the OTA file to retrieve
   1460           * information about.  Ver.: always
   1461           * @param returnData This is a pointer to the location of the structure that
   1462           * will be populated with data.  Ver.: always
   1463           */

   \                                 In section .text, align 2, keep-with-next
   1464          EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
   1465                                                                         EmberAfOtaHeader* returnData)
   1466          {
   1467            // If the requested image cannot be found, then an error shouldb e returned.
   1468            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageGetFullHeaderCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1469          }
   1470          
   1471          /** @brief Ota Storage Get Total Image Size
   1472           *
   1473           * This function returns the total size of the ZigBee Over-the-air file with the
   1474           * passed parameters.  If no file is found with those parameters, 0 is returned.
   1475           *
   1476           * @param id A pointer to the image identifier for the OTA file to retrieve
   1477           * information for.  Ver.: always
   1478           */

   \                                 In section .text, align 2, keep-with-next
   1479          uint32_t emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id)
   1480          {
   1481            // On failure this should return an image size of zero.
   1482            return 0;
   \                     emberAfOtaStorageGetTotalImageSizeCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1483          }
   1484          
   1485          /** @brief Ota Storage Init
   1486           *
   1487           * This callback initializes the ZigBee Over-the-air storage module.
   1488           *
   1489           */

   \                                 In section .text, align 2, keep-with-next
   1490          EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void)
   1491          {
   1492            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageInitCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1493          }
   1494          
   1495          /** @brief Ota Storage Iterator First
   1496           *
   1497           * This callback lets you walk through the list of all OTA files by jumping to
   1498           * the first file in the list maintained by the storage module.  If there is no
   1499           * file then emberAfOtaInvalidImageId is returned.
   1500           *
   1501           */

   \                                 In section .text, align 2, keep-with-next
   1502          EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void)
   1503          {
   1504            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1505          
   1506            // If there are no images at all, this function should return the invalid image id.
   1507            return emberAfInvalidImageId;
   \                     emberAfOtaStorageIteratorFirstCallback: (+1)
   \        0x0   0x....             B.N      ?Subroutine3
   1508          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable6_2
   \        0x2   0x2210             MOVS     R2,#+16
   \        0x4   0x....'....        B.W      __aeabi_memcpy4
   1509          
   1510          /** @brief Ota Storage Iterator Next
   1511           *
   1512           * This callback lets you walk through the list of all OTA files by jumping to
   1513           * the next file in the list maintained by the storage module.  If there is no
   1514           * next file then emberAfOtaInvalidImageId is returned.
   1515           *
   1516           */

   \                                 In section .text, align 4, keep-with-next
   1517          EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void)
   1518          {
   1519            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1520          
   1521            // If there are no more images, this function should return the invalid image id.
   1522            return emberAfInvalidImageId;
   \                     emberAfOtaStorageIteratorNextCallback: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE ?Subroutine3
   \        0x2                      ;; // Fall through to label ?Subroutine3
   1523          }
   1524          
   1525          /** @brief Ota Storage Read Image Data
   1526           *
   1527           * This callback reads data from the specified OTA file and returns that data to
   1528           * the caller.
   1529           *
   1530           * @param id This is a pointer to the image id for the OTA file to retrieve data
   1531           * from.  Ver.: always
   1532           * @param offset This is the offset relative to the start of the image where the
   1533           * data should be read from.  Ver.: always
   1534           * @param length This is the length of data that will be read.  Ver.: always
   1535           * @param returnData This is a pointer to where the data read out of the file
   1536           * will be written to  Ver.: always
   1537           * @param returnedLength This is a pointer to a variable where the actual length
   1538           * of data read will be written to.  A short read may occur if the end of file
   1539           * was reached.  Ver.: always
   1540           */

   \                                 In section .text, align 2, keep-with-next
   1541          EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
   1542                                                                         uint32_t offset,
   1543                                                                         uint32_t length,
   1544                                                                         uint8_t* returnData,
   1545                                                                         uint32_t* returnedLength)
   1546          {
   1547            // If the requested image cannot be found, then an error should be returned.
   1548            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageReadImageDataCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1549          }
   1550          
   1551          /** @brief Ota Storage Search
   1552           *
   1553           * This callback searches through the list of all images for one that matches
   1554           * the passed parameters.  On success an image identifier is returned with a
   1555           * matching image.  On failure emberAfInvalidImageId is returned.
   1556           *
   1557           * @param manufacturerId The ZigBee assigned identifier of the manufacturer
   1558           * contained in the OTA image being searched for.  Ver.: always
   1559           * @param imageTypeId The image type identifier contained in the OTA image being
   1560           * searched for.  Ver.: always
   1561           * @param hardwareVersion This is a pointer to the hardware version that will be
   1562           * used in the search.  If the pointer is NULL, hardware version will not be
   1563           * considered when searching for matching images.  If it points to a value, the
   1564           * search will only consider images where that value falls between the minimum
   1565           * and maxmimum hardware version specified in the OTA file.  If no hardware
   1566           * version is present in an OTA file but the other parameters match, the file
   1567           * will be considered a match  Ver.: always
   1568           */

   \                                 In section .text, align 2, keep-with-next
   1569          EmberAfOtaImageId emberAfOtaStorageSearchCallback(uint16_t manufacturerId,
   1570                                                            uint16_t imageTypeId,
   1571                                                            const uint16_t* hardwareVersion)
   1572          {
   1573            // If no image is found that matches the search criteria, this function should return the invalid image id.
   1574            return emberAfInvalidImageId;
   \                     emberAfOtaStorageSearchCallback: (+1)
   \        0x0   0x....             B.N      ?Subroutine3
   1575          }
   1576          
   1577          /** @brief Ota Storage Write Temp Data
   1578           *
   1579           * This function writes to the temporary data in the storage device at the
   1580           * specified offset.  It is used when downloading a raw image over the air.
   1581           *
   1582           * @param offset The location within the download image file where to write the
   1583           * data.  Ver.: always
   1584           * @param length The length of data to write.  Ver.: always
   1585           * @param data A pointer to the temporary data that will be written to the
   1586           * storage device.  Ver.: always
   1587           */

   \                                 In section .text, align 2, keep-with-next
   1588          EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(uint32_t offset,
   1589                                                                         uint32_t length,
   1590                                                                         const uint8_t* data)
   1591          {
   1592            // If the image data cannot be stored, an error should be returned.
   1593            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageWriteTempDataCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1594          }
   1595          
   1596          /** @brief Outgoing Packet Filter
   1597           *
   1598           * ** REQUIRES INCLUDING THE PACKET-HANDOFF PLUGIN **
   1599          
   1600                  This is called by
   1601           * the Packet Handoff plugin when the stack prepares to send a packet from one
   1602           * of the protocol layers specified in ::EmberZigbeePacketType.
   1603          
   1604                  The
   1605           * packetType argument is one of the values of the ::EmberZigbeePacketType enum.
   1606           * If the stack receives an 802.15.4 MAC beacon, it will call this function with
   1607           * the packetType argument set to ::EMBER_ZIGBEE_PACKET_TYPE_BEACON.
   1608          
   1609                 
   1610           * The implementation of this callback may alter the data contained in
   1611           * packetData, modify options and flags in the auxillary data, or consume the
   1612           * packet itself, either sending the message, or discarding it as it sees fit.
   1613           *
   1614           * @param packetType the type of packet and associated protocol layer  Ver.:
   1615           * always
   1616           * @param packetData flat buffer containing the packet data associated with the
   1617           * packet type  Ver.: always
   1618           * @param size_p a pointer containing the size value of the packet  Ver.: always
   1619           * @param data auxillary data included with the packet  Ver.: always
   1620           */

   \                                 In section .text, align 2, keep-with-next
   1621          EmberPacketAction emberAfOutgoingPacketFilterCallback(EmberZigbeePacketType packetType,
   1622                                                                uint8_t* packetData,
   1623                                                                uint8_t* size_p,
   1624                                                                void* data)
   1625          {
   1626            return EMBER_ACCEPT_PACKET;
   \                     emberAfOutgoingPacketFilterCallback: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR               ;; return
   1627          }
   1628          
   1629          /** @brief Partner Link Key Exchange Request
   1630           *
   1631           * This function is called by the framework on SOC platforms when a remote node
   1632           * requests a partner link key exchange.  The application should return
   1633           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
   1634           * network coprocessor platforms, this function will not be called because the
   1635           * NCP handles partner link key exchange requests based on the binding policy.
   1636           *
   1637           * @param partner The EUI of the remote node.  Ver.: always
   1638           */

   \                                 In section .text, align 2, keep-with-next
   1639          EmberZdoStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
   1640          {
   1641            return EMBER_ZDP_NOT_SUPPORTED;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback: (+1)
   \        0x0   0x2084             MOVS     R0,#+132
   \        0x2   0x4770             BX       LR               ;; return
   1642          }
   1643          
   1644          /** @brief Partner Link Key Exchange Response
   1645           *
   1646           * This function is called by the framework when a remote node requests a
   1647           * partner link key exchange.  The application should return true to accept the
   1648           * request or false to reject it.  On network coprocessor platforms, this
   1649           * function will not be called because the NCP handles partner link key exchange
   1650           * requests based on the binding policy.
   1651           *
   1652           * @param sender The EUI of the remote node.  Ver.: always
   1653           * @param status The ZDO response status.  Ver.: always
   1654           */

   \                                 In section .text, align 2, keep-with-next
   1655          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
   1656                                                             EmberZdoStatus status)
   1657          {
   1658          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1659          
   1660          /** @brief Performing Key Establishment
   1661           *
   1662           * This function is called by the framework to determine if the device is
   1663           * performing key establishment.  The application should return true if key
   1664           * establishment is in progress.
   1665           *
   1666           */

   \                                 In section .text, align 2, keep-with-next
   1667          bool emberAfPerformingKeyEstablishmentCallback(void)
   1668          {
   1669            return false;
   \                     emberAfPerformingKeyEstablishmentCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1670          }
   1671          
   1672          /** @brief Reset To Factory Defaults
   1673           *
   1674           * This function is called by the Basic server plugin when a request to reset
   1675           * to factory defaults is received. The plugin will reset attributes managed by
   1676           * the framework to their default values. The application should perform any
   1677           * other necessary reset-related operations in this callback, including
   1678           * resetting any externally-stored attributes.
   1679           *
   1680           * @param endpoint   Ver.: always
   1681           */

   \                                 In section .text, align 2, keep-with-next
   1682          void emberAfPluginBasicResetToFactoryDefaultsCallback(uint8_t endpoint)
   1683          {
   1684          }
   \                     emberAfPluginBasicResetToFactoryDefaultsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1685          
   1686          /** @brief Compute Pwm from HSV
   1687           *
   1688           * This function is called from the color server when it is time for the PWMs to
   1689           * be driven with a new value from the HSV values.
   1690           *
   1691           * @param endpoint The identifying endpoint Ver.: always
   1692           */

   \                                 In section .text, align 2, keep-with-next
   1693          void emberAfPluginColorControlServerComputePwmFromHsvCallback(uint8_t endpoint)
   1694          {
   1695          }
   \                     emberAfPluginColorControlServerComputePwmFromHsvCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1696          
   1697          /** @brief Compute Pwm from HSV
   1698           *
   1699           * This function is called from the color server when it is time for the PWMs to
   1700           * be driven with a new value from the color temperature.
   1701           *
   1702           * @param endpoint The identifying endpoint Ver.: always
   1703           */

   \                                 In section .text, align 2, keep-with-next
   1704          void emberAfPluginColorControlServerComputePwmFromTempCallback(uint8_t endpoint)
   1705          {
   1706          }
   \                     emberAfPluginColorControlServerComputePwmFromTempCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1707          
   1708          /** @brief Compute Pwm from HSV
   1709           *
   1710           * This function is called from the color server when it is time for the PWMs to
   1711           * be driven with a new value from the color X and color Y values.
   1712           *
   1713           * @param endpoint The identifying endpoint Ver.: always
   1714           */

   \                                 In section .text, align 2, keep-with-next
   1715          void emberAfPluginColorControlServerComputePwmFromXyCallback(uint8_t endpoint)
   1716          {
   1717          }
   \                     emberAfPluginColorControlServerComputePwmFromXyCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1718          
   1719          /** @brief Rollover
   1720           *
   1721           * This function is called every time a counter exceeds its threshold.
   1722           *
   1723           * @param type The counter that rolled over Ver.: always
   1724           */

   \                                 In section .text, align 2, keep-with-next
   1725          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
   1726          {
   1727          }
   \                     emberAfPluginCountersRolloverCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1728          
   1729          /** @brief Get Group Name
   1730           *
   1731           * This function returns the name of a group with the provided group ID, should
   1732           * it exist.
   1733           *
   1734           * @param endpoint Endpoint Ver.: always
   1735           * @param groupId Group ID Ver.: always
   1736           * @param groupName Group Name Ver.: always
   1737           */

   \                                 In section .text, align 2, keep-with-next
   1738          void emberAfPluginGroupsServerGetGroupNameCallback(uint8_t endpoint,
   1739                                                             uint16_t groupId,
   1740                                                             uint8_t *groupName)
   1741          {
   1742          }
   \                     emberAfPluginGroupsServerGetGroupNameCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1743          
   1744          /** @brief Group Names Supported
   1745           *
   1746           * This function returns whether or not group names are supported.
   1747           *
   1748           * @param endpoint Endpoint Ver.: always
   1749           */

   \                                 In section .text, align 2, keep-with-next
   1750          bool emberAfPluginGroupsServerGroupNamesSupportedCallback(uint8_t endpoint)
   1751          {
   1752            return false;
   \                     emberAfPluginGroupsServerGroupNamesSupportedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1753          }
   1754          
   1755          /** @brief Set Group Name
   1756           *
   1757           * This function sets the name of a group with the provided group ID.
   1758           *
   1759           * @param endpoint Endpoint Ver.: always
   1760           * @param groupId Group ID Ver.: always
   1761           * @param groupName Group Name Ver.: always
   1762           */

   \                                 In section .text, align 2, keep-with-next
   1763          void emberAfPluginGroupsServerSetGroupNameCallback(uint8_t endpoint,
   1764                                                             uint16_t groupId,
   1765                                                             uint8_t *groupName)
   1766          {
   1767          }
   \                     emberAfPluginGroupsServerSetGroupNameCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1768          
   1769          /** @brief Start Feedback
   1770           *
   1771           * This function is called by the Identify plugin when identification begins.
   1772           * It informs the Identify Feedback plugin that it should begin providing its
   1773           * implemented feedback functionality (e.g. LED blinking, buzzer sounding,
   1774           * etc.) until the Identify plugin tells it to stop. The identify time is
   1775           * purely a matter of informational convenience; this plugin does not need to
   1776           * know how long it will identify (the Identify plugin will perform the
   1777           * necessary timekeeping.)
   1778           *
   1779           * @param endpoint The identifying endpoint Ver.: always
   1780           * @param identifyTime The identify time Ver.: always
   1781           */

   \                                 In section .text, align 2, keep-with-next
   1782          void emberAfPluginIdentifyStartFeedbackCallback(uint8_t endpoint,
   1783                                                          uint16_t identifyTime)
   1784          {
   1785          }
   \                     emberAfPluginIdentifyStartFeedbackCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1786          
   1787          /** @brief Stop Feedback
   1788           *
   1789           * This function is called by the Identify plugin when identification is
   1790           * finished. It tells the Identify Feedback plugin to stop providing its
   1791           * implemented feedback functionality.
   1792           *
   1793           * @param endpoint The identifying endpoint Ver.: always
   1794           */

   \                                 In section .text, align 2, keep-with-next
   1795          void emberAfPluginIdentifyStopFeedbackCallback(uint8_t endpoint)
   1796          {
   1797          }
   \                     emberAfPluginIdentifyStopFeedbackCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1798          
   1799          /** @brief Fragment Transmission Failed
   1800           *
   1801           * This function is called by the Interpan plugin when a fragmented
   1802           * transmission has failed.
   1803           *
   1804           * @param interpanFragmentationStatus The status describing why transmission
   1805           * failed Ver.: always
   1806           * @param fragmentNum The fragment number that encountered the failure
   1807           * Ver.: always
   1808           */

   \                                 In section .text, align 2, keep-with-next
   1809          void emberAfPluginInterpanFragmentTransmissionFailedCallback(uint8_t interpanFragmentationStatus,
   1810                                                                       uint8_t fragmentNum)
   1811          {
   1812          }
   \                     emberAfPluginInterpanFragmentTransmissionFailedCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1813          
   1814          /** @brief Message Received Over Fragments
   1815           *
   1816           * This function is called by the Interpan plugin when a fully reconstructed
   1817           * message has been received over inter-PAN fragments, or IPMFs.
   1818           *
   1819           * @param header The inter-PAN header Ver.: always
   1820           * @param msgLen The message payload length Ver.: always
   1821           * @param message The message payload Ver.: always
   1822           */

   \                                 In section .text, align 2, keep-with-next
   1823          void emberAfPluginInterpanMessageReceivedOverFragmentsCallback(const EmberAfInterpanHeader *header,
   1824                                                                         uint8_t msgLen,
   1825                                                                         uint8_t *message)
   1826          {
   1827          }
   \                     emberAfPluginInterpanMessageReceivedOverFragmentsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1828          
   1829          /** @brief Pre Message Received
   1830           *
   1831           * This function is called by the Interpan plugin when an interpan message is
   1832           * received but has not yet been handled by the plugin or the framework. The
   1833           * application should return true if the message was handled.
   1834           *
   1835           * @param header The inter-PAN header Ver.: always
   1836           * @param msgLen The message payload length Ver.: always
   1837           * @param message The message payload Ver.: always
   1838           */

   \                                 In section .text, align 2, keep-with-next
   1839          bool emberAfPluginInterpanPreMessageReceivedCallback(const EmberAfInterpanHeader *header,
   1840                                                               uint8_t msgLen,
   1841                                                               uint8_t *message)
   1842          {
   1843            return false;
   \                     emberAfPluginInterpanPreMessageReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1844          }
   1845          
   1846          /** @brief Level Control Cluster Server Post Init
   1847           *
   1848           * Following resolution of the Current Level at startup for this endpoint,
   1849           * perform any additional initialization needed; e.g., synchronize hardware
   1850           * state.
   1851           *
   1852           * @param endpoint Endpoint that is being initialized  Ver.: always
   1853           */
   1854          

   \                                 In section .text, align 2, keep-with-next
   1855          void emberAfPluginLevelControlClusterServerPostInitCallback(uint8_t endpoint)
   1856          {
   1857          }
   \                     emberAfPluginLevelControlClusterServerPostInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1858          
   1859          /** @brief Get Pan Id
   1860           *
   1861           * This callback is called when the Network Creator plugin needs the PAN ID for
   1862           * the network it is about to create. By default, the callback will return a
   1863           * random 16-bit value.
   1864           *
   1865           */

   \                                 In section .text, align 2, keep-with-next
   1866          EmberPanId emberAfPluginNetworkCreatorGetPanIdCallback(void)
   1867          {
   1868            return emberGetPseudoRandomNumber();
   \                     emberAfPluginNetworkCreatorGetPanIdCallback: (+1)
   \        0x0   0x....'....        B.W      halCommonGetRandom
   1869          }
   1870          
   1871          /** @brief Get Power For Radio Channel
   1872           *
   1873           * This callback is called when the Network Creator plugin needs the radio power for
   1874           * the network it is about to create. By default, the callback will use the radio
   1875           * power specified in the relevant plugin option.
   1876           *
   1877           */

   \                                 In section .text, align 2, keep-with-next
   1878          int8_t emberAfPluginNetworkCreatorGetRadioPowerCallback(void)
   1879          {
   1880            return EMBER_AF_PLUGIN_NETWORK_CREATOR_RADIO_POWER;
   \                     emberAfPluginNetworkCreatorGetRadioPowerCallback: (+1)
   \        0x0   0x2003             MOVS     R0,#+3
   \        0x2   0x4770             BX       LR               ;; return
   1881          }
   1882          
   1883          /** @brief Get Distributed Key
   1884           *
   1885           * This callback is fired when the Network Steering plugin needs to set the distributed
   1886           * key. The application set the distributed key from Zigbee Alliance thru this callback
   1887           * or the network steering will use the default test key.
   1888           *
   1889           * @param pointer to the distributed key struct
   1890           * @return true if the key is loaded successfully, otherwise false.
   1891           * level. Ver.: always
   1892           */

   \                                 In section .text, align 2, keep-with-next
   1893          bool emberAfPluginNetworkSteeringGetDistributedKeyCallback(EmberKeyData * key)
   1894          {
   1895            return false;
   \                     emberAfPluginNetworkSteeringGetDistributedKeyCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1896          }
   1897          
   1898          /** @brief Get Node Type
   1899           *
   1900           * This callback allows the application to set the node type that the network
   1901           * steering process will use in joining a network.
   1902           *
   1903           * @param state The current ::EmberAfPluginNetworkSteeringJoiningState.
   1904           *
   1905           * @return An ::EmberNodeType value that the network steering process will
   1906           * try to join a network as.
   1907           */

   \                                 In section .text, align 2, keep-with-next
   1908          EmberNodeType emberAfPluginNetworkSteeringGetNodeTypeCallback(EmberAfPluginNetworkSteeringJoiningState state)
   1909          {
   1910            return ((emAfCurrentZigbeeProNetwork->nodeType == EMBER_COORDINATOR)
   1911                    ? EMBER_ROUTER
   1912                    : emAfCurrentZigbeeProNetwork->nodeType);
   \                     emberAfPluginNetworkSteeringGetNodeTypeCallback: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable6_3
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x7808             LDRB     R0,[R1, #+0]
   \        0x6   0x2801             CMP      R0,#+1
   \        0x8   0xBF08             IT       EQ 
   \        0xA   0x2002             MOVEQ    R0,#+2
   \        0xC   0x4770             BX       LR               ;; return
   1913          }
   1914          
   1915          /** @brief Get Power For Radio Channel
   1916           *
   1917           * This callback is fired when the Network Steering plugin needs to set the
   1918           * power level. The application has the ability to change the max power level
   1919           * used for this particular channel.
   1920           *
   1921           * @param channel The channel that the plugin is inquiring about the power
   1922           * level. Ver.: always
   1923           */

   \                                 In section .text, align 2, keep-with-next
   1924          int8_t emberAfPluginNetworkSteeringGetPowerForRadioChannelCallback(uint8_t channel)
   1925          {
   1926            return emberAfMaxPowerLevel();
   \                     emberAfPluginNetworkSteeringGetPowerForRadioChannelCallback: (+1)
   \        0x0   0x2003             MOVS     R0,#+3
   \        0x2   0x4770             BX       LR               ;; return
   1927          }
   1928          
   1929          /** @brief On/off Cluster Server Post Init
   1930           *
   1931           * Following resolution of the On/Off state at startup for this endpoint, perform any
   1932           * additional initialization needed; e.g., synchronize hardware state.
   1933           *
   1934           * @param endpoint Endpoint that is being initialized  Ver.: always
   1935           */
   1936          /*
   1937          void emberAfPluginOnOffClusterServerPostInitCallback(uint8_t endpoint)
   1938          {
   1939          }
   1940          */
   1941          /** @brief Configured
   1942           *
   1943           * This callback is called by the Reporting plugin whenever a reporting entry
   1944           * is configured, including when entries are deleted or updated. The
   1945           * application can use this callback for scheduling readings or measurements
   1946           * based on the minimum and maximum reporting interval for the entry. The
   1947           * application should return EMBER_ZCL_STATUS_SUCCESS if it can support the
   1948           * configuration or an error status otherwise. Note: attribute reporting is
   1949           * required for many clusters and attributes, so rejecting a reporting
   1950           * configuration may violate ZigBee specifications.
   1951           *
   1952           * @param entry   Ver.: always
   1953           */

   \                                 In section .text, align 2, keep-with-next
   1954          EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry *entry)
   1955          {
   1956            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginReportingConfiguredCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   1957          }
   1958          
   1959          /** @brief Configured
   1960           *
   1961           * This callback is called by the Reporting plugin to get the default reporting
   1962           * configuration values from user if there is no default value available within
   1963           * af generated default reporting configuration tabel. The application need to
   1964           * write to the minInterval, maxInterval and reportable change in the passed
   1965           * IO pointer in the arguement while handleing this callback, then application
   1966           * shall return true if it has provided the default values or else false for
   1967           * reporting plugin to further handleing.
   1968           *
   1969           * @param entry   Ver.: always
   1970           */

   \                                 In section .text, align 2, keep-with-next
   1971          bool emberAfPluginReportingGetDefaultReportingConfigCallback(EmberAfPluginReportingEntry *entry)
   1972          {
   1973            // Change the values as appropriate for the application.
   1974            entry->data.reported.minInterval = 1;
   1975            entry->data.reported.maxInterval = 0xFFFE;
   \                     emberAfPluginReportingGetDefaultReportingConfigCallback: (+1)
   \        0x0   0xF64F 0x72FE      MOVW     R2,#+65534
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x81C2             STRH     R2,[R0, #+14]
   \        0x8   0x8181             STRH     R1,[R0, #+12]
   1976            entry->data.reported.reportableChange = 1;
   \        0xA   0x6101             STR      R1,[R0, #+16]
   1977            entry->direction = EMBER_ZCL_REPORTING_DIRECTION_REPORTED;
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x7002             STRB     R2,[R0, #+0]
   1978            return true;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x4770             BX       LR               ;; return
   1979          }
   1980          
   1981          /** @brief Initial Security State
   1982           *
   1983           * This function is called by the ZLL Commissioning Common plugin to determine the
   1984           * initial security state to be used by the device. The application must
   1985           * populate the ::EmberZllInitialSecurityState structure with a configuration
   1986           * appropriate for the network being formed, joined, or started. Once the
   1987           * device forms, joins, or starts a network, the same security configuration
   1988           * will remain in place until the device leaves the network.
   1989           *
   1990           * @param securityState The security configuration to be populated by the
   1991           * application and ultimately set in the stack. Ver.: always
   1992           */

   \                                 In section .text, align 2, keep-with-next
   1993          void emberAfPluginZllCommissioningCommonInitialSecurityStateCallback(EmberZllInitialSecurityState *securityState)
   1994          {
   1995          }
   \                     emberAfPluginZllCommissioningCommonInitialSecurityStateCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   1996          
   1997          /** @brief Reset To Factory New
   1998           *
   1999           * This function is called by the ZLL Commissioning Common plugin when a request to
   2000           * reset to factory new is received. The plugin will leave the network, reset
   2001           * attributes managed by the framework to their default values, and clear the
   2002           * group and scene tables. The application should perform any other necessary
   2003           * reset-related operations in this callback, including resetting any
   2004           * externally-stored attributes.
   2005           *
   2006           */

   \                                 In section .text, align 2, keep-with-next
   2007          void emberAfPluginZllCommissioningCommonResetToFactoryNewCallback(void)
   2008          {
   2009          }
   \                     emberAfPluginZllCommissioningCommonResetToFactoryNewCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2010          
   2011          /** @brief Touch Link Complete
   2012           *
   2013           * This function is called by the ZLL Commissioning Common plugin when touch linking
   2014           * completes.
   2015           *
   2016           * @param networkInfo The ZigBee and ZLL-specific information about the network
   2017           * and target. Ver.: always
   2018           * @param deviceInformationRecordCount The number of sub-device information
   2019           * records for the target. Ver.: always
   2020           * @param deviceInformationRecordList The list of sub-device information
   2021           * records for the target. Ver.: always
   2022           */

   \                                 In section .text, align 2, keep-with-next
   2023          void emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback(const EmberZllNetwork *networkInfo,
   2024                                                                            uint8_t deviceInformationRecordCount,
   2025                                                                            const EmberZllDeviceInfoRecord *deviceInformationRecordList)
   2026          {
   2027          }
   \                     emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2028          
   2029          /** @brief Endpoint Information
   2030           *
   2031           * This function is called by the ZLL Commissining Server plugin to obtain
   2032           * information about the remote endpoints controlled by a specific endpoint on
   2033           * the local device. The application should populate the record with
   2034           * information about the remote endpoint and return true. If no information is
   2035           * available for the given endpoint and index, the application should return
   2036           * false.
   2037           *
   2038           * @param endpoint The local endpoint for which the remote endpoint information
   2039           * is requested. Ver.: always
   2040           * @param index The index of the remote endpoint information on the local
   2041           * endpoint. Ver.: always
   2042           * @param record The endpoint information record. Ver.: always
   2043           */

   \                                 In section .text, align 2, keep-with-next
   2044          bool emberAfPluginZllCommissioningServerEndpointInformationCallback(uint8_t endpoint,
   2045                                                                              uint8_t index,
   2046                                                                              EmberAfPluginZllCommissioningEndpointInformationRecord *record)
   2047          {
   2048            return false;
   \                     emberAfPluginZllCommissioningServerEndpointInformationCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2049          }
   2050          
   2051          /** @brief Endpoint Information Count
   2052           *
   2053           * This function is called by the ZLL Commissining Server plugin to determine the
   2054           * number of remote endpoints controlled by a specific endpoint on the local
   2055           * device.
   2056           *
   2057           * @param endpoint The local endpoint for which the remote endpoint information
   2058           * count is requested. Ver.: always
   2059           */

   \                                 In section .text, align 2, keep-with-next
   2060          uint8_t emberAfPluginZllCommissioningServerEndpointInformationCountCallback(uint8_t endpoint)
   2061          {
   2062            return 0x00;
   \                     emberAfPluginZllCommissioningServerEndpointInformationCountCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2063          }
   2064          
   2065          /** @brief Group Identifier
   2066           *
   2067           * This function is called by the ZLL Commissining Server plugin to obtain
   2068           * information about the group identifiers in use by a specific endpoint on the
   2069           * device. The application should populate the record with information about
   2070           * the group identifier and return true. If no information is available for the
   2071           * given endpoint and index, the application should return false.
   2072           *
   2073           * @param endpoint The endpoint for which the group identifier is requested.
   2074           * Ver.: always
   2075           * @param index The index of the group on the endpoint. Ver.: always
   2076           * @param record The group information record. Ver.: always
   2077           */

   \                                 In section .text, align 2, keep-with-next
   2078          bool emberAfPluginZllCommissioningServerGroupIdentifierCallback(uint8_t endpoint,
   2079                                                                          uint8_t index,
   2080                                                                          EmberAfPluginZllCommissioningGroupInformationRecord *record)
   2081          {
   2082            return false;
   \                     emberAfPluginZllCommissioningServerGroupIdentifierCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2083          }
   2084          
   2085          /** @brief Group Identifier Count
   2086           *
   2087           * This function is called by the ZLL Commissining Server plugin to determine the
   2088           * number of group identifiers in use by a specific endpoint on the device. The
   2089           * total number of group identifiers on the device, which are shared by all
   2090           * endpoints, is defined by ::EMBER_ZLL_GROUP_ADDRESSES.
   2091           *
   2092           * @param endpoint The endpoint for which the group identifier count is
   2093           * requested. Ver.: always
   2094           */

   \                                 In section .text, align 2, keep-with-next
   2095          uint8_t emberAfPluginZllCommissioningServerGroupIdentifierCountCallback(uint8_t endpoint)
   2096          {
   2097            return 0x00;
   \                     emberAfPluginZllCommissioningServerGroupIdentifierCountCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2098          }
   2099          
   2100          /** @brief Identify
   2101           *
   2102           * This function is called by the ZLL Commissining Server plugin to notify the
   2103           * application that it should take an action to identify itself. This typically
   2104           * occurs when an Identify Request is received via inter-PAN messaging.
   2105           *
   2106           * @param durationS If the duration is zero, the device should exit identify
   2107           * mode. If the duration is 0xFFFF, the device should remain in identify mode
   2108           * for the default time. Otherwise, the duration specifies the length of time
   2109           * in seconds that the device should remain in identify mode. Ver.: always
   2110           */

   \                                 In section .text, align 2, keep-with-next
   2111          void emberAfPluginZllCommissioningServerIdentifyCallback(uint16_t durationS)
   2112          {
   2113          }
   \                     emberAfPluginZllCommissioningServerIdentifyCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2114          
   2115          /** @brief Off With Effect
   2116           *
   2117           * This callback is called by the ZLL On/Off Server plugin whenever an
   2118           * OffWithEffect command is received. The application should implement the
   2119           * effect and variant requested in the command and return
   2120           * ::EMBER_ZCL_STATUS_SUCCESS if successful or an appropriate error status
   2121           * otherwise.
   2122           *
   2123           * @param endpoint   Ver.: always
   2124           * @param effectId   Ver.: always
   2125           * @param effectVariant   Ver.: always
   2126           */

   \                                 In section .text, align 2, keep-with-next
   2127          EmberAfStatus emberAfPluginZllOnOffServerOffWithEffectCallback(uint8_t endpoint,
   2128                                                                         uint8_t effectId,
   2129                                                                         uint8_t effectVariant)
   2130          {
   2131            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginZllOnOffServerOffWithEffectCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2132          }
   2133          
   2134          /** @brief Post Attribute Change
   2135           *
   2136           * This function is called by the application framework after it changes an
   2137           * attribute value. The value passed into this callback is the value to which
   2138           * the attribute was set by the framework.
   2139           *
   2140           * @param endpoint   Ver.: always
   2141           * @param clusterId   Ver.: always
   2142           * @param attributeId   Ver.: always
   2143           * @param mask   Ver.: always
   2144           * @param manufacturerCode   Ver.: always
   2145           * @param type   Ver.: always
   2146           * @param size   Ver.: always
   2147           * @param value   Ver.: always
   2148           */

   \                                 In section .text, align 2, keep-with-next
   2149          void emberAfPostAttributeChangeCallback(uint8_t endpoint,
   2150                                                  EmberAfClusterId clusterId,
   2151                                                  EmberAfAttributeId attributeId,
   2152                                                  uint8_t mask,
   2153                                                  uint16_t manufacturerCode,
   2154                                                  uint8_t type,
   2155                                                  uint8_t size,
   2156                                                  uint8_t* value)
   2157          {
   2158          }
   \                     emberAfPostAttributeChangeCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2159          
   2160          /** @brief Pre Attribute Change
   2161           *
   2162           * This function is called by the application framework before it changes an
   2163           * attribute value.  The value passed into this callback is the value to which
   2164           * the attribute is to be set by the framework.  The application should return
   2165           * ::EMBER_ZCL_STATUS_SUCCESS to permit the change or any other ::EmberAfStatus
   2166           * to reject it.
   2167           *
   2168           * @param endpoint   Ver.: always
   2169           * @param clusterId   Ver.: always
   2170           * @param attributeId   Ver.: always
   2171           * @param mask   Ver.: always
   2172           * @param manufacturerCode   Ver.: always
   2173           * @param type   Ver.: always
   2174           * @param size   Ver.: always
   2175           * @param value   Ver.: always
   2176           */

   \                                 In section .text, align 2, keep-with-next
   2177          EmberAfStatus emberAfPreAttributeChangeCallback(uint8_t endpoint,
   2178                                                          EmberAfClusterId clusterId,
   2179                                                          EmberAfAttributeId attributeId,
   2180                                                          uint8_t mask,
   2181                                                          uint16_t manufacturerCode,
   2182                                                          uint8_t type,
   2183                                                          uint8_t size,
   2184                                                          uint8_t* value)
   2185          {
   2186            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPreAttributeChangeCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2187          }
   2188          
   2189          /** @brief Pre Cli Send
   2190           *
   2191           * This function is called by the framework when it is about to pass a message
   2192           * constructed over CLI to the stack primitives for sending. If the function
   2193           * returns true it is assumed that the callback has consumed and processed the
   2194           * message. The framework will not do any further processing on the message.
   2195             
   2196           *     If the function returns false then it is assumed that the callback has
   2197           * not processed the message and the framework will continue to process
   2198           * accordingly.
   2199           *
   2200           * @param apsFrame The structure containing the APS frame  Ver.: always
   2201           * @param source Source Node Id  Ver.: always
   2202           * @param destination Destintion Node Id  Ver.: always
   2203           * @param message Pointer to the message payload  Ver.: always
   2204           * @param messageLength Length of the message payload  Ver.: always
   2205           */

   \                                 In section .text, align 2, keep-with-next
   2206          bool emberAfPreCliSendCallback(EmberApsFrame* apsFrame,
   2207                                         EmberNodeId source,
   2208                                         EmberNodeId destination,
   2209                                         uint8_t* message,
   2210                                         uint16_t messageLength)
   2211          {
   2212            return false;
   \                     emberAfPreCliSendCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2213          }
   2214          
   2215          /** @brief Pre Command Received
   2216           *
   2217           * This callback is the second in the Application Framework's message processing
   2218           * chain. At this point in the processing of incoming over-the-air messages, the
   2219           * application has determined that the incoming message is a ZCL command. It
   2220           * parses enough of the message to populate an EmberAfClusterCommand struct. The
   2221           * Application Framework defines this struct value in a local scope to the
   2222           * command processing but also makes it available through a global pointer
   2223           * called emberAfCurrentCommand, in app/framework/util/util.c. When command
   2224           * processing is complete, this pointer is cleared.
   2225           *
   2226           * @param cmd   Ver.: always
   2227           */

   \                                 In section .text, align 2, keep-with-next
   2228          bool emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd)
   2229          {
   2230            return false;
   \                     emberAfPreCommandReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2231          }
   2232          
   2233          /** @brief Pre Message Received
   2234           *
   2235           * This callback is the first in the Application Framework's message processing
   2236           * chain. The Application Framework calls it when a message has been received
   2237           * over the air but has not yet been parsed by the ZCL command-handling code. If
   2238           * you wish to parse some messages that are completely outside the ZCL
   2239           * specification or are not handled by the Application Framework's command
   2240           * handling code, you should intercept them for parsing in this callback. 
   2241               
   2242           *   This callback returns a Boolean value indicating whether or not the message
   2243           * has been handled. If the callback returns a value of true, then the
   2244           * Application Framework assumes that the message has been handled and it does
   2245           * nothing else with it. If the callback returns a value of false, then the
   2246           * application framework continues to process the message as it would with any
   2247           * incoming message.
   2248                  Note: 	This callback receives a pointer to an
   2249           * incoming message struct. This struct allows the application framework to
   2250           * provide a unified interface between both Host devices, which receive their
   2251           * message through the ezspIncomingMessageHandler, and SoC devices, which
   2252           * receive their message through emberIncomingMessageHandler.
   2253           *
   2254           * @param incomingMessage   Ver.: always
   2255           */

   \                                 In section .text, align 2, keep-with-next
   2256          bool emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   2257          {
   2258            return false;
   \                     emberAfPreMessageReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2259          }
   2260          
   2261          /** @brief Pre Message Send
   2262           *
   2263           * This function is called by the framework when it is about to pass a message
   2264           * to the stack primitives for sending.   This message may or may not be ZCL,
   2265           * ZDO, or some other protocol.  This is called prior to
   2266                  any ZigBee
   2267           * fragmentation that may be done.  If the function returns true it is assumed
   2268           * the callback has consumed and processed the message.  The callback must also
   2269           * set the EmberStatus status code to be passed back to the caller.  The
   2270           * framework will do no further processing on the message.
   2271                  If the
   2272           * function returns false then it is assumed that the callback has not processed
   2273           * the mesasge and the framework will continue to process accordingly.
   2274           *
   2275           * @param messageStruct The structure containing the parameters of the APS
   2276           * message to be sent.  Ver.: always
   2277           * @param status A pointer to the status code value that will be returned to the
   2278           * caller.  Ver.: always
   2279           */

   \                                 In section .text, align 2, keep-with-next
   2280          bool emberAfPreMessageSendCallback(EmberAfMessageStruct* messageStruct,
   2281                                             EmberStatus* status)
   2282          {
   2283            return false;
   \                     emberAfPreMessageSendCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2284          }
   2285          
   2286          /** @brief Pre Ncp Reset
   2287           *
   2288           * This function will be called prior to the reset of the NCP by the host.
   2289           *
   2290           */

   \                                 In section .text, align 2, keep-with-next
   2291          void emberAfPreNcpResetCallback(void)
   2292          {
   2293          }
   \                     emberAfPreNcpResetCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2294          
   2295          /** @brief Pre ZDO Message Received
   2296           *
   2297           * This function passes the application an incoming ZDO message and gives the
   2298           * appictation the opportunity to handle it. By default, this callback returns
   2299           * false indicating that the incoming ZDO message has not been handled and
   2300           * should be handled by the Application Framework.
   2301           *
   2302           * @param emberNodeId   Ver.: always
   2303           * @param apsFrame   Ver.: always
   2304           * @param message   Ver.: always
   2305           * @param length   Ver.: always
   2306           */

   \                                 In section .text, align 2, keep-with-next
   2307          bool emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
   2308                                                    EmberApsFrame* apsFrame,
   2309                                                    uint8_t* message,
   2310                                                    uint16_t length)
   2311          {
   2312            return false;
   \                     emberAfPreZDOMessageReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2313          }
   2314          
   2315          /** @brief Read Attributes Response
   2316           *
   2317           * This function is called by the application framework when a Read Attributes
   2318           * Response command is received from an external device.  The application should
   2319           * return true if the message was processed or false if it was not.
   2320           *
   2321           * @param clusterId The cluster identifier of this response.  Ver.: always
   2322           * @param buffer Buffer containing the list of read attribute status records. 
   2323           * Ver.: always
   2324           * @param bufLen The length in bytes of the list.  Ver.: always
   2325           */

   \                                 In section .text, align 2, keep-with-next
   2326          bool emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
   2327                                                     uint8_t *buffer,
   2328                                                     uint16_t bufLen)
   2329          {
   2330            return false;
   \                     emberAfReadAttributesResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2331          }
   2332          
   2333          /** @brief Read Reporting Configuration Response
   2334           *
   2335           * This function is called by the application framework when a Read Reporting
   2336           * Configuration Response command is received from an external device.  The
   2337           * application should return true if the message was processed or false if it
   2338           * was not.
   2339           *
   2340           * @param clusterId The cluster identifier of this response.  Ver.: always
   2341           * @param buffer Buffer containing the list of attribute reporting configuration
   2342           * records.  Ver.: always
   2343           * @param bufLen The length in bytes of the list.  Ver.: always
   2344           */

   \                                 In section .text, align 2, keep-with-next
   2345          bool emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
   2346                                                                 uint8_t *buffer,
   2347                                                                 uint16_t bufLen)
   2348          {
   2349            return false;
   \                     emberAfReadReportingConfigurationResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2350          }
   2351          
   2352          /** @brief Registration Abort
   2353           *
   2354           * This callback is called when the device should abort the registration
   2355           * process.
   2356           *
   2357           */

   \                                 In section .text, align 2, keep-with-next
   2358          void emberAfRegistrationAbortCallback(void)
   2359          {
   2360          }
   \                     emberAfRegistrationAbortCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2361          
   2362          /** @brief Registration
   2363           *
   2364           * This callback is called when the device joins a network and the process of
   2365           * registration is complete. This callback provides a success value of true if
   2366           * the registration process was successful and a value of false if registration
   2367           * failed.
   2368           *
   2369           * @param success true if registration succeeded, false otherwise.  Ver.: always
   2370           */

   \                                 In section .text, align 2, keep-with-next
   2371          void emberAfRegistrationCallback(bool success)
   2372          {
   2373          }
   \                     emberAfRegistrationCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2374          
   2375          /** @brief Registration Start
   2376           *
   2377           * This callback is called when the device joins a network and the registration
   2378           * process should begin.  The application should return EMBER_SUCCESS if the
   2379           * registration process started successfully.  When registration is complete,
   2380           * the application should call emberAfRegistrationCallback with an indication of
   2381           * success or failure.
   2382           *
   2383           */

   \                                 In section .text, align 2, keep-with-next
   2384          EmberStatus emberAfRegistrationStartCallback(void)
   2385          {
   2386            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
   2387          }
   2388          
   2389          /** @brief Remote Delete Binding Permission
   2390           *
   2391           * This function is called by the framework to request permission to service the
   2392           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   2393           * anything else to disallow request.
   2394           *
   2395           * @param index index to an Ember binding table entry  Ver.: always
   2396           */

   \                                 In section .text, align 2, keep-with-next
   2397          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(uint8_t index)
   2398          {
   2399            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2400          }
   2401          
   2402          /** @brief Remote Set Binding Permission
   2403           *
   2404           * This function is called by the framework to request permission to service the
   2405           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   2406           * else to disallow request.
   2407           *
   2408           * @param entry Ember Binding Tablet Entry  Ver.: always
   2409           */

   \                                 In section .text, align 2, keep-with-next
   2410          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry)
   2411          {
   2412            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2413          }
   2414          
   2415          /** @brief Remove From Current App Tasks
   2416           *
   2417           * This function is only useful to sleepy end devices.  This function will
   2418           * remove the passed item from the set of tasks the application has outstanding
   2419           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
   2420           * application behaves with regard to sleeping and polling.  Removing the item
   2421           * from the list of outstanding tasks may allow the device to sleep longer and
   2422           * poll less frequently.  If there are other outstanding tasks the system may
   2423           * still have to stay away and poll more often.
   2424           *
   2425           * @param tasks   Ver.: always
   2426           */

   \                                 In section .text, align 2, keep-with-next
   2427          void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks)
   2428          {
   2429          }
   \                     emberAfRemoveFromCurrentAppTasksCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2430          
   2431          /** @brief Report Attributes
   2432           *
   2433           * This function is called by the application framework when a Report Attributes
   2434           * command is received from an external device.  The application should return
   2435           * true if the message was processed or false if it was not.
   2436           *
   2437           * @param clusterId The cluster identifier of this command.  Ver.: always
   2438           * @param buffer Buffer containing the list of attribute report records.  Ver.:
   2439           * always
   2440           * @param bufLen The length in bytes of the list.  Ver.: always
   2441           */

   \                                 In section .text, align 2, keep-with-next
   2442          bool emberAfReportAttributesCallback(EmberAfClusterId clusterId,
   2443                                               uint8_t *buffer,
   2444                                               uint16_t bufLen)
   2445          {
   2446            return false;
   \                     emberAfReportAttributesCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2447          }
   2448          
   2449          /** @brief Scan Error
   2450           *
   2451           * This is called by the framework on behalf of the form-and-join library to
   2452           * notify the application if an error occurs while scanning.  See form-and-join
   2453           * documentation for more information.
   2454           *
   2455           * @param status The status of the scan.  Ver.: always
   2456           */

   \                                 In section .text, align 2, keep-with-next
   2457          void emberAfScanErrorCallback(EmberStatus status)
   2458          {
   2459          }
   \                     emberAfScanErrorCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2460          
   2461          /** @brief Security Init
   2462           *
   2463           * This callback is called by the framework to give the application a chance to
   2464           * modify the security settings of the node during network initialization. 
   2465           * Depending on the context when this callback is called, the pointer to the
   2466           * initial security state may be NULL, which means the initial security state
   2467           * can no longer be modified as the node is already operating on the network.
   2468           *
   2469           * @param state   Ver.: always
   2470           * @param extended   Ver.: always
   2471           * @param trustCenter   Ver.: always
   2472           */

   \                                 In section .text, align 2, keep-with-next
   2473          void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
   2474                                           EmberExtendedSecurityBitmask *extended,
   2475                                           bool trustCenter)
   2476          {
   2477          }
   \                     emberAfSecurityInitCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2478          
   2479          /** @brief Key Establishment Cluster Server Command Received
   2480           *
   2481           * This function is called by the application framework when a client-to-server
   2482           * key establishment command is received but has yet to be handled by the
   2483           * framework code.  This function should return a bool value indicating whether
   2484           * the command has been handled by the application code and should not be
   2485           * further processed by the framework.
   2486           *
   2487           * @param cmd   Ver.: always
   2488           */

   \                                 In section .text, align 2, keep-with-next
   2489          bool emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd)
   2490          {
   2491            return false;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2492          }
   2493          
   2494          /** @brief Set Default Poll Control
   2495           *
   2496           * This function will set the default poll control for the current network to
   2497           * control whether or not it can long poll.
   2498           *
   2499           * @param control   Ver.: always
   2500           */

   \                                 In section .text, align 2, keep-with-next
   2501          void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control)
   2502          {
   2503          }
   \                     emberAfSetDefaultPollControlCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2504          
   2505          /** @brief Set Default Sleep Control
   2506           *
   2507           * This function will set the default behavior of a sleeping device to control
   2508           * whether or not it must stay awake.  A device that stays awake does not sleep
   2509           * at all.  Otherwise, the device can sleep between events when appropriate.
   2510           *
   2511           * @param control   Ver.: always
   2512           */

   \                                 In section .text, align 2, keep-with-next
   2513          void emberAfSetDefaultSleepControlCallback(EmberAfEventSleepControl control)
   2514          {
   2515          }
   \                     emberAfSetDefaultSleepControlCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2516          
   2517          /** @brief Set Form And Join Extended Pan Id
   2518           *
   2519           * This callback is called by the framework to set the extended PAN ID used by
   2520           * the current network for forming and joining.  The extended PAN ID used for
   2521           * forming and joining is not necessarily the same extended PAN ID actually in
   2522           * use on the network.
   2523           *
   2524           * @param extendedPanId   Ver.: always
   2525           */

   \                                 In section .text, align 2, keep-with-next
   2526          void emberAfSetFormAndJoinExtendedPanIdCallback(const uint8_t *extendedPanId)
   2527          {
   2528          }
   \                     emberAfSetFormAndJoinExtendedPanIdCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2529          
   2530          /** @brief Set Long Poll Interval Ms
   2531           *
   2532           * This function is only useful to end devices.  This function will set the long
   2533           * poll interval (in milliseconds) for the current network.  This interval is
   2534           * the maximum amount of time a child will wait between polls of its parent when
   2535           * it is not expecting data.
   2536           *
   2537           * @param longPollIntervalMs   Ver.: always
   2538           */

   \                                 In section .text, align 2, keep-with-next
   2539          void emberAfSetLongPollIntervalMsCallback(uint32_t longPollIntervalMs)
   2540          {
   2541          }
   \                     emberAfSetLongPollIntervalMsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2542          
   2543          /** @brief Set Long Poll Interval Qs
   2544           *
   2545           * This function is only useful to end devices.  This function will set the long
   2546           * poll interval (in quarter seconds) for the current network.  This interval is
   2547           * the maximum amount of time a child will wait between polls of its parent when
   2548           * it is not expecting data.
   2549           *
   2550           * @param longPollIntervalQs   Ver.: always
   2551           */

   \                                 In section .text, align 2, keep-with-next
   2552          void emberAfSetLongPollIntervalQsCallback(uint32_t longPollIntervalQs)
   2553          {
   2554          }
   \                     emberAfSetLongPollIntervalQsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2555          
   2556          /** @brief Set Short Poll Interval Ms
   2557           *
   2558           * This function is only useful to sleepy end devices.  This function will set
   2559           * the short poll interval (in milliseconds) for the current network.  This
   2560           * interval is the maximum amount of time a child will wait between polls of its
   2561           * parent when it is expecting data.
   2562           *
   2563           * @param shortPollIntervalMs   Ver.: always
   2564           */

   \                                 In section .text, align 2, keep-with-next
   2565          void emberAfSetShortPollIntervalMsCallback(uint16_t shortPollIntervalMs)
   2566          {
   2567          }
   \                     emberAfSetShortPollIntervalMsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2568          
   2569          /** @brief Set Short Poll Interval Qs
   2570           *
   2571           * This function is only useful to sleepy end devices.  This function will set
   2572           * the short poll interval (in quarter seconds) for the current network.  This
   2573           * interval is the maximum amount of time a child will wait between polls of its
   2574           * parent when it is expecting data.
   2575           *
   2576           * @param shortPollIntervalQs   Ver.: always
   2577           */

   \                                 In section .text, align 2, keep-with-next
   2578          void emberAfSetShortPollIntervalQsCallback(uint16_t shortPollIntervalQs)
   2579          {
   2580          }
   \                     emberAfSetShortPollIntervalQsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2581          
   2582          /** @brief Set Source Route Overhead
   2583           *
   2584           * This function is called by the framework when it has information about the
   2585           * source route overhead to a particular destination. The application may use
   2586           * this information to cache the source route overhead.
   2587           *
   2588           * @param destination The node id of the destination  Ver.: always
   2589           * @param overhead The overhead in bytes  Ver.: always
   2590           */

   \                                 In section .text, align 2, keep-with-next
   2591          void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
   2592                                                     uint8_t overhead)
   2593          {
   2594          }
   \                     emberAfSetSourceRouteOverheadCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2595          
   2596          /** @brief Set Time
   2597           *
   2598           * This callback should be implemented, if the device has access to real time
   2599           * clock, and has an ability to update that clock. The application framework
   2600           * expects to be passed the utcTime which is the number of seconds since the
   2601           * year 2000. Default implementation does nothing. Note: This function used to
   2602           * take time in year, month, day, hour, min, sec. We have changed this to
   2603           * utcTime in order to conserve code space.
   2604           *
   2605           * @param utcTime   Ver.: always
   2606           */

   \                                 In section .text, align 2, keep-with-next
   2607          void emberAfSetTimeCallback(uint32_t utcTime)
   2608          {
   2609          }
   \                     emberAfSetTimeCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2610          
   2611          /** @brief Set Wake Timeout Bitmask
   2612           *
   2613           * This function is only useful to sleepy end devices.  This function will set
   2614           * the wake timeout bitmask for the current network.  The bitmask determines
   2615           * which tasks will timeout automatically and which tasks require manual removal
   2616           * from the task list.
   2617           *
   2618           * @param tasks   Ver.: always
   2619           */

   \                                 In section .text, align 2, keep-with-next
   2620          void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks)
   2621          {
   2622          }
   \                     emberAfSetWakeTimeoutBitmaskCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2623          
   2624          /** @brief Set Wake Timeout Ms
   2625           *
   2626           * This function is only useful to sleepy end devices.  This function will set
   2627           * the wake timeout (in milliseconds) for the current network.  This timeout is
   2628           * the maximum amount of time a child will wait for a task in the wake bitmask
   2629           * to finish.  While waiting, the device will short poll.
   2630           *
   2631           * @param wakeTimeoutMs   Ver.: always
   2632           */

   \                                 In section .text, align 2, keep-with-next
   2633          void emberAfSetWakeTimeoutMsCallback(uint16_t wakeTimeoutMs)
   2634          {
   2635          }
   \                     emberAfSetWakeTimeoutMsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2636          
   2637          /** @brief Set Wake Timeout Qs
   2638           *
   2639           * This function is only useful to sleepy end devices.  This function will set
   2640           * the wake timeout (in quarter seconds) for the current network.  This timeout
   2641           * is the maximum amount of time a child will wait for a task in the wake
   2642           * bitmask to finish.  While waiting, the device will short poll.
   2643           *
   2644           * @param wakeTimeoutQs   Ver.: always
   2645           */

   \                                 In section .text, align 2, keep-with-next
   2646          void emberAfSetWakeTimeoutQsCallback(uint16_t wakeTimeoutQs)
   2647          {
   2648          }
   \                     emberAfSetWakeTimeoutQsCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2649          
   2650          /** @brief Start Move
   2651           *
   2652           * This function is called to initiate the process for a device to move (rejoin)
   2653           * to a new parent.
   2654           *
   2655           */

   \                                 In section .text, align 2, keep-with-next
   2656          bool emberAfStartMoveCallback(void)
   2657          {
   2658            return false;
   \                     emberAfStartMoveCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2659          }
   2660          
   2661          /** @brief Start Search For Joinable Network
   2662           *
   2663           * This function is called by the framework to search for joinable networks and
   2664           * join a network.  The application should return EMBER_SUCCESS if the operation
   2665           * was initiated successfully.
   2666           *
   2667           */

   \                                 In section .text, align 2, keep-with-next
   2668          EmberStatus emberAfStartSearchForJoinableNetworkCallback(void)
   2669          {
   2670            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfStartSearchForJoinableNetworkCallback: (+1)
   \        0x0   0x20B5             MOVS     R0,#+181
   \        0x2   0x4770             BX       LR               ;; return
   2671          }
   2672          
   2673          /** @brief Stop Move
   2674           *
   2675           * This function is called to cancel a previously scheduled move (rejoin) to a
   2676           * new parent.
   2677           *
   2678           */

   \                                 In section .text, align 2, keep-with-next
   2679          void emberAfStopMoveCallback(void)
   2680          {
   2681          }
   \                     emberAfStopMoveCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2682          
   2683          /** @brief Trust Center Join
   2684           *
   2685           * This callback is called from within the application framework's
   2686           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   2687           * This callback provides the same arguments passed to the
   2688           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   2689           * please see documentation included in stack/include/trust-center.h.
   2690           *
   2691           * @param newNodeId   Ver.: always
   2692           * @param newNodeEui64   Ver.: always
   2693           * @param parentOfNewNode   Ver.: always
   2694           * @param status   Ver.: always
   2695           * @param decision   Ver.: always
   2696           */

   \                                 In section .text, align 2, keep-with-next
   2697          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   2698                                              EmberEUI64 newNodeEui64,
   2699                                              EmberNodeId parentOfNewNode,
   2700                                              EmberDeviceUpdate status,
   2701                                              EmberJoinDecision decision)
   2702          {
   2703          }
   \                     emberAfTrustCenterJoinCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2704          
   2705          /** @brief Trust Center Keepalive Abort
   2706           *
   2707           * This callback is called when the device should abort the trust center
   2708           * keepalive process.
   2709           *
   2710           */

   \                                 In section .text, align 2, keep-with-next
   2711          void emberAfTrustCenterKeepaliveAbortCallback(void)
   2712          {
   2713          }
   \                     emberAfTrustCenterKeepaliveAbortCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2714          
   2715          /** @brief Trust Center Keepalive Update
   2716           *
   2717           * This callback is called when the device finishes registration (successfully
   2718           * or otherwise) and the trust center keepalive process must be updated.  If the
   2719           * keepalive process has not been started, then it is started.  Otherwise if the
   2720           * keepalive is in the process of searching for the TC, it will process the
   2721           * result of that Trust Center search operation.
   2722           *
   2723           * @param registrationComplete   Ver.: always
   2724           */

   \                                 In section .text, align 2, keep-with-next
   2725          void emberAfTrustCenterKeepaliveUpdateCallback(bool registrationComplete)
   2726          {
   2727          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2728          
   2729          /** @brief Unused Pan Id Found
   2730           *
   2731           * This is called by the framework on behalf of the form-and-join library to
   2732           * notify the application of the PAN id and channel found following a call to
   2733           * ::emberScanForUnusedPanId().  See form-and-join documentation for more
   2734           * information.
   2735           *
   2736           * @param panId   Ver.: always
   2737           * @param channel   Ver.: always
   2738           */

   \                                 In section .text, align 2, keep-with-next
   2739          void emberAfUnusedPanIdFoundCallback(EmberPanId panId,
   2740                                               uint8_t channel)
   2741          {
   2742          }
   \                     emberAfUnusedPanIdFoundCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2743          
   2744          /** @brief Write Attributes Response
   2745           *
   2746           * This function is called by the application framework when a Write Attributes
   2747           * Response command is received from an external device.  The application should
   2748           * return true if the message was processed or false if it was not.
   2749           *
   2750           * @param clusterId The cluster identifier of this response.  Ver.: always
   2751           * @param buffer Buffer containing the list of write attribute status records. 
   2752           * Ver.: always
   2753           * @param bufLen The length in bytes of the list.  Ver.: always
   2754           */

   \                                 In section .text, align 2, keep-with-next
   2755          bool emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
   2756                                                      uint8_t *buffer,
   2757                                                      uint16_t bufLen)
   2758          {
   2759            return false;
   \                     emberAfWriteAttributesResponseCallback: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
   2760          }
   2761          
   2762          /** @brief Zigbee Key Establishment
   2763           *
   2764           * A callback to the application to notify it of the status of the request for a
   2765           * Link Key.
   2766           *
   2767           * @param partner partner The IEEE address of the partner device.  Or all zeros
   2768           * if the Key establishment failed.  Ver.: always
   2769           * @param status The status of the key establishment.  Ver.: always
   2770           */

   \                                 In section .text, align 2, keep-with-next
   2771          void emberAfZigbeeKeyEstablishmentCallback(EmberEUI64 partner,
   2772                                                     EmberKeyStatus status)
   2773          {
   2774          }
   \                     emberAfZigbeeKeyEstablishmentCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2775          
   2776          /** @brief came back from EM4
   2777           *
   2778           * This callback would be implemented in idle/sleep
   2779                      plugin by the
   2780           * name emberAfCameBackFromEM4Callback and
   2781                      will be called by the
   2782           * framework. It lets the
   2783                      plugin/app know the board is back from
   2784           * EM4. So if the
   2785                      app wants to restore something, it can do it.
   2786           *
   2787           */

   \                                 In section .text, align 2, keep-with-next
   2788          void emberAfcamebackfromEM4Callback(void)
   2789          {
   2790          }
   \                     emberAfcamebackfromEM4Callback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2791          
   2792          /**
   2793           * @brief Called whenever the radio is powered off.
   2794           */

   \                                 In section .text, align 2, keep-with-next
   2795          void halRadioPowerDownHandler(void)
   2796          {
   2797          }
   \                     halRadioPowerDownHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2798          
   2799          
   2800          /**
   2801           * @brief Called whenever the radio is powered on.
   2802           */

   \                                 In section .text, align 2, keep-with-next
   2803          void halRadioPowerUpHandler(void)
   2804          {
   2805          }
   \                     halRadioPowerUpHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
   2806          
   2807          /**
   2808           * @brief Called whenever the microcontroller enters/exits a idle/sleep mode
   2809           *
   2810           * @param enter        True if entering idle/sleep, False if exiting
   2811           * @param sleepMode    Idle/sleep mode
   2812           */

   \                                 In section .text, align 2, keep-with-next
   2813          void halSleepCallback(boolean enter, SleepModes sleepMode)
   2814          {
   2815          }
   \                     halSleepCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     emberAfInvalidImageId

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     emAfCurrentZigbeeProNetwork

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x4E 0x6F          DC8 "Not supported."
   \              0x74 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfAddToCurrentAppTasksCallback
       0   emberAfAllowNetworkWriteAttributeCallback
       0   emberAfAttributeReadAccessCallback
       0   emberAfAttributeWriteAccessCallback
       0   emberAfClusterInitCallback
       0   emberAfClusterSecurityCustomCallback
       0   emberAfConfigureReportingResponseCallback
       0   emberAfDefaultResponseCallback
       0   emberAfDiscoverAttributesResponseCallback
       0   emberAfDiscoverCommandsGeneratedResponseCallback
       0   emberAfDiscoverCommandsReceivedResponseCallback
       0   emberAfEepromInitCallback
       0   emberAfEepromNoteInitializedStateCallback
       0   emberAfEepromShutdownCallback
       0   emberAfExternalAttributeReadCallback
       0   emberAfExternalAttributeWriteCallback
       0   emberAfFindUnusedPanIdAndFormCallback
       0   emberAfGetCurrentAppTasksCallback
       0   emberAfGetCurrentPollControlCallback
       0   emberAfGetCurrentPollIntervalMsCallback
       0   emberAfGetCurrentPollIntervalQsCallback
       0   emberAfGetCurrentSleepControlCallback
       0   emberAfGetCurrentTimeCallback
       0   emberAfGetDefaultPollControlCallback
       0   emberAfGetDefaultSleepControlCallback
       0   emberAfGetEndpointByIndexCallback
       0   emberAfGetEndpointDescriptionCallback
       0   emberAfGetEndpointInfoCallback
       0   emberAfGetFormAndJoinExtendedPanIdCallback
       0   emberAfGetLongPollIntervalMsCallback
       0   emberAfGetLongPollIntervalQsCallback
       0   emberAfGetShortPollIntervalMsCallback
       0   emberAfGetShortPollIntervalQsCallback
       0   emberAfGetSourceRouteOverheadCallback
       0   emberAfGetWakeTimeoutBitmaskCallback
       0   emberAfGetWakeTimeoutMsCallback
       0   emberAfGetWakeTimeoutQsCallback
       0   emberAfIncomingPacketFilterCallback
       0   emberAfInitiateInterPanKeyEstablishmentCallback
       0   emberAfInitiateKeyEstablishmentCallback
       0   emberAfInitiatePartnerLinkKeyExchangeCallback
       0   emberAfInterPanKeyEstablishmentCallback
       0   emberAfKeyEstablishmentCallback
       0   emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       0   emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       0   emberAfMainStartCallback
       0   emberAfMainTickCallback
       0   emberAfMessageSentCallback
       0   emberAfNcpInitCallback
       0   emberAfNcpIsAwakeIsrCallback
       0   emberAfNetworkKeyUpdateCompleteCallback
       8   emberAfOtaBootloadCallback
         8   -> emberAfPrintln
       0   emberAfOtaClientBootloadCallback
       0   emberAfOtaClientCustomVerifyCallback
       0   emberAfOtaClientDownloadCompleteCallback
       0   emberAfOtaClientIncomingMessageRawCallback
       0   emberAfOtaClientStartCallback
       0   emberAfOtaClientVersionInfoCallback
       0   emberAfOtaPageRequestServerPolicyCallback
      24   emberAfOtaServerBlockSizeCallback
        24   -> emberAfIsCurrentSecurityProfileSmartEnergy
        24   -> emberAfMaximumApsPayloadLength
       0   emberAfOtaServerIncomingMessageRawCallback
       0   emberAfOtaServerQueryCallback
       0   emberAfOtaServerSendImageNotifyCallback
       0   emberAfOtaServerUpgradeEndRequestCallback
       0   emberAfOtaStorageCheckTempDataCallback
       0   emberAfOtaStorageClearTempDataCallback
       0   emberAfOtaStorageCloseCallback
         0   -> halInternalAssertFailed
       0   emberAfOtaStorageDriverDownloadFinishCallback
         0   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInitCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInvalidateImageCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverPrepareToResumeDownloadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverReadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverWriteCallback
         8   -> halInternalAssertFailed
       0   emberAfOtaStorageFinishDownloadCallback
       0   emberAfOtaStorageGetCountCallback
       0   emberAfOtaStorageGetFullHeaderCallback
       0   emberAfOtaStorageGetTotalImageSizeCallback
       0   emberAfOtaStorageInitCallback
       0   emberAfOtaStorageIteratorFirstCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageIteratorNextCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageReadImageDataCallback
       0   emberAfOtaStorageSearchCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageWriteTempDataCallback
       0   emberAfOutgoingPacketFilterCallback
       0   emberAfPartnerLinkKeyExchangeRequestCallback
       0   emberAfPartnerLinkKeyExchangeResponseCallback
       0   emberAfPerformingKeyEstablishmentCallback
       0   emberAfPluginBasicResetToFactoryDefaultsCallback
       0   emberAfPluginColorControlServerComputePwmFromHsvCallback
       0   emberAfPluginColorControlServerComputePwmFromTempCallback
       0   emberAfPluginColorControlServerComputePwmFromXyCallback
       0   emberAfPluginCountersRolloverCallback
       0   emberAfPluginGroupsServerGetGroupNameCallback
       0   emberAfPluginGroupsServerGroupNamesSupportedCallback
       0   emberAfPluginGroupsServerSetGroupNameCallback
       0   emberAfPluginIdentifyStartFeedbackCallback
       0   emberAfPluginIdentifyStopFeedbackCallback
       0   emberAfPluginInterpanFragmentTransmissionFailedCallback
       0   emberAfPluginInterpanMessageReceivedOverFragmentsCallback
       0   emberAfPluginInterpanPreMessageReceivedCallback
       0   emberAfPluginLevelControlClusterServerPostInitCallback
       0   emberAfPluginNetworkCreatorGetPanIdCallback
         0   -> halCommonGetRandom
       0   emberAfPluginNetworkCreatorGetRadioPowerCallback
       0   emberAfPluginNetworkSteeringGetDistributedKeyCallback
       0   emberAfPluginNetworkSteeringGetNodeTypeCallback
       0   emberAfPluginNetworkSteeringGetPowerForRadioChannelCallback
       0   emberAfPluginReportingConfiguredCallback
       0   emberAfPluginReportingGetDefaultReportingConfigCallback
       0   emberAfPluginZllCommissioningCommonInitialSecurityStateCallback
       0   emberAfPluginZllCommissioningCommonResetToFactoryNewCallback
       0   emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback
       0   emberAfPluginZllCommissioningServerEndpointInformationCallback
       0   emberAfPluginZllCommissioningServerEndpointInformationCountCallback
       0   emberAfPluginZllCommissioningServerGroupIdentifierCallback
       0   emberAfPluginZllCommissioningServerGroupIdentifierCountCallback
       0   emberAfPluginZllCommissioningServerIdentifyCallback
       0   emberAfPluginZllOnOffServerOffWithEffectCallback
       0   emberAfPostAttributeChangeCallback
       0   emberAfPreAttributeChangeCallback
       0   emberAfPreCliSendCallback
       0   emberAfPreCommandReceivedCallback
       0   emberAfPreMessageReceivedCallback
       0   emberAfPreMessageSendCallback
       0   emberAfPreNcpResetCallback
       0   emberAfPreZDOMessageReceivedCallback
       0   emberAfReadAttributesResponseCallback
       0   emberAfReadReportingConfigurationResponseCallback
       0   emberAfRegistrationAbortCallback
       0   emberAfRegistrationCallback
       0   emberAfRegistrationStartCallback
       0   emberAfRemoteDeleteBindingPermissionCallback
       0   emberAfRemoteSetBindingPermissionCallback
       0   emberAfRemoveFromCurrentAppTasksCallback
       0   emberAfReportAttributesCallback
       0   emberAfScanErrorCallback
       0   emberAfSecurityInitCallback
       0   emberAfSetDefaultPollControlCallback
       0   emberAfSetDefaultSleepControlCallback
       0   emberAfSetFormAndJoinExtendedPanIdCallback
       0   emberAfSetLongPollIntervalMsCallback
       0   emberAfSetLongPollIntervalQsCallback
       0   emberAfSetShortPollIntervalMsCallback
       0   emberAfSetShortPollIntervalQsCallback
       0   emberAfSetSourceRouteOverheadCallback
       0   emberAfSetTimeCallback
       0   emberAfSetWakeTimeoutBitmaskCallback
       0   emberAfSetWakeTimeoutMsCallback
       0   emberAfSetWakeTimeoutQsCallback
       0   emberAfStartMoveCallback
       0   emberAfStartSearchForJoinableNetworkCallback
       0   emberAfStopMoveCallback
       0   emberAfTrustCenterJoinCallback
       0   emberAfTrustCenterKeepaliveAbortCallback
       0   emberAfTrustCenterKeepaliveUpdateCallback
       0   emberAfUnusedPanIdFoundCallback
       0   emberAfWriteAttributesResponseCallback
       0   emberAfZigbeeKeyEstablishmentCallback
       0   emberAfcamebackfromEM4Callback
       0   halRadioPowerDownHandler
       0   halRadioPowerUpHandler
       0   halSleepCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
      10  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine2
       8  ?Subroutine3
      16  ?_0
      16  ?_1
       2  emberAfAddToCurrentAppTasksCallback
       4  emberAfAllowNetworkWriteAttributeCallback
       4  emberAfAttributeReadAccessCallback
       4  emberAfAttributeWriteAccessCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfConfigureReportingResponseCallback
       4  emberAfDefaultResponseCallback
       4  emberAfDiscoverAttributesResponseCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       2  emberAfEepromInitCallback
       2  emberAfEepromNoteInitializedStateCallback
       2  emberAfEepromShutdownCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfFindUnusedPanIdAndFormCallback
       4  emberAfGetCurrentAppTasksCallback
       4  emberAfGetCurrentPollControlCallback
       4  emberAfGetCurrentPollIntervalMsCallback
       4  emberAfGetCurrentPollIntervalQsCallback
       4  emberAfGetCurrentSleepControlCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetDefaultPollControlCallback
       4  emberAfGetDefaultSleepControlCallback
       4  emberAfGetEndpointByIndexCallback
       4  emberAfGetEndpointDescriptionCallback
       4  emberAfGetEndpointInfoCallback
       2  emberAfGetFormAndJoinExtendedPanIdCallback
       4  emberAfGetLongPollIntervalMsCallback
       4  emberAfGetLongPollIntervalQsCallback
       4  emberAfGetShortPollIntervalMsCallback
       4  emberAfGetShortPollIntervalQsCallback
       4  emberAfGetSourceRouteOverheadCallback
       4  emberAfGetWakeTimeoutBitmaskCallback
       4  emberAfGetWakeTimeoutMsCallback
       4  emberAfGetWakeTimeoutQsCallback
       4  emberAfIncomingPacketFilterCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMainStartCallback
       2  emberAfMainTickCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNcpIsAwakeIsrCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
      14  emberAfOtaBootloadCallback
       2  emberAfOtaClientBootloadCallback
       4  emberAfOtaClientCustomVerifyCallback
       4  emberAfOtaClientDownloadCompleteCallback
       4  emberAfOtaClientIncomingMessageRawCallback
       2  emberAfOtaClientStartCallback
       2  emberAfOtaClientVersionInfoCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      46  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
       4  emberAfOtaStorageCheckTempDataCallback
       4  emberAfOtaStorageClearTempDataCallback
       6  emberAfOtaStorageCloseCallback
       4  emberAfOtaStorageDriverDownloadFinishCallback
       8  emberAfOtaStorageDriverInitCallback
       8  emberAfOtaStorageDriverInvalidateImageCallback
       6  emberAfOtaStorageDriverPrepareToResumeDownloadCallback
       6  emberAfOtaStorageDriverReadCallback
       8  emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
       8  emberAfOtaStorageDriverWriteCallback
       4  emberAfOtaStorageFinishDownloadCallback
       4  emberAfOtaStorageGetCountCallback
       4  emberAfOtaStorageGetFullHeaderCallback
       4  emberAfOtaStorageGetTotalImageSizeCallback
       4  emberAfOtaStorageInitCallback
       2  emberAfOtaStorageIteratorFirstCallback
       2  emberAfOtaStorageIteratorNextCallback
       4  emberAfOtaStorageReadImageDataCallback
       2  emberAfOtaStorageSearchCallback
       4  emberAfOtaStorageWriteTempDataCallback
       4  emberAfOutgoingPacketFilterCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginBasicResetToFactoryDefaultsCallback
       2  emberAfPluginColorControlServerComputePwmFromHsvCallback
       2  emberAfPluginColorControlServerComputePwmFromTempCallback
       2  emberAfPluginColorControlServerComputePwmFromXyCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginGroupsServerGetGroupNameCallback
       4  emberAfPluginGroupsServerGroupNamesSupportedCallback
       2  emberAfPluginGroupsServerSetGroupNameCallback
       2  emberAfPluginIdentifyStartFeedbackCallback
       2  emberAfPluginIdentifyStopFeedbackCallback
       2  emberAfPluginInterpanFragmentTransmissionFailedCallback
       2  emberAfPluginInterpanMessageReceivedOverFragmentsCallback
       4  emberAfPluginInterpanPreMessageReceivedCallback
       2  emberAfPluginLevelControlClusterServerPostInitCallback
       4  emberAfPluginNetworkCreatorGetPanIdCallback
       4  emberAfPluginNetworkCreatorGetRadioPowerCallback
       4  emberAfPluginNetworkSteeringGetDistributedKeyCallback
      14  emberAfPluginNetworkSteeringGetNodeTypeCallback
       4  emberAfPluginNetworkSteeringGetPowerForRadioChannelCallback
       4  emberAfPluginReportingConfiguredCallback
      20  emberAfPluginReportingGetDefaultReportingConfigCallback
       2  emberAfPluginZllCommissioningCommonInitialSecurityStateCallback
       2  emberAfPluginZllCommissioningCommonResetToFactoryNewCallback
       2  emberAfPluginZllCommissioningCommonTouchLinkCompleteCallback
       4  emberAfPluginZllCommissioningServerEndpointInformationCallback
       4  emberAfPluginZllCommissioningServerEndpointInformationCountCallback
       4  emberAfPluginZllCommissioningServerGroupIdentifierCallback
       4  emberAfPluginZllCommissioningServerGroupIdentifierCountCallback
       2  emberAfPluginZllCommissioningServerIdentifyCallback
       4  emberAfPluginZllOnOffServerOffWithEffectCallback
       2  emberAfPostAttributeChangeCallback
       4  emberAfPreAttributeChangeCallback
       4  emberAfPreCliSendCallback
       4  emberAfPreCommandReceivedCallback
       4  emberAfPreMessageReceivedCallback
       4  emberAfPreMessageSendCallback
       2  emberAfPreNcpResetCallback
       4  emberAfPreZDOMessageReceivedCallback
       4  emberAfReadAttributesResponseCallback
       4  emberAfReadReportingConfigurationResponseCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       2  emberAfRemoveFromCurrentAppTasksCallback
       4  emberAfReportAttributesCallback
       2  emberAfScanErrorCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetDefaultPollControlCallback
       2  emberAfSetDefaultSleepControlCallback
       2  emberAfSetFormAndJoinExtendedPanIdCallback
       2  emberAfSetLongPollIntervalMsCallback
       2  emberAfSetLongPollIntervalQsCallback
       2  emberAfSetShortPollIntervalMsCallback
       2  emberAfSetShortPollIntervalQsCallback
       2  emberAfSetSourceRouteOverheadCallback
       2  emberAfSetTimeCallback
       2  emberAfSetWakeTimeoutBitmaskCallback
       2  emberAfSetWakeTimeoutMsCallback
       2  emberAfSetWakeTimeoutQsCallback
       4  emberAfStartMoveCallback
       4  emberAfStartSearchForJoinableNetworkCallback
       2  emberAfStopMoveCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback
       2  emberAfUnusedPanIdFoundCallback
       4  emberAfWriteAttributesResponseCallback
       2  emberAfZigbeeKeyEstablishmentCallback
       2  emberAfcamebackfromEM4Callback
       2  halRadioPowerDownHandler
       2  halRadioPowerUpHandler
       2  halSleepCallback

 
  32 bytes in section .rodata
 678 bytes in section .text
 
 678 bytes of CODE  memory
  32 bytes of CONST memory

Errors: none
Warnings: none
