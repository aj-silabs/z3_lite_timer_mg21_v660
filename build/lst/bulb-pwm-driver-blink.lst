###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         13/Jun/2019  15:39:40
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\plugin\plugin-common\bulb-pwm-driver\bulb-pwm-driver-blink.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW8EA3.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\plugin\plugin-common\bulb-pwm-driver\bulb-pwm-driver-blink.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"bulb-pwm-driver-blink.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\plugin\plugin-common\bulb-pwm-driver\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\bulb-pwm-driver-blink.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\bulb-pwm-driver-blink.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\plugin\plugin-common\bulb-pwm-driver\bulb-pwm-driver-blink.c
      1          // Copyright 2016 Silicon Laboratories, Inc.                                *80*
      2          
      3          #include PLATFORM_HEADER
      4          #include CONFIGURATION_HEADER
      5          #include "stack/include/ember-types.h"
      6          #include "stack/include/event.h"
      7          #include "hal/hal.h"
      8          
      9          #include EMBER_AF_API_BULB_PWM_DRIVER
     10          
     11          // **********************************************
     12          // LED Output Blinking State
     13          //
     14          // API for blinking light value for user feedback.
     15          
     16          #define pwmBlinkEventControl  emberAfPluginBulbPwmDriverBlinkEventControl
     17          

   \                                 In section .bss, align 4
     18          EmberEventControl emberAfPluginBulbPwmDriverBlinkEventControl;
   \                     emberAfPluginBulbPwmDriverBlinkEventControl:
   \        0x0                      DS8 8

   \                                 In section .bss, align 4
     19          EmberEventControl emberAfPluginBulbPwmDriverStatusEventControl;
   \                     emberAfPluginBulbPwmDriverStatusEventControl:
   \        0x0                      DS8 8
     20          
     21          enum {
     22            LED_ON            = 0x00,
     23            LED_OFF           = 0x01,
     24            LED_BLINKING_ON   = 0x02,
     25            LED_BLINKING_OFF  = 0x03,
     26            LED_BLINK_PATTERN = 0x04,
     27          };
     28          
     29          enum {
     30            BLINK_LED = 0x00,
     31            BLINK_STATUS = 0x01
     32          };
     33          
     34          #define BLINK_CHANNELS             2
     35          
     36          #ifdef EMBER_AF_PLUGIN_BULB_PWM_DRIVER_BLINK_PATTERN_MAX_LENGTH
     37          #define BLINK_PATTERN_MAX_LENGTH \
     38            EMBER_AF_PLUGIN_BULB_PWM_DRIVER_BLINK_PATTERN_MAX_LENGTH
     39          #else
     40          #define BLINK_PATTERN_MAX_LENGTH   20
     41          #endif
     42          #define SECONDS_TO_MILLISECONDS    1000
     43          
     44          typedef struct {
     45            uint8_t state;
     46            uint8_t count;
     47            uint16_t blinkTime;
     48          
     49            uint16_t pattern[BLINK_PATTERN_MAX_LENGTH];
     50            uint8_t patternLength;
     51            uint8_t patternIndex;
     52          
     53            void (*turnOn)(void);
     54            void (*turnOff)(void);
     55            void (*start)(void);
     56            void (*stop)(void);
     57          
     58            EmberEventControl *eventControl;
     59          } BlinkState;
     60          

   \                                 In section .bss, align 4
     61          BlinkState blinkState[BLINK_CHANNELS];
   \                     blinkState:
   \        0x0                      DS8 136
     62          

   \                                 In section .text, align 2, keep-with-next
     63          static void turnStatusLedOn(void)
     64          {
     65            halBulbPwmDriverStatusLedOn( );
   \                     turnStatusLedOn: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverStatusLedOn
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          static void turnStatusLedOff(void)
     69          {
     70            halBulbPwmDriverStatusLedOff( );
   \                     turnStatusLedOff: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverStatusLedOff
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          static void nullFunction(void)
     74          {
     75          }
   \                     nullFunction: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          static void turnLedOn(void)
     78          {
     79            halBulbPwmDriverBlinkOnCallback( );
   \                     turnLedOn: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverBlinkOnCallback
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          static void turnLedOff(void)
     83          {
     84            halBulbPwmDriverBlinkOffCallback( );
   \                     turnLedOff: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverBlinkOffCallback
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          static void ledBlinkStop(void)
     88          {
     89            halBulbPwmDriverBlinkStopCallback( );
   \                     ledBlinkStop: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverBlinkStopCallback
     90          }
     91          

   \                                 In section .text, align 2, keep-with-next
     92          static void ledBlinkStart(void)
     93          {
     94            // Indicate that the light is starting a blink pattern.  The application
     95            // code should therefore not attempt to drive the LEDs.
     96            halBulbPwmDriverBlinkStartCallback( );
   \                     ledBlinkStart: (+1)
   \        0x0   0x....'....        B.W      halBulbPwmDriverBlinkStartCallback
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          static void ledOn(uint8_t time, BlinkState *p)
    100          {
   \                     ledOn: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    101            p->turnOn();
   \        0x6   0x6B28             LDR      R0,[R5, #+48]
   \        0x8   0x4780             BLX      R0
    102            p->state = LED_ON;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x7029             STRB     R1,[R5, #+0]
    103          
    104            if (time > 0) {
   \        0xE   0x6C28             LDR      R0,[R5, #+64]
   \       0x10   0x0022             MOVS     R2,R4
   \       0x12   0xD000             BEQ.N    ??ledOn_0
    105              emberEventControlSetDelayMS(*(p->eventControl),
    106                                          ((uint32_t) time) * SECONDS_TO_MILLISECONDS);
   \       0x14   0x....             B.N      ?Subroutine0
    107            } else {
    108              emberEventControlSetInactive(*(p->eventControl));
   \                     ??ledOn_0: (+1)
   \       0x16   0x7001             STRB     R1,[R0, #+0]
    109            }
    110          }
   \       0x18   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF44F 0x717A      MOV      R1,#+1000
   \        0x4   0x4361             MULS     R1,R1,R4
   \                     ??Subroutine0_0: (+1)
   \        0x6   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \        0xA   0x....'....        B.W      emEventControlSetDelayMS
    111          

   \                                 In section .text, align 2, keep-with-next
    112          static void ledOff(uint8_t time, BlinkState *p)
    113          {
   \                     ledOff: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    114            p->turnOff();
   \        0x6   0x6B68             LDR      R0,[R5, #+52]
   \        0x8   0x4780             BLX      R0
    115            p->state = LED_OFF;
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x7029             STRB     R1,[R5, #+0]
    116          
    117            if (time > 0) {
   \        0xE   0x6C28             LDR      R0,[R5, #+64]
   \       0x10   0x0022             MOVS     R2,R4
   \       0x12   0xD000             BEQ.N    ??ledOff_0
    118              emberEventControlSetDelayMS(*(p->eventControl),
    119                                          ((uint32_t) time) * SECONDS_TO_MILLISECONDS);
   \       0x14   0x....             B.N      ?Subroutine0
    120            } else {
    121              emberEventControlSetInactive(*(p->eventControl));
   \                     ??ledOff_0: (+1)
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x7002             STRB     R2,[R0, #+0]
    122            }
    123          }
   \       0x1A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    124          

   \                                 In section .text, align 2, keep-with-next
    125          static void ledBlink(uint8_t count, uint16_t blinkTime, BlinkState *p)
    126          {
   \                     ledBlink: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    127            p->blinkTime = blinkTime;
    128          
    129            p->turnOff();
   \        0x6   0x6B68             LDR      R0,[R5, #+52]
   \        0x8   0x8069             STRH     R1,[R5, #+2]
   \        0xA   0x4780             BLX      R0
    130            p->state = LED_BLINKING_OFF;
   \        0xC   0x2103             MOVS     R1,#+3
   \        0xE   0x7029             STRB     R1,[R5, #+0]
    131            emberEventControlSetDelayMS(*(p->eventControl),
    132                                        p->blinkTime);
   \       0x10   0x8869             LDRH     R1,[R5, #+2]
   \       0x12   0x6C28             LDR      R0,[R5, #+64]
   \       0x14   0x....'....        BL       emEventControlSetDelayMS
    133            p->count = count;
   \       0x18   0x706C             STRB     R4,[R5, #+1]
    134          }
   \       0x1A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    135          
    136          // Implements a function to blink an arbitrary pattern on the bulb output.  The
    137          // function receives a count, which is the number of times to cycle through the
    138          // pattern, a length of the pattern, and a short array of 16 bit integer values
    139          // which are interpreted as the blink pattern in milliseconds.  The first value
    140          // is a number of milliseconds for the light to be on, the second is a number
    141          // of milliseconds for the light to be off, and so on until length has been
    142          // reached.  For example, if we wished to create an SOS pattern, we would
    143          // program the following array:
    144          // pattern[20] = {500, 100, 500, 100, 500, 100, 100, 100, 100, 100, 100, 100,
    145          //                500, 100, 500, 100, 500, 100};
    146          // Where the light would be on in a sequences of 500 and 100 mS intervals, and
    147          // the light would be off for 100 mS in between the on intervals.

   \                                 In section .text, align 2, keep-with-next
    148          static void blinkPattern(uint8_t    count,
    149                                   uint8_t    length,
    150                                   uint16_t   *pattern,
    151                                   BlinkState *p)
    152          {
   \                     blinkPattern: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x461E             MOV      R6,R3
    153            uint8_t i;
    154          
    155            if (length < 2) {
   \        0xC   0x2C01             CMP      R4,#+1
   \        0xE   0xDD1C             BLE.N    ??blinkPattern_0
    156              return;
    157            }
    158          
    159            p->turnOn();
   \       0x10   0xF106 0x052C      ADD      R5,R6,#+44
   \       0x14   0x6868             LDR      R0,[R5, #+4]
   \       0x16   0x4780             BLX      R0
    160          
    161            p->state = LED_BLINK_PATTERN;
   \       0x18   0x2104             MOVS     R1,#+4
    162          
    163            if (length > BLINK_PATTERN_MAX_LENGTH) {
   \       0x1A   0x2C15             CMP      R4,#+21
   \       0x1C   0x7031             STRB     R1,[R6, #+0]
   \       0x1E   0xBFA8             IT       GE 
   \       0x20   0x2414             MOVGE    R4,#+20
    164              length = BLINK_PATTERN_MAX_LENGTH;
    165            }
    166          
    167            p->patternLength = length;
   \       0x22   0x702C             STRB     R4,[R5, #+0]
    168            p->count = count;
   \       0x24   0x7077             STRB     R7,[R6, #+1]
    169          
    170            for (i = 0; i < p->patternLength; i++) {
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x1D32             ADDS     R2,R6,#+4
   \       0x2A   0xE005             B.N      ??blinkPattern_1
    171              p->pattern[i] = pattern[i];
   \                     ??blinkPattern_2: (+1)
   \       0x2C   0xF838 0x1010      LDRH     R1,[R8, R0, LSL #+1]
   \       0x30   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
    172            }
   \       0x34   0x1C40             ADDS     R0,R0,#+1
   \       0x36   0xB2C0             UXTB     R0,R0
   \                     ??blinkPattern_1: (+1)
   \       0x38   0x7829             LDRB     R1,[R5, #+0]
   \       0x3A   0x4288             CMP      R0,R1
   \       0x3C   0xDBF6             BLT.N    ??blinkPattern_2
    173          
    174            emberEventControlSetDelayMS(*(p->eventControl),
    175                                        p->pattern[0]);
   \       0x3E   0x88B1             LDRH     R1,[R6, #+4]
   \       0x40   0x6968             LDR      R0,[R5, #+20]
   \       0x42   0x....'....        BL       emEventControlSetDelayMS
    176          
    177            p->patternIndex = 1;
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0x7068             STRB     R0,[R5, #+1]
    178          }
   \                     ??blinkPattern_0: (+1)
   \       0x4A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    179          

   \                                 In section .text, align 4, keep-with-next
    180          void eventHandler(BlinkState *p)
    181          {
   \                     eventHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    182            emberEventControlSetInactive(*(p->eventControl));
   \        0x4   0xF104 0x052C      ADD      R5,R4,#+44
   \        0x8   0x6969             LDR      R1,[R5, #+20]
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x7008             STRB     R0,[R1, #+0]
    183            switch (p->state) {
   \        0xE   0x7822             LDRB     R2,[R4, #+0]
   \       0x10   0x2A04             CMP      R2,#+4
   \       0x12   0xD84D             BHI.N    ??eventHandler_1
   \       0x14   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??eventHandler_0:
   \       0x18   0x03 0x06          DC8      0x3,0x6,0xC,0x19
   \              0x0C 0x19    
   \       0x1C   0x20 0x00          DC8      0x20,0x0
    184              case LED_ON:
    185                p->turnOff();
   \                     ??eventHandler_2: (+1)
   \       0x1E   0x68A8             LDR      R0,[R5, #+8]
   \       0x20   0x4780             BLX      R0
    186                p->stop();
   \       0x22   0xE001             B.N      ??eventHandler_3
    187                break;
    188          
    189              case LED_OFF:
    190                p->turnOn();
   \                     ??eventHandler_4: (+1)
   \       0x24   0x6868             LDR      R0,[R5, #+4]
   \       0x26   0x4780             BLX      R0
    191                p->stop();
   \                     ??eventHandler_3: (+1)
   \       0x28   0x6929             LDR      R1,[R5, #+16]
   \       0x2A   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \       0x2E   0x4708             BX       R1
    192                break;
    193          
    194              case LED_BLINKING_ON:
    195                p->turnOff();
   \                     ??eventHandler_5: (+1)
   \       0x30   0x68A8             LDR      R0,[R5, #+8]
   \       0x32   0x4780             BLX      R0
    196                if (p->count == 0) {
   \       0x34   0x7860             LDRB     R0,[R4, #+1]
   \       0x36   0xB198             CBZ.N    R0,??eventHandler_6
    197                  p->state = LED_OFF;
    198                  p->stop();
    199          
    200                  break;
    201                }
    202          
    203                if (p->count != HAL_BULB_PWM_DRIVER_BLINK_FOREVER) {
   \       0x38   0x28FF             CMP      R0,#+255
   \       0x3A   0xD003             BEQ.N    ??eventHandler_7
    204                  p->count--;
   \       0x3C   0x1E40             SUBS     R0,R0,#+1
   \       0x3E   0x7060             STRB     R0,[R4, #+1]
    205                }
    206                if (p->count > 0) {
   \       0x40   0xB2C0             UXTB     R0,R0
   \       0x42   0xB168             CBZ.N    R0,??eventHandler_6
    207                  p->state = LED_BLINKING_OFF;
   \                     ??eventHandler_7: (+1)
   \       0x44   0x2003             MOVS     R0,#+3
   \       0x46   0x7020             STRB     R0,[R4, #+0]
    208                  emberEventControlSetDelayMS(*(p->eventControl),
    209                                              p->blinkTime);
   \       0x48   0xE003             B.N      ??eventHandler_8
    210                } else {
    211                  p->state = LED_OFF;
    212                  p->stop();
    213                }
    214          
    215                break;
    216              case LED_BLINKING_OFF:
    217                p->turnOn();
   \                     ??eventHandler_9: (+1)
   \       0x4A   0x6868             LDR      R0,[R5, #+4]
   \       0x4C   0x4780             BLX      R0
    218                p->state = LED_BLINKING_ON;
   \       0x4E   0x2102             MOVS     R1,#+2
   \       0x50   0x7021             STRB     R1,[R4, #+0]
    219                emberEventControlSetDelayMS(*(p->eventControl),
    220                                            p->blinkTime);
   \                     ??eventHandler_8: (+1)
   \       0x52   0x8861             LDRH     R1,[R4, #+2]
   \       0x54   0x6968             LDR      R0,[R5, #+20]
   \       0x56   0x....             B.N      ??Subroutine0_0
    221                break;
    222              case LED_BLINK_PATTERN:
    223                if (p->count == 0) {
   \                     ??eventHandler_10: (+1)
   \       0x58   0x7860             LDRB     R0,[R4, #+1]
   \       0x5A   0xB938             CBNZ.N   R0,??eventHandler_11
    224                  p->turnOff();
   \       0x5C   0x68A8             LDR      R0,[R5, #+8]
   \       0x5E   0x4780             BLX      R0
    225          
    226                  p->state = LED_OFF;
    227                  p->stop();
    228          
    229                  break;
    230                }
   \                     ??eventHandler_6: (+1)
   \       0x60   0x2101             MOVS     R1,#+1
   \       0x62   0x7021             STRB     R1,[R4, #+0]
   \       0x64   0x6928             LDR      R0,[R5, #+16]
   \       0x66   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \       0x6A   0x4700             BX       R0
    231          
    232                if (p->patternIndex % 2 == 1) {
   \                     ??eventHandler_11: (+1)
   \       0x6C   0x7868             LDRB     R0,[R5, #+1]
   \       0x6E   0xEB00 0x71D0      ADD      R1,R0,R0, LSR #+31
   \       0x72   0x0849             LSRS     R1,R1,#+1
   \       0x74   0xEBA0 0x0041      SUB      R0,R0,R1, LSL #+1
   \       0x78   0x2801             CMP      R0,#+1
   \       0x7A   0xD102             BNE.N    ??eventHandler_12
    233                  p->turnOff();
   \       0x7C   0x68A8             LDR      R0,[R5, #+8]
   \       0x7E   0x4780             BLX      R0
   \       0x80   0xE001             B.N      ??eventHandler_13
    234                } else {
    235                  p->turnOn();
   \                     ??eventHandler_12: (+1)
   \       0x82   0x6869             LDR      R1,[R5, #+4]
   \       0x84   0x4788             BLX      R1
    236                }
    237          
    238                emberEventControlSetDelayMS(*(p->eventControl),
    239                                            p->pattern[p->patternIndex]);
   \                     ??eventHandler_13: (+1)
   \       0x86   0x7868             LDRB     R0,[R5, #+1]
   \       0x88   0xEB04 0x0140      ADD      R1,R4,R0, LSL #+1
   \       0x8C   0x8889             LDRH     R1,[R1, #+4]
   \       0x8E   0x6968             LDR      R0,[R5, #+20]
   \       0x90   0x....'....        BL       emEventControlSetDelayMS
    240          
    241                p->patternIndex++;
   \       0x94   0x7868             LDRB     R0,[R5, #+1]
    242          
    243                if (p->patternIndex >= p->patternLength) {
   \       0x96   0x7829             LDRB     R1,[R5, #+0]
   \       0x98   0x1C40             ADDS     R0,R0,#+1
   \       0x9A   0x7068             STRB     R0,[R5, #+1]
   \       0x9C   0xB2C0             UXTB     R0,R0
   \       0x9E   0x4288             CMP      R0,R1
   \       0xA0   0xD306             BCC.N    ??eventHandler_1
    244                  p->patternIndex = 0;
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0x7068             STRB     R0,[R5, #+1]
    245          
    246                  if (p->count != HAL_BULB_PWM_DRIVER_BLINK_FOREVER) {
   \       0xA6   0x7860             LDRB     R0,[R4, #+1]
   \       0xA8   0x28FF             CMP      R0,#+255
   \       0xAA   0xBF1C             ITT      NE 
   \       0xAC   0x1E40             SUBNE    R0,R0,#+1
   \       0xAE   0x7060             STRBNE   R0,[R4, #+1]
    247                    p->count--;
    248                  }
    249                }
    250          
    251              default:
    252                break;
    253            }
    254          }
   \                     ??eventHandler_1: (+1)
   \       0xB0   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    255          

   \                                 In section .text, align 2, keep-with-next
    256          void halBulbPwmDriverBlinkInit(void)
    257          {
    258            blinkState[BLINK_LED].turnOn = turnLedOn;
   \                     halBulbPwmDriverBlinkInit: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x....             LDR.N    R1,??DataTable11_1
   \        0x4   0x6301             STR      R1,[R0, #+48]
    259            blinkState[BLINK_LED].turnOff = turnLedOff;
    260            blinkState[BLINK_LED].start = ledBlinkStart;
   \        0x6   0x....             LDR.N    R1,??DataTable11_2
   \        0x8   0x6381             STR      R1,[R0, #+56]
    261            blinkState[BLINK_LED].stop = ledBlinkStop;
    262            blinkState[BLINK_LED].eventControl =
    263              &(emberAfPluginBulbPwmDriverBlinkEventControl);
   \        0xA   0x....             LDR.N    R1,??DataTable11_3
   \        0xC   0x6401             STR      R1,[R0, #+64]
   \        0xE   0x....             LDR.N    R2,??DataTable11_4
    264          
    265            blinkState[BLINK_STATUS].turnOn = turnStatusLedOn;
    266            blinkState[BLINK_STATUS].turnOff = turnStatusLedOff;
   \       0x10   0x....             LDR.N    R1,??DataTable11_5
   \       0x12   0x6342             STR      R2,[R0, #+52]
   \       0x14   0x6781             STR      R1,[R0, #+120]
   \       0x16   0x....             LDR.N    R2,??DataTable11_6
    267            blinkState[BLINK_STATUS].start = nullFunction;
   \       0x18   0x....             LDR.N    R1,??DataTable11_7
   \       0x1A   0x63C2             STR      R2,[R0, #+60]
   \       0x1C   0x67C1             STR      R1,[R0, #+124]
    268            blinkState[BLINK_STATUS].stop = nullFunction;
   \       0x1E   0xF8C0 0x1080      STR      R1,[R0, #+128]
   \       0x22   0x....             LDR.N    R2,??DataTable11_8
    269            blinkState[BLINK_STATUS].eventControl =
    270              &(emberAfPluginBulbPwmDriverStatusEventControl);
   \       0x24   0x....             LDR.N    R1,??DataTable11_9
   \       0x26   0x6742             STR      R2,[R0, #+116]
   \       0x28   0xF8C0 0x1084      STR      R1,[R0, #+132]
    271          }
   \       0x2C   0x4770             BX       LR               ;; return
    272          
    273          // ******** APIs and Event Functions *************

   \                                 In section .text, align 2, keep-with-next
    274          void emberAfPluginBulbPwmDriverBlinkEventHandler(void)
    275          {
    276            eventHandler(&(blinkState[BLINK_LED]));
   \                     emberAfPluginBulbPwmDriverBlinkEventHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x....             B.N      eventHandler
    277          }
    278          

   \                                 In section .text, align 2, keep-with-next
    279          void emberAfPluginBulbPwmDriverStatusEventHandler(void)
    280          {
    281            eventHandler(&(blinkState[BLINK_STATUS]));
   \                     emberAfPluginBulbPwmDriverStatusEventHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_10
   \        0x2   0x....             B.N      eventHandler
    282          }
    283          

   \                                 In section .text, align 2, keep-with-next
    284          void halBulbPwmDriverLedBlinkPattern(uint8_t  count,
    285                                               uint8_t  length,
    286                                               uint16_t *pattern)
    287          {
    288            blinkPattern(count, length, pattern, &(blinkState[BLINK_LED]));
   \                     halBulbPwmDriverLedBlinkPattern: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable11
   \        0x2   0x....             B.N      blinkPattern
    289          }
    290          

   \                                 In section .text, align 2, keep-with-next
    291          void halBulbPwmDriverStatusBlinkPattern(uint8_t  count,
    292                                                  uint8_t  length,
    293                                                  uint16_t *pattern)
    294          {
    295            blinkPattern(count, length, pattern, &(blinkState[BLINK_STATUS]));
   \                     halBulbPwmDriverStatusBlinkPattern: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable11_10
   \        0x2   0x....             B.N      blinkPattern
    296          }
    297          

   \                                 In section .text, align 2, keep-with-next
    298          void halBulbPwmDriverLedBlink(uint8_t count, uint16_t blinkTime)
    299          {
    300            ledBlink(count, blinkTime, &(blinkState[BLINK_LED]));
   \                     halBulbPwmDriverLedBlink: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable11
   \        0x2   0x....             B.N      ledBlink
    301          }
    302          

   \                                 In section .text, align 2, keep-with-next
    303          void halBulbPwmDriverStatusBlink(uint8_t count, uint16_t blinkTime)
    304          {
    305            ledBlink(count, blinkTime, &(blinkState[BLINK_STATUS]));
   \                     halBulbPwmDriverStatusBlink: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable11_10
   \        0x2   0x....             B.N      ledBlink
    306          }
    307          

   \                                 In section .text, align 2, keep-with-next
    308          void halBulbPwmDriverLedOff(uint8_t time)
    309          {
    310            ledOff(time, &(blinkState[BLINK_LED]));
   \                     halBulbPwmDriverLedOff: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11
   \        0x2   0x....             B.N      ledOff
    311          }
    312          

   \                                 In section .text, align 2, keep-with-next
    313          void halBulbPwmDriverStatusOff(uint8_t time)
    314          {
    315            ledOff(time, &(blinkState[BLINK_STATUS]));
   \                     halBulbPwmDriverStatusOff: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_10
   \        0x2   0x....             B.N      ledOff
    316          }
    317          

   \                                 In section .text, align 2, keep-with-next
    318          void halBulbPwmDriverLedOn(uint8_t time)
    319          {
    320            ledOn(time, &(blinkState[BLINK_LED]));
   \                     halBulbPwmDriverLedOn: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11
   \        0x2   0x....             B.N      ledOn
    321          }
    322          

   \                                 In section .text, align 2, keep-with-next
    323          void halBulbPwmDriverStatusOn(uint8_t time)
    324          {
    325            ledOn(time, &(blinkState[BLINK_STATUS]));
   \                     halBulbPwmDriverStatusOn: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_10
   \        0x2   0x....             B.N      ledOn
    326          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     blinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x....'....        DC32     turnLedOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x....'....        DC32     ledBlinkStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     emberAfPluginBulbPwmDriverBlinkEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x....'....        DC32     turnLedOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x....'....        DC32     turnStatusLedOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x....'....        DC32     ledBlinkStop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \        0x0   0x....'....        DC32     nullFunction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \        0x0   0x....'....        DC32     turnStatusLedOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \        0x0   0x....'....        DC32     emberAfPluginBulbPwmDriverStatusEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \        0x0   0x....'....        DC32     blinkState+0x44

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   blinkPattern
        24   -- Indirect call
        24   -> emEventControlSetDelayMS
       0   emberAfPluginBulbPwmDriverBlinkEventHandler
         0   -> eventHandler
       0   emberAfPluginBulbPwmDriverStatusEventHandler
         0   -> eventHandler
      16   eventHandler
         0   -- Indirect call
        16   -- Indirect call
         0   -> emEventControlSetDelayMS
        16   -> emEventControlSetDelayMS
       0   halBulbPwmDriverBlinkInit
       0   halBulbPwmDriverLedBlink
         0   -> ledBlink
       0   halBulbPwmDriverLedBlinkPattern
         0   -> blinkPattern
       0   halBulbPwmDriverLedOff
         0   -> ledOff
       0   halBulbPwmDriverLedOn
         0   -> ledOn
       0   halBulbPwmDriverStatusBlink
         0   -> ledBlink
       0   halBulbPwmDriverStatusBlinkPattern
         0   -> blinkPattern
       0   halBulbPwmDriverStatusOff
         0   -> ledOff
       0   halBulbPwmDriverStatusOn
         0   -> ledOn
      16   ledBlink
        16   -- Indirect call
        16   -> emEventControlSetDelayMS
       0   ledBlinkStart
         0   -> halBulbPwmDriverBlinkStartCallback
       0   ledBlinkStop
         0   -> halBulbPwmDriverBlinkStopCallback
      16   ledOff
        16   -- Indirect call
         0   -> emEventControlSetDelayMS
      16   ledOn
        16   -- Indirect call
         0   -> emEventControlSetDelayMS
       0   nullFunction
       0   turnLedOff
         0   -> halBulbPwmDriverBlinkOffCallback
       0   turnLedOn
         0   -> halBulbPwmDriverBlinkOnCallback
       0   turnStatusLedOff
         0   -> halBulbPwmDriverStatusLedOff
       0   turnStatusLedOn
         0   -> halBulbPwmDriverStatusLedOn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      14  ?Subroutine0
      78  blinkPattern
     136  blinkState
       8  emberAfPluginBulbPwmDriverBlinkEventControl
       4  emberAfPluginBulbPwmDriverBlinkEventHandler
       8  emberAfPluginBulbPwmDriverStatusEventControl
       4  emberAfPluginBulbPwmDriverStatusEventHandler
     178  eventHandler
      46  halBulbPwmDriverBlinkInit
       4  halBulbPwmDriverLedBlink
       4  halBulbPwmDriverLedBlinkPattern
       4  halBulbPwmDriverLedOff
       4  halBulbPwmDriverLedOn
       4  halBulbPwmDriverStatusBlink
       4  halBulbPwmDriverStatusBlinkPattern
       4  halBulbPwmDriverStatusOff
       4  halBulbPwmDriverStatusOn
      28  ledBlink
       4  ledBlinkStart
       4  ledBlinkStop
      28  ledOff
      26  ledOn
       2  nullFunction
       4  turnLedOff
       4  turnLedOn
       4  turnStatusLedOff
       4  turnStatusLedOn

 
 152 bytes in section .bss
 508 bytes in section .text
 
 508 bytes of CODE memory
 152 bytes of DATA memory

Errors: none
Warnings: none
