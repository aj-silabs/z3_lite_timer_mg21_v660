###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:32
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs5.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWF507.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs5.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"pkcs5.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\pkcs5.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\pkcs5.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs5.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /**
     14           * \file pkcs5.c
     15           *
     16           * \brief PKCS#5 functions
     17           *
     18           * \author Mathias Olsson <mathias@kompetensum.com>
     19           *
     20           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     21           *  SPDX-License-Identifier: Apache-2.0
     22           *
     23           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     24           *  not use this file except in compliance with the License.
     25           *  You may obtain a copy of the License at
     26           *
     27           *  http://www.apache.org/licenses/LICENSE-2.0
     28           *
     29           *  Unless required by applicable law or agreed to in writing, software
     30           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     31           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     32           *  See the License for the specific language governing permissions and
     33           *  limitations under the License.
     34           *
     35           *  This file is part of mbed TLS (https://tls.mbed.org)
     36           */
     37          /*
     38           * PKCS#5 includes PBKDF2 and more
     39           *
     40           * http://tools.ietf.org/html/rfc2898 (Specification)
     41           * http://tools.ietf.org/html/rfc6070 (Test vectors)
     42           */
     43          
     44          #if !defined(MBEDTLS_CONFIG_FILE)
     45          #include "mbedtls/config.h"
     46          #else
     47          #include MBEDTLS_CONFIG_FILE
     48          #endif
     49          
     50          #if defined(MBEDTLS_PKCS5_C)
     51          
     52          #include "mbedtls/pkcs5.h"
     53          
     54          #if defined(MBEDTLS_ASN1_PARSE_C)
     55          #include "mbedtls/asn1.h"
     56          #include "mbedtls/cipher.h"
     57          #include "mbedtls/oid.h"
     58          #endif /* MBEDTLS_ASN1_PARSE_C */
     59          
     60          #include <string.h>
     61          
     62          #if defined(MBEDTLS_PLATFORM_C)
     63          #include "mbedtls/platform.h"
     64          #else
     65          #include <stdio.h>
     66          #define mbedtls_printf printf
     67          #endif
     68          
     69          #if defined(MBEDTLS_ASN1_PARSE_C)
     70          static int pkcs5_parse_pbkdf2_params( const mbedtls_asn1_buf *params,
     71                                                mbedtls_asn1_buf *salt, int *iterations,
     72                                                int *keylen, mbedtls_md_type_t *md_type )
     73          {
     74              int ret;
     75              mbedtls_asn1_buf prf_alg_oid;
     76              unsigned char *p = params->p;
     77              const unsigned char *end = params->p + params->len;
     78          
     79              if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
     80                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
     81                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
     82              /*
     83               *  PBKDF2-params ::= SEQUENCE {
     84               *    salt              OCTET STRING,
     85               *    iterationCount    INTEGER,
     86               *    keyLength         INTEGER OPTIONAL
     87               *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     88               *  }
     89               *
     90               */
     91              if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
     92                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
     93          
     94              salt->p = p;
     95              p += salt->len;
     96          
     97              if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
     98                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
     99          
    100              if( p == end )
    101                  return( 0 );
    102          
    103              if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
    104              {
    105                  if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    106                      return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    107              }
    108          
    109              if( p == end )
    110                  return( 0 );
    111          
    112              if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
    113                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    114          
    115              if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
    116                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    117          
    118              if( p != end )
    119                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
    120                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    121          
    122              return( 0 );
    123          }
    124          
    125          int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
    126                           const unsigned char *pwd,  size_t pwdlen,
    127                           const unsigned char *data, size_t datalen,
    128                           unsigned char *output )
    129          {
    130              int ret, iterations = 0, keylen = 0;
    131              unsigned char *p, *end;
    132              mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    133              mbedtls_asn1_buf salt;
    134              mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    135              unsigned char key[32], iv[32];
    136              size_t olen = 0;
    137              const mbedtls_md_info_t *md_info;
    138              const mbedtls_cipher_info_t *cipher_info;
    139              mbedtls_md_context_t md_ctx;
    140              mbedtls_cipher_type_t cipher_alg;
    141              mbedtls_cipher_context_t cipher_ctx;
    142          
    143              p = pbe_params->p;
    144              end = p + pbe_params->len;
    145          
    146              /*
    147               *  PBES2-params ::= SEQUENCE {
    148               *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
    149               *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
    150               *  }
    151               */
    152              if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
    153                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
    154                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    155          
    156              if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
    157                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    158          
    159              // Only PBKDF2 supported at the moment
    160              //
    161              if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
    162                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    163          
    164              if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
    165                                                     &salt, &iterations, &keylen,
    166                                                     &md_type ) ) != 0 )
    167              {
    168                  return( ret );
    169              }
    170          
    171              md_info = mbedtls_md_info_from_type( md_type );
    172              if( md_info == NULL )
    173                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    174          
    175              if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
    176                                        &enc_scheme_params ) ) != 0 )
    177              {
    178                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    179              }
    180          
    181              if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
    182                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    183          
    184              cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
    185              if( cipher_info == NULL )
    186                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    187          
    188              /*
    189               * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
    190               * since it is optional and we don't know if it was set or not
    191               */
    192              keylen = cipher_info->key_bitlen / 8;
    193          
    194              if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
    195                  enc_scheme_params.len != cipher_info->iv_size )
    196              {
    197                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    198              }
    199          
    200              mbedtls_md_init( &md_ctx );
    201              mbedtls_cipher_init( &cipher_ctx );
    202          
    203              memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
    204          
    205              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
    206                  goto exit;
    207          
    208              if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
    209                                             iterations, keylen, key ) ) != 0 )
    210              {
    211                  goto exit;
    212              }
    213          
    214              if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
    215                  goto exit;
    216          
    217              if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
    218                  goto exit;
    219          
    220              if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
    221                                        data, datalen, output, &olen ) ) != 0 )
    222                  ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
    223          
    224          exit:
    225              mbedtls_md_free( &md_ctx );
    226              mbedtls_cipher_free( &cipher_ctx );
    227          
    228              return( ret );
    229          }
    230          #endif /* MBEDTLS_ASN1_PARSE_C */
    231          
    232          int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
    233                                 size_t plen, const unsigned char *salt, size_t slen,
    234                                 unsigned int iteration_count,
    235                                 uint32_t key_length, unsigned char *output )
    236          {
    237              int ret, j;
    238              unsigned int i;
    239              unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    240              unsigned char work[MBEDTLS_MD_MAX_SIZE];
    241              unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
    242              size_t use_len;
    243              unsigned char *out_p = output;
    244              unsigned char counter[4];
    245          
    246              memset( counter, 0, 4 );
    247              counter[3] = 1;
    248          
    249          #if UINT_MAX > 0xFFFFFFFF
    250              if( iteration_count > 0xFFFFFFFF )
    251                  return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
    252          #endif
    253          
    254              while( key_length )
    255              {
    256                  // U1 ends up in work
    257                  //
    258                  if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
    259                      return( ret );
    260          
    261                  if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
    262                      return( ret );
    263          
    264                  if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
    265                      return( ret );
    266          
    267                  if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
    268                      return( ret );
    269          
    270                  memcpy( md1, work, md_size );
    271          
    272                  for( i = 1; i < iteration_count; i++ )
    273                  {
    274                      // U2 ends up in md1
    275                      //
    276                      if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
    277                          return( ret );
    278          
    279                      if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
    280                          return( ret );
    281          
    282                      if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
    283                          return( ret );
    284          
    285                      // U1 xor U2
    286                      //
    287                      for( j = 0; j < md_size; j++ )
    288                          work[j] ^= md1[j];
    289                  }
    290          
    291                  use_len = ( key_length < md_size ) ? key_length : md_size;
    292                  memcpy( out_p, work, use_len );
    293          
    294                  key_length -= (uint32_t) use_len;
    295                  out_p += use_len;
    296          
    297                  for( i = 4; i > 0; i-- )
    298                      if( ++counter[i - 1] != 0 )
    299                          break;
    300              }
    301          
    302              return( 0 );
    303          }
    304          
    305          #if defined(MBEDTLS_SELF_TEST)
    306          
    307          #if !defined(MBEDTLS_SHA1_C)
    308          int mbedtls_pkcs5_self_test( int verbose )
    309          {
    310              if( verbose != 0 )
    311                  mbedtls_printf( "  PBKDF2 (SHA1): skipped\n\n" );
    312          
    313              return( 0 );
    314          }
    315          #else
    316          
    317          #define MAX_TESTS   6
    318          
    319          static const size_t plen[MAX_TESTS] =
    320              { 8, 8, 8, 24, 9 };
    321          
    322          static const unsigned char password[MAX_TESTS][32] =
    323          {
    324              "password",
    325              "password",
    326              "password",
    327              "passwordPASSWORDpassword",
    328              "pass\0word",
    329          };
    330          
    331          static const size_t slen[MAX_TESTS] =
    332              { 4, 4, 4, 36, 5 };
    333          
    334          static const unsigned char salt[MAX_TESTS][40] =
    335          {
    336              "salt",
    337              "salt",
    338              "salt",
    339              "saltSALTsaltSALTsaltSALTsaltSALTsalt",
    340              "sa\0lt",
    341          };
    342          
    343          static const uint32_t it_cnt[MAX_TESTS] =
    344              { 1, 2, 4096, 4096, 4096 };
    345          
    346          static const uint32_t key_len[MAX_TESTS] =
    347              { 20, 20, 20, 25, 16 };
    348          
    349          static const unsigned char result_key[MAX_TESTS][32] =
    350          {
    351              { 0x0c, 0x60, 0xc8, 0x0f, 0x96, 0x1f, 0x0e, 0x71,
    352                0xf3, 0xa9, 0xb5, 0x24, 0xaf, 0x60, 0x12, 0x06,
    353                0x2f, 0xe0, 0x37, 0xa6 },
    354              { 0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c,
    355                0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
    356                0xd8, 0xde, 0x89, 0x57 },
    357              { 0x4b, 0x00, 0x79, 0x01, 0xb7, 0x65, 0x48, 0x9a,
    358                0xbe, 0xad, 0x49, 0xd9, 0x26, 0xf7, 0x21, 0xd0,
    359                0x65, 0xa4, 0x29, 0xc1 },
    360              { 0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b,
    361                0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a,
    362                0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70,
    363                0x38 },
    364              { 0x56, 0xfa, 0x6a, 0xa7, 0x55, 0x48, 0x09, 0x9d,
    365                0xcc, 0x37, 0xd7, 0xf0, 0x34, 0x25, 0xe0, 0xc3 },
    366          };
    367          
    368          int mbedtls_pkcs5_self_test( int verbose )
    369          {
    370              mbedtls_md_context_t sha1_ctx;
    371              const mbedtls_md_info_t *info_sha1;
    372              int ret, i;
    373              unsigned char key[64];
    374          
    375              mbedtls_md_init( &sha1_ctx );
    376          
    377              info_sha1 = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );
    378              if( info_sha1 == NULL )
    379              {
    380                  ret = 1;
    381                  goto exit;
    382              }
    383          
    384              if( ( ret = mbedtls_md_setup( &sha1_ctx, info_sha1, 1 ) ) != 0 )
    385              {
    386                  ret = 1;
    387                  goto exit;
    388              }
    389          
    390              for( i = 0; i < MAX_TESTS; i++ )
    391              {
    392                  if( verbose != 0 )
    393                      mbedtls_printf( "  PBKDF2 (SHA1) #%d: ", i );
    394          
    395                  ret = mbedtls_pkcs5_pbkdf2_hmac( &sha1_ctx, password[i], plen[i], salt[i],
    396                                            slen[i], it_cnt[i], key_len[i], key );
    397                  if( ret != 0 ||
    398                      memcmp( result_key[i], key, key_len[i] ) != 0 )
    399                  {
    400                      if( verbose != 0 )
    401                          mbedtls_printf( "failed\n" );
    402          
    403                      ret = 1;
    404                      goto exit;
    405                  }
    406          
    407                  if( verbose != 0 )
    408                      mbedtls_printf( "passed\n" );
    409              }
    410          
    411              if( verbose != 0 )
    412                  mbedtls_printf( "\n" );
    413          
    414          exit:
    415              mbedtls_md_free( &sha1_ctx );
    416          
    417              return( ret );
    418          }
    419          #endif /* MBEDTLS_SHA1_C */
    420          
    421          #endif /* MBEDTLS_SELF_TEST */
    422          
    423          #endif /* MBEDTLS_PKCS5_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
