###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:32
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs12.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWF4B8.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs12.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"pkcs12.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\pkcs12.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\pkcs12.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\pkcs12.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  PKCS#12 Personal Information Exchange Syntax
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           *  The PKCS #12 Personal Information Exchange Syntax Standard v1.1
     35           *
     36           *  http://www.rsa.com/rsalabs/pkcs/files/h11301-wp-pkcs-12v1-1-personal-information-exchange-syntax.pdf
     37           *  ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12v1-1.asn
     38           */
     39          
     40          #if !defined(MBEDTLS_CONFIG_FILE)
     41          #include "mbedtls/config.h"
     42          #else
     43          #include MBEDTLS_CONFIG_FILE
     44          #endif
     45          
     46          #if defined(MBEDTLS_PKCS12_C)
     47          
     48          #include "mbedtls/pkcs12.h"
     49          #include "mbedtls/asn1.h"
     50          #include "mbedtls/cipher.h"
     51          
     52          #include <string.h>
     53          
     54          #if defined(MBEDTLS_ARC4_C)
     55          #include "mbedtls/arc4.h"
     56          #endif
     57          
     58          #if defined(MBEDTLS_DES_C)
     59          #include "mbedtls/des.h"
     60          #endif
     61          
     62          /* Implementation that should never be optimized out by the compiler */
     63          static void mbedtls_zeroize( void *v, size_t n ) {
     64              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     65          }
     66          
     67          #if defined(MBEDTLS_ASN1_PARSE_C)
     68          
     69          static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
     70                                              mbedtls_asn1_buf *salt, int *iterations )
     71          {
     72              int ret;
     73              unsigned char **p = &params->p;
     74              const unsigned char *end = params->p + params->len;
     75          
     76              /*
     77               *  pkcs-12PbeParams ::= SEQUENCE {
     78               *    salt          OCTET STRING,
     79               *    iterations    INTEGER
     80               *  }
     81               *
     82               */
     83              if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
     84                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
     85                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
     86          
     87              if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
     88                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
     89          
     90              salt->p = *p;
     91              *p += salt->len;
     92          
     93              if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
     94                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
     95          
     96              if( *p != end )
     97                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
     98                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
     99          
    100              return( 0 );
    101          }
    102          
    103          #define PKCS12_MAX_PWDLEN 128
    104          
    105          static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
    106                                               const unsigned char *pwd,  size_t pwdlen,
    107                                               unsigned char *key, size_t keylen,
    108                                               unsigned char *iv,  size_t ivlen )
    109          {
    110              int ret, iterations = 0;
    111              mbedtls_asn1_buf salt;
    112              size_t i;
    113              unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];
    114          
    115              if( pwdlen > PKCS12_MAX_PWDLEN )
    116                  return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
    117          
    118              memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    119              memset( &unipwd, 0, sizeof(unipwd) );
    120          
    121              if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
    122                                                   &iterations ) ) != 0 )
    123                  return( ret );
    124          
    125              for( i = 0; i < pwdlen; i++ )
    126                  unipwd[i * 2 + 1] = pwd[i];
    127          
    128              if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
    129                                             salt.p, salt.len, md_type,
    130                                             MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    131              {
    132                  return( ret );
    133              }
    134          
    135              if( iv == NULL || ivlen == 0 )
    136                  return( 0 );
    137          
    138              if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
    139                                             salt.p, salt.len, md_type,
    140                                             MBEDTLS_PKCS12_DERIVE_IV, iterations ) ) != 0 )
    141              {
    142                  return( ret );
    143              }
    144              return( 0 );
    145          }
    146          
    147          #undef PKCS12_MAX_PWDLEN
    148          
    149          int mbedtls_pkcs12_pbe_sha1_rc4_128( mbedtls_asn1_buf *pbe_params, int mode,
    150                                       const unsigned char *pwd,  size_t pwdlen,
    151                                       const unsigned char *data, size_t len,
    152                                       unsigned char *output )
    153          {
    154          #if !defined(MBEDTLS_ARC4_C)
    155              ((void) pbe_params);
    156              ((void) mode);
    157              ((void) pwd);
    158              ((void) pwdlen);
    159              ((void) data);
    160              ((void) len);
    161              ((void) output);
    162              return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
    163          #else
    164              int ret;
    165              unsigned char key[16];
    166              mbedtls_arc4_context ctx;
    167              ((void) mode);
    168          
    169              mbedtls_arc4_init( &ctx );
    170          
    171              if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, MBEDTLS_MD_SHA1,
    172                                                    pwd, pwdlen,
    173                                                    key, 16, NULL, 0 ) ) != 0 )
    174              {
    175                  return( ret );
    176              }
    177          
    178              mbedtls_arc4_setup( &ctx, key, 16 );
    179              if( ( ret = mbedtls_arc4_crypt( &ctx, len, data, output ) ) != 0 )
    180                  goto exit;
    181          
    182          exit:
    183              mbedtls_zeroize( key, sizeof( key ) );
    184              mbedtls_arc4_free( &ctx );
    185          
    186              return( ret );
    187          #endif /* MBEDTLS_ARC4_C */
    188          }
    189          
    190          int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
    191                          mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
    192                          const unsigned char *pwd,  size_t pwdlen,
    193                          const unsigned char *data, size_t len,
    194                          unsigned char *output )
    195          {
    196              int ret, keylen = 0;
    197              unsigned char key[32];
    198              unsigned char iv[16];
    199              const mbedtls_cipher_info_t *cipher_info;
    200              mbedtls_cipher_context_t cipher_ctx;
    201              size_t olen = 0;
    202          
    203              cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    204              if( cipher_info == NULL )
    205                  return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
    206          
    207              keylen = cipher_info->key_bitlen / 8;
    208          
    209              if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
    210                                                    key, keylen,
    211                                                    iv, cipher_info->iv_size ) ) != 0 )
    212              {
    213                  return( ret );
    214              }
    215          
    216              mbedtls_cipher_init( &cipher_ctx );
    217          
    218              if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
    219                  goto exit;
    220          
    221              if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
    222                  goto exit;
    223          
    224              if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
    225                  goto exit;
    226          
    227              if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
    228                  goto exit;
    229          
    230              if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
    231                                          output, &olen ) ) != 0 )
    232              {
    233                  goto exit;
    234              }
    235          
    236              if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
    237                  ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
    238          
    239          exit:
    240              mbedtls_zeroize( key, sizeof( key ) );
    241              mbedtls_zeroize( iv,  sizeof( iv  ) );
    242              mbedtls_cipher_free( &cipher_ctx );
    243          
    244              return( ret );
    245          }
    246          
    247          #endif /* MBEDTLS_ASN1_PARSE_C */
    248          
    249          static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
    250                                          const unsigned char *filler, size_t fill_len )
    251          {
    252              unsigned char *p = data;
    253              size_t use_len;
    254          
    255              while( data_len > 0 )
    256              {
    257                  use_len = ( data_len > fill_len ) ? fill_len : data_len;
    258                  memcpy( p, filler, use_len );
    259                  p += use_len;
    260                  data_len -= use_len;
    261              }
    262          }
    263          
    264          int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
    265                                 const unsigned char *pwd, size_t pwdlen,
    266                                 const unsigned char *salt, size_t saltlen,
    267                                 mbedtls_md_type_t md_type, int id, int iterations )
    268          {
    269              int ret;
    270              unsigned int j;
    271          
    272              unsigned char diversifier[128];
    273              unsigned char salt_block[128], pwd_block[128], hash_block[128];
    274              unsigned char hash_output[MBEDTLS_MD_MAX_SIZE];
    275              unsigned char *p;
    276              unsigned char c;
    277          
    278              size_t hlen, use_len, v, i;
    279          
    280              const mbedtls_md_info_t *md_info;
    281              mbedtls_md_context_t md_ctx;
    282          
    283              // This version only allows max of 64 bytes of password or salt
    284              if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
    285                  return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
    286          
    287              md_info = mbedtls_md_info_from_type( md_type );
    288              if( md_info == NULL )
    289                  return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
    290          
    291              mbedtls_md_init( &md_ctx );
    292          
    293              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
    294                  return( ret );
    295              hlen = mbedtls_md_get_size( md_info );
    296          
    297              if( hlen <= 32 )
    298                  v = 64;
    299              else
    300                  v = 128;
    301          
    302              memset( diversifier, (unsigned char) id, v );
    303          
    304              pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    305              pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
    306          
    307              p = data;
    308              while( datalen > 0 )
    309              {
    310                  // Calculate hash( diversifier || salt_block || pwd_block )
    311                  if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
    312                      goto exit;
    313          
    314                  if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
    315                      goto exit;
    316          
    317                  if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
    318                      goto exit;
    319          
    320                  if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
    321                      goto exit;
    322          
    323                  if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
    324                      goto exit;
    325          
    326                  // Perform remaining ( iterations - 1 ) recursive hash calculations
    327                  for( i = 1; i < (size_t) iterations; i++ )
    328                  {
    329                      if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
    330                          goto exit;
    331                  }
    332          
    333                  use_len = ( datalen > hlen ) ? hlen : datalen;
    334                  memcpy( p, hash_output, use_len );
    335                  datalen -= use_len;
    336                  p += use_len;
    337          
    338                  if( datalen == 0 )
    339                      break;
    340          
    341                  // Concatenating copies of hash_output into hash_block (B)
    342                  pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
    343          
    344                  // B += 1
    345                  for( i = v; i > 0; i-- )
    346                      if( ++hash_block[i - 1] != 0 )
    347                          break;
    348          
    349                  // salt_block += B
    350                  c = 0;
    351                  for( i = v; i > 0; i-- )
    352                  {
    353                      j = salt_block[i - 1] + hash_block[i - 1] + c;
    354                      c = (unsigned char) (j >> 8);
    355                      salt_block[i - 1] = j & 0xFF;
    356                  }
    357          
    358                  // pwd_block  += B
    359                  c = 0;
    360                  for( i = v; i > 0; i-- )
    361                  {
    362                      j = pwd_block[i - 1] + hash_block[i - 1] + c;
    363                      c = (unsigned char) (j >> 8);
    364                      pwd_block[i - 1] = j & 0xFF;
    365                  }
    366              }
    367          
    368              ret = 0;
    369          
    370          exit:
    371              mbedtls_zeroize( salt_block, sizeof( salt_block ) );
    372              mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
    373              mbedtls_zeroize( hash_block, sizeof( hash_block ) );
    374              mbedtls_zeroize( hash_output, sizeof( hash_output ) );
    375          
    376              mbedtls_md_free( &md_ctx );
    377          
    378              return( ret );
    379          }
    380          
    381          #endif /* MBEDTLS_PKCS12_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
