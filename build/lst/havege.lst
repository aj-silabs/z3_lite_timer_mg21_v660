###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\havege.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW963F.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\havege.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"havege.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0 -D
#        LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D EMBER_AF_USE_HWCONF
#        -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\havege.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\havege.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\havege.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /**
     14           *  \brief HAVEGE: HArdware Volatile Entropy Gathering and Expansion
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          /*
     34           *  The HAVEGE RNG was designed by Andre Seznec in 2002.
     35           *
     36           *  http://www.irisa.fr/caps/projects/hipsor/publi.php
     37           *
     38           *  Contact: seznec(at)irisa_dot_fr - orocheco(at)irisa_dot_fr
     39           */
     40          
     41          #if !defined(MBEDTLS_CONFIG_FILE)
     42          #include "mbedtls/config.h"
     43          #else
     44          #include MBEDTLS_CONFIG_FILE
     45          #endif
     46          
     47          #if defined(MBEDTLS_HAVEGE_C)
     48          
     49          #include "mbedtls/havege.h"
     50          #include "mbedtls/timing.h"
     51          
     52          #include <string.h>
     53          
     54          /* Implementation that should never be optimized out by the compiler */
     55          static void mbedtls_zeroize( void *v, size_t n ) {
     56              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     57          }
     58          
     59          /* ------------------------------------------------------------------------
     60           * On average, one iteration accesses two 8-word blocks in the havege WALK
     61           * table, and generates 16 words in the RES array.
     62           *
     63           * The data read in the WALK table is updated and permuted after each use.
     64           * The result of the hardware clock counter read is used  for this update.
     65           *
     66           * 25 conditional tests are present.  The conditional tests are grouped in
     67           * two nested  groups of 12 conditional tests and 1 test that controls the
     68           * permutation; on average, there should be 6 tests executed and 3 of them
     69           * should be mispredicted.
     70           * ------------------------------------------------------------------------
     71           */
     72          
     73          #define SWAP(X,Y) { int *T = X; X = Y; Y = T; }
     74          
     75          #define TST1_ENTER if( PTEST & 1 ) { PTEST ^= 3; PTEST >>= 1;
     76          #define TST2_ENTER if( PTEST & 1 ) { PTEST ^= 3; PTEST >>= 1;
     77          
     78          #define TST1_LEAVE U1++; }
     79          #define TST2_LEAVE U2++; }
     80          
     81          #define ONE_ITERATION                                   \
     82                                                                  \
     83              PTEST = PT1 >> 20;                                  \
     84                                                                  \
     85              TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
     86              TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
     87              TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
     88                                                                  \
     89              TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
     90              TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
     91              TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
     92                                                                  \
     93              PTX = (PT1 >> 18) & 7;                              \
     94              PT1 &= 0x1FFF;                                      \
     95              PT2 &= 0x1FFF;                                      \
     96              CLK = (int) mbedtls_timing_hardclock();                            \
     97                                                                  \
     98              i = 0;                                              \
     99              A = &WALK[PT1    ]; RES[i++] ^= *A;                 \
    100              B = &WALK[PT2    ]; RES[i++] ^= *B;                 \
    101              C = &WALK[PT1 ^ 1]; RES[i++] ^= *C;                 \
    102              D = &WALK[PT2 ^ 4]; RES[i++] ^= *D;                 \
    103                                                                  \
    104              IN = (*A >> (1)) ^ (*A << (31)) ^ CLK;              \
    105              *A = (*B >> (2)) ^ (*B << (30)) ^ CLK;              \
    106              *B = IN ^ U1;                                       \
    107              *C = (*C >> (3)) ^ (*C << (29)) ^ CLK;              \
    108              *D = (*D >> (4)) ^ (*D << (28)) ^ CLK;              \
    109                                                                  \
    110              A = &WALK[PT1 ^ 2]; RES[i++] ^= *A;                 \
    111              B = &WALK[PT2 ^ 2]; RES[i++] ^= *B;                 \
    112              C = &WALK[PT1 ^ 3]; RES[i++] ^= *C;                 \
    113              D = &WALK[PT2 ^ 6]; RES[i++] ^= *D;                 \
    114                                                                  \
    115              if( PTEST & 1 ) SWAP( A, C );                       \
    116                                                                  \
    117              IN = (*A >> (5)) ^ (*A << (27)) ^ CLK;              \
    118              *A = (*B >> (6)) ^ (*B << (26)) ^ CLK;              \
    119              *B = IN; CLK = (int) mbedtls_timing_hardclock();                   \
    120              *C = (*C >> (7)) ^ (*C << (25)) ^ CLK;              \
    121              *D = (*D >> (8)) ^ (*D << (24)) ^ CLK;              \
    122                                                                  \
    123              A = &WALK[PT1 ^ 4];                                 \
    124              B = &WALK[PT2 ^ 1];                                 \
    125                                                                  \
    126              PTEST = PT2 >> 1;                                   \
    127                                                                  \
    128              PT2 = (RES[(i - 8) ^ PTY] ^ WALK[PT2 ^ PTY ^ 7]);   \
    129              PT2 = ((PT2 & 0x1FFF) & (~8)) ^ ((PT1 ^ 8) & 0x8);  \
    130              PTY = (PT2 >> 10) & 7;                              \
    131                                                                  \
    132              TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
    133              TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
    134              TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
    135                                                                  \
    136              TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
    137              TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
    138              TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
    139                                                                  \
    140              C = &WALK[PT1 ^ 5];                                 \
    141              D = &WALK[PT2 ^ 5];                                 \
    142                                                                  \
    143              RES[i++] ^= *A;                                     \
    144              RES[i++] ^= *B;                                     \
    145              RES[i++] ^= *C;                                     \
    146              RES[i++] ^= *D;                                     \
    147                                                                  \
    148              IN = (*A >> ( 9)) ^ (*A << (23)) ^ CLK;             \
    149              *A = (*B >> (10)) ^ (*B << (22)) ^ CLK;             \
    150              *B = IN ^ U2;                                       \
    151              *C = (*C >> (11)) ^ (*C << (21)) ^ CLK;             \
    152              *D = (*D >> (12)) ^ (*D << (20)) ^ CLK;             \
    153                                                                  \
    154              A = &WALK[PT1 ^ 6]; RES[i++] ^= *A;                 \
    155              B = &WALK[PT2 ^ 3]; RES[i++] ^= *B;                 \
    156              C = &WALK[PT1 ^ 7]; RES[i++] ^= *C;                 \
    157              D = &WALK[PT2 ^ 7]; RES[i++] ^= *D;                 \
    158                                                                  \
    159              IN = (*A >> (13)) ^ (*A << (19)) ^ CLK;             \
    160              *A = (*B >> (14)) ^ (*B << (18)) ^ CLK;             \
    161              *B = IN;                                            \
    162              *C = (*C >> (15)) ^ (*C << (17)) ^ CLK;             \
    163              *D = (*D >> (16)) ^ (*D << (16)) ^ CLK;             \
    164                                                                  \
    165              PT1 = ( RES[( i - 8 ) ^ PTX] ^                      \
    166                      WALK[PT1 ^ PTX ^ 7] ) & (~1);               \
    167              PT1 ^= (PT2 ^ 0x10) & 0x10;                         \
    168                                                                  \
    169              for( n++, i = 0; i < 16; i++ )                      \
    170                  hs->pool[n % MBEDTLS_HAVEGE_COLLECT_SIZE] ^= RES[i];
    171          
    172          /*
    173           * Entropy gathering function
    174           */
    175          static void havege_fill( mbedtls_havege_state *hs )
    176          {
    177              int i, n = 0;
    178              int  U1,  U2, *A, *B, *C, *D;
    179              int PT1, PT2, *WALK, RES[16];
    180              int PTX, PTY, CLK, PTEST, IN;
    181          
    182              WALK = hs->WALK;
    183              PT1  = hs->PT1;
    184              PT2  = hs->PT2;
    185          
    186              PTX  = U1 = 0;
    187              PTY  = U2 = 0;
    188          
    189              (void)PTX;
    190          
    191              memset( RES, 0, sizeof( RES ) );
    192          
    193              while( n < MBEDTLS_HAVEGE_COLLECT_SIZE * 4 )
    194              {
    195                  ONE_ITERATION
    196                  ONE_ITERATION
    197                  ONE_ITERATION
    198                  ONE_ITERATION
    199              }
    200          
    201              hs->PT1 = PT1;
    202              hs->PT2 = PT2;
    203          
    204              hs->offset[0] = 0;
    205              hs->offset[1] = MBEDTLS_HAVEGE_COLLECT_SIZE / 2;
    206          }
    207          
    208          /*
    209           * HAVEGE initialization
    210           */
    211          void mbedtls_havege_init( mbedtls_havege_state *hs )
    212          {
    213              memset( hs, 0, sizeof( mbedtls_havege_state ) );
    214          
    215              havege_fill( hs );
    216          }
    217          
    218          void mbedtls_havege_free( mbedtls_havege_state *hs )
    219          {
    220              if( hs == NULL )
    221                  return;
    222          
    223              mbedtls_zeroize( hs, sizeof( mbedtls_havege_state ) );
    224          }
    225          
    226          /*
    227           * HAVEGE rand function
    228           */
    229          int mbedtls_havege_random( void *p_rng, unsigned char *buf, size_t len )
    230          {
    231              int val;
    232              size_t use_len;
    233              mbedtls_havege_state *hs = (mbedtls_havege_state *) p_rng;
    234              unsigned char *p = buf;
    235          
    236              while( len > 0 )
    237              {
    238                  use_len = len;
    239                  if( use_len > sizeof(int) )
    240                      use_len = sizeof(int);
    241          
    242                  if( hs->offset[1] >= MBEDTLS_HAVEGE_COLLECT_SIZE )
    243                      havege_fill( hs );
    244          
    245                  val  = hs->pool[hs->offset[0]++];
    246                  val ^= hs->pool[hs->offset[1]++];
    247          
    248                  memcpy( p, &val, use_len );
    249          
    250                  len -= use_len;
    251                  p += use_len;
    252              }
    253          
    254              return( 0 );
    255          }
    256          
    257          #endif /* MBEDTLS_HAVEGE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
