###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:19:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_ticket.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EW4BF3.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_ticket.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"ssl_ticket.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\ssl_ticket.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\ssl_ticket.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\ssl_ticket.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           *  TLS server tickets callbacks implementation
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          
     34          #if !defined(MBEDTLS_CONFIG_FILE)
     35          #include "mbedtls/config.h"
     36          #else
     37          #include MBEDTLS_CONFIG_FILE
     38          #endif
     39          
     40          #if defined(MBEDTLS_SSL_TICKET_C)
     41          
     42          #if defined(MBEDTLS_PLATFORM_C)
     43          #include "mbedtls/platform.h"
     44          #else
     45          #include <stdlib.h>
     46          #define mbedtls_calloc    calloc
     47          #define mbedtls_free      free
     48          #endif
     49          
     50          #include "mbedtls/ssl_ticket.h"
     51          
     52          #include <string.h>
     53          
     54          /* Implementation that should never be optimized out by the compiler */
     55          static void mbedtls_zeroize( void *v, size_t n ) {
     56              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     57          }
     58          
     59          /*
     60           * Initialze context
     61           */
     62          void mbedtls_ssl_ticket_init( mbedtls_ssl_ticket_context *ctx )
     63          {
     64              memset( ctx, 0, sizeof( mbedtls_ssl_ticket_context ) );
     65          
     66          #if defined(MBEDTLS_THREADING_C)
     67              mbedtls_mutex_init( &ctx->mutex );
     68          #endif
     69          }
     70          
     71          #define MAX_KEY_BYTES 32    /* 256 bits */
     72          
     73          /*
     74           * Generate/update a key
     75           */
     76          static int ssl_ticket_gen_key( mbedtls_ssl_ticket_context *ctx,
     77                                         unsigned char index )
     78          {
     79              int ret;
     80              unsigned char buf[MAX_KEY_BYTES];
     81              mbedtls_ssl_ticket_key *key = ctx->keys + index;
     82          
     83          #if defined(MBEDTLS_HAVE_TIME)
     84              key->generation_time = (uint32_t) mbedtls_time( NULL );
     85          #endif
     86          
     87              if( ( ret = ctx->f_rng( ctx->p_rng, key->name, sizeof( key->name ) ) ) != 0 )
     88                  return( ret );
     89          
     90              if( ( ret = ctx->f_rng( ctx->p_rng, buf, sizeof( buf ) ) ) != 0 )
     91                  return( ret );
     92          
     93              /* With GCM and CCM, same context can encrypt & decrypt */
     94              ret = mbedtls_cipher_setkey( &key->ctx, buf,
     95                                           mbedtls_cipher_get_key_bitlen( &key->ctx ),
     96                                           MBEDTLS_ENCRYPT );
     97          
     98              mbedtls_zeroize( buf, sizeof( buf ) );
     99          
    100              return( ret );
    101          }
    102          
    103          /*
    104           * Rotate/generate keys if necessary
    105           */
    106          static int ssl_ticket_update_keys( mbedtls_ssl_ticket_context *ctx )
    107          {
    108          #if !defined(MBEDTLS_HAVE_TIME)
    109              ((void) ctx);
    110          #else
    111              if( ctx->ticket_lifetime != 0 )
    112              {
    113                  uint32_t current_time = (uint32_t) mbedtls_time( NULL );
    114                  uint32_t key_time = ctx->keys[ctx->active].generation_time;
    115          
    116                  if( current_time >= key_time &&
    117                      current_time - key_time < ctx->ticket_lifetime )
    118                  {
    119                      return( 0 );
    120                  }
    121          
    122                  ctx->active = 1 - ctx->active;
    123          
    124                  return( ssl_ticket_gen_key( ctx, ctx->active ) );
    125              }
    126              else
    127          #endif /* MBEDTLS_HAVE_TIME */
    128                  return( 0 );
    129          }
    130          
    131          /*
    132           * Setup context for actual use
    133           */
    134          int mbedtls_ssl_ticket_setup( mbedtls_ssl_ticket_context *ctx,
    135              int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
    136              mbedtls_cipher_type_t cipher,
    137              uint32_t lifetime )
    138          {
    139              int ret;
    140              const mbedtls_cipher_info_t *cipher_info;
    141          
    142              ctx->f_rng = f_rng;
    143              ctx->p_rng = p_rng;
    144          
    145              ctx->ticket_lifetime = lifetime;
    146          
    147              cipher_info = mbedtls_cipher_info_from_type( cipher);
    148              if( cipher_info == NULL )
    149                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    150          
    151              if( cipher_info->mode != MBEDTLS_MODE_GCM &&
    152                  cipher_info->mode != MBEDTLS_MODE_CCM )
    153              {
    154                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    155              }
    156          
    157              if( cipher_info->key_bitlen > 8 * MAX_KEY_BYTES )
    158                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    159          
    160              if( ( ret = mbedtls_cipher_setup( &ctx->keys[0].ctx, cipher_info ) ) != 0 ||
    161                  ( ret = mbedtls_cipher_setup( &ctx->keys[1].ctx, cipher_info ) ) != 0 )
    162              {
    163                  return( ret );
    164              }
    165          
    166              if( ( ret = ssl_ticket_gen_key( ctx, 0 ) ) != 0 ||
    167                  ( ret = ssl_ticket_gen_key( ctx, 1 ) ) != 0 )
    168              {
    169                  return( ret );
    170              }
    171          
    172              return( 0 );
    173          }
    174          
    175          /*
    176           * Serialize a session in the following format:
    177           *  0   .   n-1     session structure, n = sizeof(mbedtls_ssl_session)
    178           *  n   .   n+2     peer_cert length = m (0 if no certificate)
    179           *  n+3 .   n+2+m   peer cert ASN.1
    180           */
    181          static int ssl_save_session( const mbedtls_ssl_session *session,
    182                                       unsigned char *buf, size_t buf_len,
    183                                       size_t *olen )
    184          {
    185              unsigned char *p = buf;
    186              size_t left = buf_len;
    187          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    188              size_t cert_len;
    189          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    190          
    191              if( left < sizeof( mbedtls_ssl_session ) )
    192                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
    193          
    194              memcpy( p, session, sizeof( mbedtls_ssl_session ) );
    195              p += sizeof( mbedtls_ssl_session );
    196              left -= sizeof( mbedtls_ssl_session );
    197          
    198          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    199              if( session->peer_cert == NULL )
    200                  cert_len = 0;
    201              else
    202                  cert_len = session->peer_cert->raw.len;
    203          
    204              if( left < 3 + cert_len )
    205                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
    206          
    207              *p++ = (unsigned char)( ( cert_len >> 16 ) & 0xFF );
    208              *p++ = (unsigned char)( ( cert_len >>  8 ) & 0xFF );
    209              *p++ = (unsigned char)( ( cert_len       ) & 0xFF );
    210          
    211              if( session->peer_cert != NULL )
    212                  memcpy( p, session->peer_cert->raw.p, cert_len );
    213          
    214              p += cert_len;
    215          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    216          
    217              *olen = p - buf;
    218          
    219              return( 0 );
    220          }
    221          
    222          /*
    223           * Unserialise session, see ssl_save_session()
    224           */
    225          static int ssl_load_session( mbedtls_ssl_session *session,
    226                                       const unsigned char *buf, size_t len )
    227          {
    228              const unsigned char *p = buf;
    229              const unsigned char * const end = buf + len;
    230          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    231              size_t cert_len;
    232          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    233          
    234              if( sizeof( mbedtls_ssl_session ) > (size_t)( end - p ) )
    235                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    236          
    237              memcpy( session, p, sizeof( mbedtls_ssl_session ) );
    238              p += sizeof( mbedtls_ssl_session );
    239          
    240          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    241              if( 3 > (size_t)( end - p ) )
    242                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    243          
    244              cert_len = ( p[0] << 16 ) | ( p[1] << 8 ) | p[2];
    245              p += 3;
    246          
    247              if( cert_len == 0 )
    248              {
    249                  session->peer_cert = NULL;
    250              }
    251              else
    252              {
    253                  int ret;
    254          
    255                  if( cert_len > (size_t)( end - p ) )
    256                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    257          
    258                  session->peer_cert = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
    259          
    260                  if( session->peer_cert == NULL )
    261                      return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    262          
    263                  mbedtls_x509_crt_init( session->peer_cert );
    264          
    265                  if( ( ret = mbedtls_x509_crt_parse_der( session->peer_cert,
    266                                                          p, cert_len ) ) != 0 )
    267                  {
    268                      mbedtls_x509_crt_free( session->peer_cert );
    269                      mbedtls_free( session->peer_cert );
    270                      session->peer_cert = NULL;
    271                      return( ret );
    272                  }
    273          
    274                  p += cert_len;
    275              }
    276          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    277          
    278              if( p != end )
    279                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    280          
    281              return( 0 );
    282          }
    283          
    284          /*
    285           * Create session ticket, with the following structure:
    286           *
    287           *    struct {
    288           *        opaque key_name[4];
    289           *        opaque iv[12];
    290           *        opaque encrypted_state<0..2^16-1>;
    291           *        opaque tag[16];
    292           *    } ticket;
    293           *
    294           * The key_name, iv, and length of encrypted_state are the additional
    295           * authenticated data.
    296           */
    297          int mbedtls_ssl_ticket_write( void *p_ticket,
    298                                        const mbedtls_ssl_session *session,
    299                                        unsigned char *start,
    300                                        const unsigned char *end,
    301                                        size_t *tlen,
    302                                        uint32_t *ticket_lifetime )
    303          {
    304              int ret;
    305              mbedtls_ssl_ticket_context *ctx = p_ticket;
    306              mbedtls_ssl_ticket_key *key;
    307              unsigned char *key_name = start;
    308              unsigned char *iv = start + 4;
    309              unsigned char *state_len_bytes = iv + 12;
    310              unsigned char *state = state_len_bytes + 2;
    311              unsigned char *tag;
    312              size_t clear_len, ciph_len;
    313          
    314              *tlen = 0;
    315          
    316              if( ctx == NULL || ctx->f_rng == NULL )
    317                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    318          
    319              /* We need at least 4 bytes for key_name, 12 for IV, 2 for len 16 for tag,
    320               * in addition to session itself, that will be checked when writing it. */
    321              if( end - start < 4 + 12 + 2 + 16 )
    322                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
    323          
    324          #if defined(MBEDTLS_THREADING_C)
    325              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    326                  return( ret );
    327          #endif
    328          
    329              if( ( ret = ssl_ticket_update_keys( ctx ) ) != 0 )
    330                  goto cleanup;
    331          
    332              key = &ctx->keys[ctx->active];
    333          
    334              *ticket_lifetime = ctx->ticket_lifetime;
    335          
    336              memcpy( key_name, key->name, 4 );
    337          
    338              if( ( ret = ctx->f_rng( ctx->p_rng, iv, 12 ) ) != 0 )
    339                  goto cleanup;
    340          
    341              /* Dump session state */
    342              if( ( ret = ssl_save_session( session,
    343                                            state, end - state, &clear_len ) ) != 0 ||
    344                  (unsigned long) clear_len > 65535 )
    345              {
    346                   goto cleanup;
    347              }
    348              state_len_bytes[0] = ( clear_len >> 8 ) & 0xff;
    349              state_len_bytes[1] = ( clear_len      ) & 0xff;
    350          
    351              /* Encrypt and authenticate */
    352              tag = state + clear_len;
    353              if( ( ret = mbedtls_cipher_auth_encrypt( &key->ctx,
    354                              iv, 12, key_name, 4 + 12 + 2,
    355                              state, clear_len, state, &ciph_len, tag, 16 ) ) != 0 )
    356              {
    357                  goto cleanup;
    358              }
    359              if( ciph_len != clear_len )
    360              {
    361                  ret = MBEDTLS_ERR_SSL_INTERNAL_ERROR;
    362                  goto cleanup;
    363              }
    364          
    365              *tlen = 4 + 12 + 2 + 16 + ciph_len;
    366          
    367          cleanup:
    368          #if defined(MBEDTLS_THREADING_C)
    369              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    370                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    371          #endif
    372          
    373              return( ret );
    374          }
    375          
    376          /*
    377           * Select key based on name
    378           */
    379          static mbedtls_ssl_ticket_key *ssl_ticket_select_key(
    380                  mbedtls_ssl_ticket_context *ctx,
    381                  const unsigned char name[4] )
    382          {
    383              unsigned char i;
    384          
    385              for( i = 0; i < sizeof( ctx->keys ) / sizeof( *ctx->keys ); i++ )
    386                  if( memcmp( name, ctx->keys[i].name, 4 ) == 0 )
    387                      return( &ctx->keys[i] );
    388          
    389              return( NULL );
    390          }
    391          
    392          /*
    393           * Load session ticket (see mbedtls_ssl_ticket_write for structure)
    394           */
    395          int mbedtls_ssl_ticket_parse( void *p_ticket,
    396                                        mbedtls_ssl_session *session,
    397                                        unsigned char *buf,
    398                                        size_t len )
    399          {
    400              int ret;
    401              mbedtls_ssl_ticket_context *ctx = p_ticket;
    402              mbedtls_ssl_ticket_key *key;
    403              unsigned char *key_name = buf;
    404              unsigned char *iv = buf + 4;
    405              unsigned char *enc_len_p = iv + 12;
    406              unsigned char *ticket = enc_len_p + 2;
    407              unsigned char *tag;
    408              size_t enc_len, clear_len;
    409          
    410              if( ctx == NULL || ctx->f_rng == NULL )
    411                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    412          
    413              /* See mbedtls_ssl_ticket_write() */
    414              if( len < 4 + 12 + 2 + 16 )
    415                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    416          
    417          #if defined(MBEDTLS_THREADING_C)
    418              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    419                  return( ret );
    420          #endif
    421          
    422              if( ( ret = ssl_ticket_update_keys( ctx ) ) != 0 )
    423                  goto cleanup;
    424          
    425              enc_len = ( enc_len_p[0] << 8 ) | enc_len_p[1];
    426              tag = ticket + enc_len;
    427          
    428              if( len != 4 + 12 + 2 + enc_len + 16 )
    429              {
    430                  ret = MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
    431                  goto cleanup;
    432              }
    433          
    434              /* Select key */
    435              if( ( key = ssl_ticket_select_key( ctx, key_name ) ) == NULL )
    436              {
    437                  /* We can't know for sure but this is a likely option unless we're
    438                   * under attack - this is only informative anyway */
    439                  ret = MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED;
    440                  goto cleanup;
    441              }
    442          
    443              /* Decrypt and authenticate */
    444              if( ( ret = mbedtls_cipher_auth_decrypt( &key->ctx, iv, 12,
    445                              key_name, 4 + 12 + 2, ticket, enc_len,
    446                              ticket, &clear_len, tag, 16 ) ) != 0 )
    447              {
    448                  if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
    449                      ret = MBEDTLS_ERR_SSL_INVALID_MAC;
    450          
    451                  goto cleanup;
    452              }
    453              if( clear_len != enc_len )
    454              {
    455                  ret = MBEDTLS_ERR_SSL_INTERNAL_ERROR;
    456                  goto cleanup;
    457              }
    458          
    459              /* Actually load session */
    460              if( ( ret = ssl_load_session( session, ticket, clear_len ) ) != 0 )
    461                  goto cleanup;
    462          
    463          #if defined(MBEDTLS_HAVE_TIME)
    464              {
    465                  /* Check for expiration */
    466                  mbedtls_time_t current_time = mbedtls_time( NULL );
    467          
    468                  if( current_time < session->start ||
    469                      (uint32_t)( current_time - session->start ) > ctx->ticket_lifetime )
    470                  {
    471                      ret = MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED;
    472                      goto cleanup;
    473                  }
    474              }
    475          #endif
    476          
    477          cleanup:
    478          #if defined(MBEDTLS_THREADING_C)
    479              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    480                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    481          #endif
    482          
    483              return( ret );
    484          }
    485          
    486          /*
    487           * Free context
    488           */
    489          void mbedtls_ssl_ticket_free( mbedtls_ssl_ticket_context *ctx )
    490          {
    491              mbedtls_cipher_free( &ctx->keys[0].ctx );
    492              mbedtls_cipher_free( &ctx->keys[1].ctx );
    493          
    494          #if defined(MBEDTLS_THREADING_C)
    495              mbedtls_mutex_free( &ctx->mutex );
    496          #endif
    497          
    498              mbedtls_zeroize( ctx, sizeof( mbedtls_ssl_ticket_context ) );
    499          }
    500          
    501          #endif /* MBEDTLS_SSL_TICKET_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
