###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:19
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\bootloader\api\btl_interface_storage.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWD4C8.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\bootloader\api\btl_interface_storage.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"btl_interface_storage.c\"" -D PSSTORE_SIZE=0 -D
#        LONGTOKEN_SIZE=0 -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\bootloader\api\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\btl_interface_storage.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\btl_interface_storage.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\platform\bootloader\api\btl_interface_storage.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Application interface to the storage plugin of the bootloader.
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          #include "btl_interface.h"
     19          
     20          // Make assert no-op if not configured
     21          #ifndef BTL_ASSERT
     22          #define BTL_ASSERT(x)
     23          #endif
     24          
     25          // -----------------------------------------------------------------------------
     26          // Functions
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void bootloader_getStorageInfo(BootloaderStorageInformation_t *info)
     29          {
     30            if (!bootloader_pointerValid(mainBootloaderTable)
     31                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_getStorageInfo: (+1)
   \        0x0   0x2128             MOVS     R1,#+40
   \        0x2   0x6809             LDR      R1,[R1, #+0]
   \        0x4   0xF5B1 0x4F80      CMP      R1,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_getStorageInfo_0
   \        0xA   0x6B09             LDR      R1,[R1, #+48]
   \        0xC   0xF5B1 0x4F80      CMP      R1,#+16384
   \       0x10   0xBF3C             ITT      CC 
     32              return;
     33            }
     34            mainBootloaderTable->storage->getInfo(info);
   \       0x12   0x6849             LDRCC    R1,[R1, #+4]
   \       0x14   0x4708             BXCC     R1
     35          }
   \                     ??bootloader_getStorageInfo_0: (+1)
   \       0x16   0x4770             BX       LR               ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          int32_t bootloader_getStorageSlotInfo(uint32_t                slotId,
     38                                                BootloaderStorageSlot_t *slot)
     39          {
     40            if (!bootloader_pointerValid(mainBootloaderTable)
     41                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_getStorageSlotInfo: (+1)
   \        0x0   0x2228             MOVS     R2,#+40
   \        0x2   0x6812             LDR      R2,[R2, #+0]
   \        0x4   0xF5B2 0x4F80      CMP      R2,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_getStorageSlotInfo_0
   \        0xA   0x6B12             LDR      R2,[R2, #+48]
   \        0xC   0xF5B2 0x4F80      CMP      R2,#+16384
   \       0x10   0xBF3C             ITT      CC 
     42              return BOOTLOADER_ERROR_INIT_TABLE;
     43            }
     44            return mainBootloaderTable->storage->getSlotInfo(slotId, slot);
   \       0x12   0x6892             LDRCC    R2,[R2, #+8]
   \       0x14   0x4710             BXCC     R2
   \                     ??bootloader_getStorageSlotInfo_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine0
     45          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF44F 0x7081      MOV      R0,#+258
   \        0x4   0x4770             BX       LR               ;; return
     46          

   \                                 In section .text, align 2, keep-with-next
     47          int32_t bootloader_readStorage(uint32_t slotId,
     48                                         uint32_t offset,
     49                                         uint8_t  *buffer,
     50                                         size_t   length)
     51          {
   \                     bootloader_readStorage: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     52            if (!bootloader_pointerValid(mainBootloaderTable)
     53                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \        0x2   0x2428             MOVS     R4,#+40
   \        0x4   0x6824             LDR      R4,[R4, #+0]
   \        0x6   0xF5B4 0x4F80      CMP      R4,#+16384
   \        0xA   0xBF3C             ITT      CC 
   \        0xC   0x6B24             LDRCC    R4,[R4, #+48]
   \        0xE   0xF5B4 0x4F80      CMPCC    R4,#+16384
   \       0x12   0xD202             BCS.N    ??bootloader_readStorage_0
     54              return BOOTLOADER_ERROR_INIT_TABLE;
     55            }
     56            return mainBootloaderTable->storage->read(slotId, offset, buffer, length);
   \       0x14   0x68E4             LDR      R4,[R4, #+12]
   \       0x16   0x47A0             BLX      R4
   \       0x18   0xBD10             POP      {R4,PC}
   \                     ??bootloader_readStorage_0: (+1)
   \       0x1A   0x....             B.N      ?Subroutine3
     57          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0xF44F 0x7081      MOV      R0,#+258
   \        0x4   0xBD10             POP      {R4,PC}          ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          int32_t bootloader_writeStorage(uint32_t slotId,
     60                                          uint32_t offset,
     61                                          uint8_t  *buffer,
     62                                          size_t   length)
     63          {
   \                     bootloader_writeStorage: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     64            if (!bootloader_pointerValid(mainBootloaderTable)
     65                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \        0x2   0x2428             MOVS     R4,#+40
   \        0x4   0x6824             LDR      R4,[R4, #+0]
   \        0x6   0xF5B4 0x4F80      CMP      R4,#+16384
   \        0xA   0xBF3C             ITT      CC 
   \        0xC   0x6B24             LDRCC    R4,[R4, #+48]
   \        0xE   0xF5B4 0x4F80      CMPCC    R4,#+16384
   \       0x12   0xD202             BCS.N    ??bootloader_writeStorage_0
     66              return BOOTLOADER_ERROR_INIT_TABLE;
     67            }
     68            return mainBootloaderTable->storage->write(slotId, offset, buffer, length);
   \       0x14   0x6924             LDR      R4,[R4, #+16]
   \       0x16   0x47A0             BLX      R4
   \       0x18   0xBD10             POP      {R4,PC}
   \                     ??bootloader_writeStorage_0: (+1)
   \       0x1A                      REQUIRE ?Subroutine3
   \       0x1A                      ;; // Fall through to label ?Subroutine3
     69          }
     70          

   \                                 In section .text, align 2, keep-with-next
     71          int32_t bootloader_eraseWriteStorage(uint32_t slotId,
     72                                               uint32_t offset,
     73                                               uint8_t  *buffer,
     74                                               size_t   length)
     75          {
   \                     bootloader_eraseWriteStorage: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0xB087             SUB      SP,SP,#+28
     76            int32_t retVal;
     77            uint16_t flashPageSize;
     78            uint32_t storageStartAddr;
     79            uint32_t eraseOffset;
     80            uint32_t eraseLength;
     81            BootloaderStorageSlot_t storageSlot;
     82            BootloaderStorageInformation_t storageInfo;
     83          
     84            if (!bootloader_pointerValid(mainBootloaderTable)
     85                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \        0x8   0x2028             MOVS     R0,#+40
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x460D             MOV      R5,R1
   \        0xE   0x4690             MOV      R8,R2
   \       0x10   0xF5B0 0x4F80      CMP      R0,#+16384
   \       0x14   0x461F             MOV      R7,R3
   \       0x16   0xBF3C             ITT      CC 
   \       0x18   0x6B01             LDRCC    R1,[R0, #+48]
   \       0x1A   0xF5B1 0x4F80      CMPCC    R1,#+16384
   \       0x1E   0xD208             BCS.N    ??bootloader_eraseWriteStorage_0
     86              return BOOTLOADER_ERROR_INIT_TABLE;
     87            }
     88          
     89            bootloader_getStorageInfo(&storageInfo);
   \       0x20   0xA802             ADD      R0,SP,#+8
   \       0x22   0x....'....        BL       bootloader_getStorageInfo
     90            flashPageSize = storageInfo.info->pageSize;
   \       0x26   0x9806             LDR      R0,[SP, #+24]
   \       0x28   0x8984             LDRH     R4,[R0, #+12]
     91            if (flashPageSize == 0) {
   \       0x2A   0xB92C             CBNZ.N   R4,??bootloader_eraseWriteStorage_1
     92              return BOOTLOADER_ERROR_STORAGE_INVALID_SLOT;
   \       0x2C   0xF240 0x4001      MOVW     R0,#+1025
   \       0x30   0xE044             B.N      ??bootloader_eraseWriteStorage_2
     93            }
   \                     ??bootloader_eraseWriteStorage_0: (+1)
   \       0x32   0xF44F 0x7081      MOV      R0,#+258
   \       0x36   0xE041             B.N      ??bootloader_eraseWriteStorage_2
     94          
     95            retVal = bootloader_getStorageSlotInfo(slotId, &storageSlot);
   \                     ??bootloader_eraseWriteStorage_1: (+1)
   \       0x38   0x4669             MOV      R1,SP
   \       0x3A   0x4630             MOV      R0,R6
   \       0x3C   0x....'....        BL       bootloader_getStorageSlotInfo
     96            if (retVal != BOOTLOADER_OK) {
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD13B             BNE.N    ??bootloader_eraseWriteStorage_2
     97              return retVal;
     98            }
     99            storageStartAddr = storageSlot.address;
    100          
    101            if (offset + length > storageSlot.length) {
   \       0x44   0x9801             LDR      R0,[SP, #+4]
   \       0x46   0x1979             ADDS     R1,R7,R5
   \       0x48   0x9A00             LDR      R2,[SP, #+0]
   \       0x4A   0x4288             CMP      R0,R1
   \       0x4C   0xBF38             IT       CC 
   \       0x4E   0xF240 0x4002      MOVWCC   R0,#+1026
    102              return BOOTLOADER_ERROR_STORAGE_INVALID_ADDRESS;
   \       0x52   0xD333             BCC.N    ??bootloader_eraseWriteStorage_2
    103            }
    104          
    105            if (offset % flashPageSize) {
   \       0x54   0xFBB5 0xFCF4      UDIV     R12,R5,R4
   \       0x58   0x1E63             SUBS     R3,R4,#+1
   \       0x5A   0x43DB             MVNS     R3,R3
   \       0x5C   0xFB04 0xFC0C      MUL      R12,R4,R12
   \       0x60   0x18AE             ADDS     R6,R5,R2
   \       0x62   0xEBB5 0x000C      SUBS     R0,R5,R12
   \       0x66   0xD013             BEQ.N    ??bootloader_eraseWriteStorage_3
    106              // Erase from next page:
    107              eraseOffset = (offset & ~(flashPageSize - 1)) + flashPageSize;
    108          
    109              if ((offset + length) % flashPageSize) {
   \       0x68   0xFBB1 0xF0F4      UDIV     R0,R1,R4
   \       0x6C   0xEA03 0x0E05      AND      LR,R3,R5
   \       0x70   0x44A6             ADD      LR,R4,LR
   \       0x72   0xFB04 0x1010      MLS      R0,R4,R0,R1
   \       0x76   0xB128             CBZ.N    R0,??bootloader_eraseWriteStorage_4
    110                // Example case for this if/else section:
    111                // 0    1    2    3
    112                // |----|----|----|
    113                //   ^          ^
    114                //   O          L
    115                eraseLength = ((offset + length) & ~(flashPageSize - 1)) + flashPageSize - eraseOffset;
   \       0x78   0xEA03 0x0501      AND      R5,R3,R1
   \       0x7C   0x1965             ADDS     R5,R4,R5
   \       0x7E   0xEBA5 0x050E      SUB      R5,R5,LR
   \       0x82   0xE003             B.N      ??bootloader_eraseWriteStorage_5
    116              } else {
    117                // Example case for this if/else section:
    118                // 0    1    2    3
    119                // |----|----|----|
    120                //   ^            ^
    121                //   O            L
    122                eraseLength = length - (flashPageSize - (offset % flashPageSize));
   \                     ??bootloader_eraseWriteStorage_4: (+1)
   \       0x84   0x1B3C             SUBS     R4,R7,R4
   \       0x86   0x192D             ADDS     R5,R5,R4
   \       0x88   0xEBA5 0x050C      SUB      R5,R5,R12
    123              }
    124              eraseOffset = storageStartAddr + eraseOffset;
   \                     ??bootloader_eraseWriteStorage_5: (+1)
   \       0x8C   0x4472             ADD      R2,R2,LR
   \       0x8E   0xE00A             B.N      ??bootloader_eraseWriteStorage_6
    125            } else {
    126              eraseOffset = storageStartAddr + offset;
    127              if (length % flashPageSize) {
   \                     ??bootloader_eraseWriteStorage_3: (+1)
   \       0x90   0xFBB7 0xF0F4      UDIV     R0,R7,R4
   \       0x94   0x4632             MOV      R2,R6
   \       0x96   0xFB04 0x7010      MLS      R0,R4,R0,R7
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xBF1A             ITTE     NE 
   \       0x9E   0xEA03 0x0507      ANDNE    R5,R3,R7
   \       0xA2   0x1965             ADDNE    R5,R4,R5
   \       0xA4   0x463D             MOVEQ    R5,R7
    128                // Example case for this if/else section:
    129                // 0    1    2    3
    130                // |----|----|----|
    131                //      ^       ^
    132                //      O       L
    133                eraseLength = (length & ~(flashPageSize - 1)) + flashPageSize;
    134              } else {
    135                // Example case for this if/else section:
    136                // 0    1    2    3
    137                // |----|----|----|
    138                //      ^         ^
    139                //      O         L
    140                eraseLength = length;
    141              }
    142            }
    143            if (eraseLength != 0) {
   \                     ??bootloader_eraseWriteStorage_6: (+1)
   \       0xA6   0xB125             CBZ.N    R5,??bootloader_eraseWriteStorage_7
    144              retVal = bootloader_eraseRawStorage(eraseOffset, eraseLength);
   \       0xA8   0x4629             MOV      R1,R5
   \       0xAA   0x4610             MOV      R0,R2
   \       0xAC   0x....'....        BL       bootloader_eraseRawStorage
    145              if (retVal != BOOTLOADER_OK) {
   \       0xB0   0xB920             CBNZ.N   R0,??bootloader_eraseWriteStorage_2
    146                return retVal;
    147              }
    148            }
    149          
    150            retVal = bootloader_writeRawStorage(storageStartAddr + offset, buffer, length);
   \                     ??bootloader_eraseWriteStorage_7: (+1)
   \       0xB2   0x463A             MOV      R2,R7
   \       0xB4   0x4641             MOV      R1,R8
   \       0xB6   0x4630             MOV      R0,R6
   \       0xB8   0x....'....        BL       bootloader_writeRawStorage
    151            if (retVal != BOOTLOADER_OK) {
   \                     ??bootloader_eraseWriteStorage_2: (+1)
   \       0xBC   0xB008             ADD      SP,SP,#+32
   \       0xBE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    152              return retVal;
    153            }
    154          
    155            return BOOTLOADER_OK;
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          int32_t bootloader_eraseStorageSlot(uint32_t slotId)
    159          {
    160            if (!bootloader_pointerValid(mainBootloaderTable)
    161                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_eraseStorageSlot: (+1)
   \        0x0   0x2128             MOVS     R1,#+40
   \        0x2   0x6809             LDR      R1,[R1, #+0]
   \        0x4   0xF5B1 0x4F80      CMP      R1,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_eraseStorageSlot_0
   \        0xA   0x6B09             LDR      R1,[R1, #+48]
   \        0xC   0xF5B1 0x4F80      CMP      R1,#+16384
   \       0x10   0xBF3C             ITT      CC 
    162              return BOOTLOADER_ERROR_INIT_TABLE;
    163            }
    164            return mainBootloaderTable->storage->erase(slotId);
   \       0x12   0x6949             LDRCC    R1,[R1, #+20]
   \       0x14   0x4708             BXCC     R1
   \                     ??bootloader_eraseStorageSlot_0: (+1)
   \       0x16                      REQUIRE ?Subroutine0
   \       0x16                      ;; // Fall through to label ?Subroutine0
    165          }
    166          

   \                                 In section .text, align 2, keep-with-next
    167          int32_t bootloader_initChunkedEraseStorageSlot(uint32_t                slotId,
    168                                                         BootloaderEraseStatus_t *eraseStat)
    169          {
   \                     bootloader_initChunkedEraseStorageSlot: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
    170            int32_t retVal;
    171            BootloaderStorageInformation_t storageInfo;
    172            bootloader_getStorageInfo(&storageInfo);
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x....'....        BL       bootloader_getStorageInfo
    173          
    174            retVal = bootloader_getStorageSlotInfo(slotId, &eraseStat->storageSlotInfo);
   \        0xE   0xF105 0x0108      ADD      R1,R5,#+8
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       bootloader_getStorageSlotInfo
    175            if (retVal != BOOTLOADER_OK) {
   \       0x18   0xB928             CBNZ.N   R0,??bootloader_initChunkedEraseStorageSlot_0
    176              return retVal;
    177            }
    178          
    179            eraseStat->currentPageAddr = eraseStat->storageSlotInfo.address;
   \       0x1A   0x68A8             LDR      R0,[R5, #+8]
   \       0x1C   0x6028             STR      R0,[R5, #+0]
    180            eraseStat->pageSize = storageInfo.info->pageSize;
   \       0x1E   0x9904             LDR      R1,[SP, #+16]
   \       0x20   0x68C8             LDR      R0,[R1, #+12]
   \       0x22   0x6068             STR      R0,[R5, #+4]
    181          
    182            return BOOTLOADER_OK;
   \       0x24   0x2000             MOVS     R0,#+0
   \                     ??bootloader_initChunkedEraseStorageSlot_0: (+1)
   \       0x26   0xB005             ADD      SP,SP,#+20
   \       0x28   0xBD30             POP      {R4,R5,PC}       ;; return
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          int32_t bootloader_chunkedEraseStorageSlot(BootloaderEraseStatus_t *eraseStat)
    186          {
   \                     bootloader_chunkedEraseStorageSlot: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    187            int32_t retVal;
    188            if (eraseStat->currentPageAddr
    189                == (eraseStat->storageSlotInfo.address + eraseStat->storageSlotInfo.length)) {
   \        0x4   0x68A2             LDR      R2,[R4, #+8]
   \        0x6   0x68E1             LDR      R1,[R4, #+12]
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x188A             ADDS     R2,R1,R2
   \        0xC   0x4290             CMP      R0,R2
   \        0xE   0xD00C             BEQ.N    ??bootloader_chunkedEraseStorageSlot_0
    190              return BOOTLOADER_OK;
    191            }
    192          
    193            retVal = bootloader_eraseRawStorage(eraseStat->currentPageAddr, eraseStat->pageSize);
   \       0x10   0x6861             LDR      R1,[R4, #+4]
   \       0x12   0x....'....        BL       bootloader_eraseRawStorage
    194            if (retVal != BOOTLOADER_OK) {
   \       0x16   0xB960             CBNZ.N   R0,??bootloader_chunkedEraseStorageSlot_1
    195              return retVal;
    196            }
    197          
    198            eraseStat->currentPageAddr += eraseStat->pageSize;
   \       0x18   0x6821             LDR      R1,[R4, #+0]
   \       0x1A   0x6860             LDR      R0,[R4, #+4]
   \       0x1C   0x1841             ADDS     R1,R0,R1
   \       0x1E   0x6021             STR      R1,[R4, #+0]
    199            if (eraseStat->currentPageAddr
    200                == (eraseStat->storageSlotInfo.address + eraseStat->storageSlotInfo.length)) {
   \       0x20   0x68A2             LDR      R2,[R4, #+8]
   \       0x22   0x68E0             LDR      R0,[R4, #+12]
   \       0x24   0x1882             ADDS     R2,R0,R2
   \       0x26   0x4291             CMP      R1,R2
   \       0x28   0xD101             BNE.N    ??bootloader_chunkedEraseStorageSlot_2
    201              return BOOTLOADER_OK;
   \                     ??bootloader_chunkedEraseStorageSlot_0: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xBD10             POP      {R4,PC}
    202            }
    203          
    204            return BOOTLOADER_ERROR_STORAGE_CONTINUE;
   \                     ??bootloader_chunkedEraseStorageSlot_2: (+1)
   \       0x2E   0xF240 0x4007      MOVW     R0,#+1031
   \                     ??bootloader_chunkedEraseStorageSlot_1: (+1)
   \       0x32   0xBD10             POP      {R4,PC}          ;; return
    205          }
    206          

   \                                 In section .text, align 2, keep-with-next
    207          int32_t bootloader_setImageToBootload(int32_t slotId)
    208          {
   \                     bootloader_setImageToBootload: (+1)
   \        0x0   0xB501             PUSH     {R0,LR}
    209            if (!bootloader_pointerValid(mainBootloaderTable)
    210                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \        0x2   0x2028             MOVS     R0,#+40
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0xF5B0 0x4F80      CMP      R0,#+16384
   \        0xA   0xBF3C             ITT      CC 
   \        0xC   0x6B02             LDRCC    R2,[R0, #+48]
   \        0xE   0xF5B2 0x4F80      CMPCC    R2,#+16384
   \       0x12   0xD204             BCS.N    ??bootloader_setImageToBootload_0
    211              return BOOTLOADER_ERROR_INIT_TABLE;
    212            }
    213            return mainBootloaderTable->storage->setImagesToBootload(&slotId, 1);
   \       0x14   0x6992             LDR      R2,[R2, #+24]
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x4790             BLX      R2
   \       0x1C   0xBD02             POP      {R1,PC}
   \                     ??bootloader_setImageToBootload_0: (+1)
   \       0x1E   0xF44F 0x7081      MOV      R0,#+258
   \       0x22   0xBD02             POP      {R1,PC}          ;; return
    214          }
    215          

   \                                 In section .text, align 2, keep-with-next
    216          int32_t bootloader_setImagesToBootload(int32_t *slotIds, size_t length)
    217          {
    218            if (!bootloader_pointerValid(mainBootloaderTable)
    219                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_setImagesToBootload: (+1)
   \        0x0   0x2228             MOVS     R2,#+40
   \        0x2   0x6812             LDR      R2,[R2, #+0]
   \        0x4   0xF5B2 0x4F80      CMP      R2,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_setImagesToBootload_0
   \        0xA   0x6B12             LDR      R2,[R2, #+48]
   \        0xC   0xF5B2 0x4F80      CMP      R2,#+16384
   \       0x10   0xBF3C             ITT      CC 
    220              return BOOTLOADER_ERROR_INIT_TABLE;
    221            }
    222            return mainBootloaderTable->storage->setImagesToBootload(slotIds, length);
   \       0x12   0x6992             LDRCC    R2,[R2, #+24]
   \       0x14   0x4710             BXCC     R2
   \                     ??bootloader_setImagesToBootload_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine0
    223          }
    224          

   \                                 In section .text, align 2, keep-with-next
    225          int32_t bootloader_getImagesToBootload(int32_t *slotIds, size_t length)
    226          {
    227            if (!bootloader_pointerValid(mainBootloaderTable)
    228                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_getImagesToBootload: (+1)
   \        0x0   0x2228             MOVS     R2,#+40
   \        0x2   0x6812             LDR      R2,[R2, #+0]
   \        0x4   0xF5B2 0x4F80      CMP      R2,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_getImagesToBootload_0
   \        0xA   0x6B12             LDR      R2,[R2, #+48]
   \        0xC   0xF5B2 0x4F80      CMP      R2,#+16384
   \       0x10   0xBF3C             ITT      CC 
    229              return BOOTLOADER_ERROR_INIT_TABLE;
    230            }
    231            return mainBootloaderTable->storage->getImagesToBootload(slotIds, length);
   \       0x12   0x69D2             LDRCC    R2,[R2, #+28]
   \       0x14   0x4710             BXCC     R2
   \                     ??bootloader_getImagesToBootload_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine0
    232          }
    233          

   \                                 In section .text, align 2, keep-with-next
    234          int32_t bootloader_appendImageToBootloadList(int32_t slotId)
    235          {
    236            if (!bootloader_pointerValid(mainBootloaderTable)
    237                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_appendImageToBootloadList: (+1)
   \        0x0   0x2128             MOVS     R1,#+40
   \        0x2   0x6809             LDR      R1,[R1, #+0]
   \        0x4   0xF5B1 0x4F80      CMP      R1,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_appendImageToBootloadList_0
   \        0xA   0x6B09             LDR      R1,[R1, #+48]
   \        0xC   0xF5B1 0x4F80      CMP      R1,#+16384
   \       0x10   0xBF3C             ITT      CC 
    238              return BOOTLOADER_ERROR_INIT_TABLE;
    239            }
    240            return mainBootloaderTable->storage->appendImageToBootloadList(slotId);
   \       0x12   0x6A09             LDRCC    R1,[R1, #+32]
   \       0x14   0x4708             BXCC     R1
   \                     ??bootloader_appendImageToBootloadList_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine0
    241          }
    242          

   \                                 In section .text, align 2, keep-with-next
    243          int32_t bootloader_initVerifyImage(uint32_t slotId,
    244                                             void     *context,
    245                                             size_t   contextSize)
    246          {
    247            int32_t retval;
    248            if (!bootloader_pointerValid(mainBootloaderTable)) {
   \                     bootloader_initVerifyImage: (+1)
   \        0x0   0x2328             MOVS     R3,#+40
   \        0x2   0x681B             LDR      R3,[R3, #+0]
   \        0x4   0xF5B3 0x4F80      CMP      R3,#+16384
   \        0x8   0xD201             BCS.N    ??bootloader_initVerifyImage_0
    249              return BOOTLOADER_ERROR_PARSE_STORAGE;
    250            }
    251          
    252            // Check that the bootloader has image verification capability
    253            if (mainBootloaderTable->storage == NULL) {
   \        0xA   0x6B1B             LDR      R3,[R3, #+48]
   \        0xC   0xB903             CBNZ.N   R3,??bootloader_initVerifyImage_1
   \                     ??bootloader_initVerifyImage_0: (+1)
   \        0xE   0x....             B.N      ?Subroutine1
    254              return BOOTLOADER_ERROR_PARSE_STORAGE;
    255            }
    256          
    257            retval = mainBootloaderTable->storage->initParseImage(
    258              slotId,
    259              (BootloaderParserContext_t*)context,
    260              contextSize);
    261          
    262            return retval;
   \                     ??bootloader_initVerifyImage_1: (+1)
   \       0x10   0x6A5B             LDR      R3,[R3, #+36]
   \       0x12   0x4718             BX       R3
    263          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0xF44F 0x7001      MOV      R0,#+516
   \        0x4   0x4770             BX       LR
    264          

   \                                 In section .text, align 2, keep-with-next
    265          int32_t bootloader_continueVerifyImage(void                       *context,
    266                                                 BootloaderParserCallback_t metadataCallback)
    267          {
    268            if (!bootloader_pointerValid(mainBootloaderTable)
    269                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_continueVerifyImage: (+1)
   \        0x0   0x2228             MOVS     R2,#+40
   \        0x2   0x6812             LDR      R2,[R2, #+0]
   \        0x4   0xF5B2 0x4F80      CMP      R2,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_continueVerifyImage_0
   \        0xA   0x6B12             LDR      R2,[R2, #+48]
   \        0xC   0xF5B2 0x4F80      CMP      R2,#+16384
   \       0x10   0xBF3C             ITT      CC 
    270              return BOOTLOADER_ERROR_PARSE_STORAGE;
    271            }
    272          
    273            return mainBootloaderTable->storage->verifyImage(
    274              (BootloaderParserContext_t *)context,
    275              metadataCallback);
   \       0x12   0x6A92             LDRCC    R2,[R2, #+40]
   \       0x14   0x4710             BXCC     R2
   \                     ??bootloader_continueVerifyImage_0: (+1)
   \       0x16                      REQUIRE ?Subroutine1
   \       0x16                      ;; // Fall through to label ?Subroutine1
    276          }
    277          

   \                                 In section .text, align 2, keep-with-next
    278          int32_t bootloader_verifyImage(uint32_t                   slotId,
    279                                         BootloaderParserCallback_t metadataCallback)
    280          {
   \                     bootloader_verifyImage: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0xB0E0             SUB      SP,SP,#+384
    281            uint8_t context[BOOTLOADER_STORAGE_VERIFICATION_CONTEXT_SIZE];
    282            int32_t retval;
    283          
    284            if (!bootloader_pointerValid(mainBootloaderTable)) {
   \        0x6   0x2128             MOVS     R1,#+40
   \        0x8   0x680B             LDR      R3,[R1, #+0]
   \        0xA   0xF5B3 0x4F80      CMP      R3,#+16384
   \        0xE   0xD213             BCS.N    ??bootloader_verifyImage_0
    285              return BOOTLOADER_ERROR_PARSE_STORAGE;
    286            }
    287          
    288            retval = bootloader_initVerifyImage(slotId,
    289                                                context,
    290                                                BOOTLOADER_STORAGE_VERIFICATION_CONTEXT_SIZE);
   \       0x10   0xF44F 0x72C0      MOV      R2,#+384
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x....'....        BL       bootloader_initVerifyImage
    291          
    292            if (retval != BOOTLOADER_OK) {
   \       0x1A   0xB978             CBNZ.N   R0,??bootloader_verifyImage_1
    293              return retval;
    294            }
    295          
    296            do {
    297              retval = bootloader_continueVerifyImage(context, metadataCallback);
   \                     ??bootloader_verifyImage_2: (+1)
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x....'....        BL       bootloader_continueVerifyImage
    298            } while (retval == BOOTLOADER_ERROR_PARSE_CONTINUE);
   \       0x24   0xF240 0x2101      MOVW     R1,#+513
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD0F7             BEQ.N    ??bootloader_verifyImage_2
    299          
    300            if (retval == BOOTLOADER_ERROR_PARSE_SUCCESS) {
   \       0x2C   0xF240 0x2203      MOVW     R2,#+515
   \       0x30   0x4290             CMP      R0,R2
   \       0x32   0xD103             BNE.N    ??bootloader_verifyImage_1
    301              return BOOTLOADER_OK;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xE001             B.N      ??bootloader_verifyImage_1
    302            } else {
   \                     ??bootloader_verifyImage_0: (+1)
   \       0x38   0xF44F 0x7001      MOV      R0,#+516
    303              return retval;
   \                     ??bootloader_verifyImage_1: (+1)
   \       0x3C   0xB060             ADD      SP,SP,#+384
   \       0x3E   0xBD10             POP      {R4,PC}          ;; return
    304            }
    305          }
    306          

   \                                 In section .text, align 2, keep-with-next
    307          int32_t bootloader_getImageInfo(uint32_t          slotId,
    308                                          ApplicationData_t *appInfo,
    309                                          uint32_t          *bootloaderVersion)
    310          {
   \                     bootloader_getImageInfo: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x460C             MOV      R4,R1
    311            uint8_t context[BOOTLOADER_STORAGE_VERIFICATION_CONTEXT_SIZE];
    312            int32_t retval;
    313          
    314            if (!bootloader_pointerValid(mainBootloaderTable)
    315                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \        0x6   0x2628             MOVS     R6,#+40
   \        0x8   0x6831             LDR      R1,[R6, #+0]
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0xF5B1 0x4F80      CMP      R1,#+16384
   \       0x10   0xBF3C             ITT      CC 
   \       0x12   0x6B0B             LDRCC    R3,[R1, #+48]
   \       0x14   0xF5B3 0x4F80      CMPCC    R3,#+16384
   \       0x18   0xD20E             BCS.N    ??bootloader_getImageInfo_0
    316              return BOOTLOADER_ERROR_PARSE_STORAGE;
    317            }
    318          
    319            // Check that the bootloader has image verification capability
    320            BTL_ASSERT(mainBootloaderTable->storage != NULL);
    321          
    322            retval = mainBootloaderTable->storage->initParseImage(
    323              slotId,
    324              (BootloaderParserContext_t *)context,
    325              BOOTLOADER_STORAGE_VERIFICATION_CONTEXT_SIZE);
   \       0x1A   0x6A5B             LDR      R3,[R3, #+36]
   \       0x1C   0xF44F 0x72C0      MOV      R2,#+384
   \       0x20   0x4669             MOV      R1,SP
   \       0x22   0x4798             BLX      R3
    326          
    327            if (retval != BOOTLOADER_OK) {
   \       0x24   0xB930             CBNZ.N   R0,??bootloader_getImageInfo_1
    328              return retval;
    329            }
    330          
    331            retval = mainBootloaderTable->storage->getImageInfo(
    332              (BootloaderParserContext_t *)context,
    333              appInfo,
    334              bootloaderVersion);
    335          
    336            return retval;
   \       0x26   0x6833             LDR      R3,[R6, #+0]
   \       0x28   0x4621             MOV      R1,R4
   \       0x2A   0x462A             MOV      R2,R5
   \       0x2C   0x6B1C             LDR      R4,[R3, #+48]
   \       0x2E   0x4668             MOV      R0,SP
   \       0x30   0x6AE3             LDR      R3,[R4, #+44]
   \       0x32   0x4798             BLX      R3
   \                     ??bootloader_getImageInfo_1: (+1)
   \       0x34   0xB060             ADD      SP,SP,#+384
   \       0x36   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??bootloader_getImageInfo_0: (+1)
   \       0x38   0xF44F 0x7001      MOV      R0,#+516
   \       0x3C   0xE7FA             B.N      ??bootloader_getImageInfo_1
    337          }
    338          

   \                                 In section .text, align 2, keep-with-next
    339          bool bootloader_storageIsBusy(void)
    340          {
    341            if (!bootloader_pointerValid(mainBootloaderTable)
    342                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_storageIsBusy: (+1)
   \        0x0   0x2028             MOVS     R0,#+40
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF5B0 0x4F80      CMP      R0,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_storageIsBusy_0
   \        0xA   0x6B00             LDR      R0,[R0, #+48]
   \        0xC   0xF5B0 0x4F80      CMP      R0,#+16384
   \       0x10   0xBF3C             ITT      CC 
    343              return true;
    344            }
    345            return mainBootloaderTable->storage->isBusy();
   \       0x12   0x6B00             LDRCC    R0,[R0, #+48]
   \       0x14   0x4700             BXCC     R0
   \                     ??bootloader_storageIsBusy_0: (+1)
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x4770             BX       LR               ;; return
    346          }
    347          

   \                                 In section .text, align 2, keep-with-next
    348          int32_t bootloader_readRawStorage(uint32_t address,
    349                                            uint8_t  *buffer,
    350                                            size_t   length)
    351          {
    352            if (!bootloader_pointerValid(mainBootloaderTable)
    353                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_readRawStorage: (+1)
   \        0x0   0x2328             MOVS     R3,#+40
   \        0x2   0x681B             LDR      R3,[R3, #+0]
   \        0x4   0xF5B3 0x4F80      CMP      R3,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_readRawStorage_0
   \        0xA   0x6B1B             LDR      R3,[R3, #+48]
   \        0xC   0xF5B3 0x4F80      CMP      R3,#+16384
   \       0x10   0xBF3C             ITT      CC 
    354              return BOOTLOADER_ERROR_INIT_STORAGE;
    355            }
    356            return mainBootloaderTable->storage->readRaw(address, buffer, length);
   \       0x12   0x6B5B             LDRCC    R3,[R3, #+52]
   \       0x14   0x4718             BXCC     R3
   \                     ??bootloader_readRawStorage_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine2
    357          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0xF240 0x1001      MOVW     R0,#+257
   \        0x4   0x4770             BX       LR               ;; return
    358          

   \                                 In section .text, align 2, keep-with-next
    359          int32_t bootloader_writeRawStorage(uint32_t address,
    360                                             uint8_t  *buffer,
    361                                             size_t   length)
    362          {
    363            if (!bootloader_pointerValid(mainBootloaderTable)
    364                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_writeRawStorage: (+1)
   \        0x0   0x2328             MOVS     R3,#+40
   \        0x2   0x681B             LDR      R3,[R3, #+0]
   \        0x4   0xF5B3 0x4F80      CMP      R3,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_writeRawStorage_0
   \        0xA   0x6B1B             LDR      R3,[R3, #+48]
   \        0xC   0xF5B3 0x4F80      CMP      R3,#+16384
   \       0x10   0xBF3C             ITT      CC 
    365              return BOOTLOADER_ERROR_INIT_STORAGE;
    366            }
    367            return mainBootloaderTable->storage->writeRaw(address, buffer, length);
   \       0x12   0x6B9B             LDRCC    R3,[R3, #+56]
   \       0x14   0x4718             BXCC     R3
   \                     ??bootloader_writeRawStorage_0: (+1)
   \       0x16                      REQUIRE ?Subroutine2
   \       0x16                      ;; // Fall through to label ?Subroutine2
    368          }
    369          

   \                                 In section .text, align 2, keep-with-next
    370          int32_t bootloader_eraseRawStorage(uint32_t address,
    371                                             size_t   length)
    372          {
    373            if (!bootloader_pointerValid(mainBootloaderTable)
    374                || !bootloader_pointerValid(mainBootloaderTable->storage)) {
   \                     bootloader_eraseRawStorage: (+1)
   \        0x0   0x2228             MOVS     R2,#+40
   \        0x2   0x6812             LDR      R2,[R2, #+0]
   \        0x4   0xF5B2 0x4F80      CMP      R2,#+16384
   \        0x8   0xD205             BCS.N    ??bootloader_eraseRawStorage_0
   \        0xA   0x6B12             LDR      R2,[R2, #+48]
   \        0xC   0xF5B2 0x4F80      CMP      R2,#+16384
   \       0x10   0xBF3C             ITT      CC 
    375              return BOOTLOADER_ERROR_INIT_STORAGE;
    376            }
    377            return mainBootloaderTable->storage->eraseRaw(address, length);
   \       0x12   0x6BD2             LDRCC    R2,[R2, #+60]
   \       0x14   0x4710             BXCC     R2
   \                     ??bootloader_eraseRawStorage_0: (+1)
   \       0x16   0x....             B.N      ?Subroutine2
    378          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   bootloader_appendImageToBootloadList
         0   -- Indirect call
       8   bootloader_chunkedEraseStorageSlot
         8   -> bootloader_eraseRawStorage
       0   bootloader_continueVerifyImage
         0   -- Indirect call
       0   bootloader_eraseRawStorage
         0   -- Indirect call
       0   bootloader_eraseStorageSlot
         0   -- Indirect call
      56   bootloader_eraseWriteStorage
        56   -> bootloader_eraseRawStorage
        56   -> bootloader_getStorageInfo
        56   -> bootloader_getStorageSlotInfo
        56   -> bootloader_writeRawStorage
     400   bootloader_getImageInfo
       400   -- Indirect call
       0   bootloader_getImagesToBootload
         0   -- Indirect call
       0   bootloader_getStorageInfo
         0   -- Indirect call
       0   bootloader_getStorageSlotInfo
         0   -- Indirect call
      32   bootloader_initChunkedEraseStorageSlot
        32   -> bootloader_getStorageInfo
        32   -> bootloader_getStorageSlotInfo
       0   bootloader_initVerifyImage
         0   -- Indirect call
       0   bootloader_readRawStorage
         0   -- Indirect call
       8   bootloader_readStorage
         8   -- Indirect call
       8   bootloader_setImageToBootload
         8   -- Indirect call
       0   bootloader_setImagesToBootload
         0   -- Indirect call
       0   bootloader_storageIsBusy
         0   -- Indirect call
     392   bootloader_verifyImage
       392   -> bootloader_continueVerifyImage
       392   -> bootloader_initVerifyImage
       0   bootloader_writeRawStorage
         0   -- Indirect call
       8   bootloader_writeStorage
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       6  ?Subroutine3
      24  bootloader_appendImageToBootloadList
      52  bootloader_chunkedEraseStorageSlot
      22  bootloader_continueVerifyImage
      24  bootloader_eraseRawStorage
      22  bootloader_eraseStorageSlot
     194  bootloader_eraseWriteStorage
      62  bootloader_getImageInfo
      24  bootloader_getImagesToBootload
      24  bootloader_getStorageInfo
      24  bootloader_getStorageSlotInfo
      42  bootloader_initChunkedEraseStorageSlot
      20  bootloader_initVerifyImage
      24  bootloader_readRawStorage
      28  bootloader_readStorage
      36  bootloader_setImageToBootload
      24  bootloader_setImagesToBootload
      26  bootloader_storageIsBusy
      64  bootloader_verifyImage
      22  bootloader_writeRawStorage
      26  bootloader_writeStorage

 
 808 bytes in section .text
 
 808 bytes of CODE memory

Errors: none
Warnings: none
