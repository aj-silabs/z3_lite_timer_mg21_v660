###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         14/Jun/2019  13:18:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\asn1write.c
#    Command line =  
#        -f C:\Users\alji\AppData\Local\Temp\EWB26F.tmp
#        (C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\asn1write.c
#        -D LOCAL_STORAGE_BTL -D CORTEXM3 -D CORTEXM3_EFR32 -D
#        CORTEXM3_EFR32_MICRO -D CORTEXM3_EFM32_MICRO -D
#        EFR32_SERIES2_CONFIG1_MICRO -D EFR32MG21 -D EFR32MG21A010F1024IM32 -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"z3_lite_timer_mg21_v660_endpoint_config.h\""
#        -D "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"z3_lite_timer_mg21_v660_tokens.h\"" -D
#        "PLATFORM_HEADER=\"platform/base/hal/micro/cortexm3/compiler/iar.h\""
#        -D "ZA_GENERATED_HEADER=\"z3_lite_timer_mg21_v660.h\"" -D
#        "__SOURCEFILE__=\"asn1write.c\"" -D PSSTORE_SIZE=0 -D LONGTOKEN_SIZE=0
#        -D LOCKBITS_IN_MAINFLASH_SIZE=8192 -D HAL_CONFIG=1 -D
#        EMBER_AF_USE_HWCONF -D LED_BLINK_PERIOD_MS=1000 -D NO_LED=1 -D
#        "EMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\"" -D
#        "EMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\"" -D
#        "EMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\"" -D
#        "EMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\""
#        -D EMBER_STACK_ZIGBEE -D
#        "MBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\"" -D USE_NVM3 -D
#        NVM3_DEFAULT_NVM_SIZE=NVM3_FLASH_PAGES*FLASH_PAGE_SIZE -D
#        EMLIB_USER_CONFIG -D HAL_BULBPWM_ENABLE=1 -D
#        HAL_BULBPWM_FREQUENCY=1000 -D
#        "APPLICATION_TOKEN_HEADER=\"znet-token.h\"" -D
#        "APPLICATION_MFG_TOKEN_HEADER=\"znet-mfg-token.h\"" -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE=\"configs/config-device-acceleration.h\""
#        -D
#        "MBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE=\"config-device-acceleration-app.h\""
#        -D NVM3_FLASH_PAGES=4 -D NVM3_DEFAULT_CACHE_SIZE=200 -D
#        NVM3_MAX_OBJECT_SIZE=254 -D NVM3_DEFAULT_REPACK_HEADROOM=0 -D
#        PHY_RAIL=1 -lC
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst
#        --diag_suppress Pa050 -o
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj
#        --no_unroll --no_clustering --debug --endian=little
#        --cpu=Cortex-M33.no_dsp --cmse --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\..\stack\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\..\util\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\protocol\zigbee\app\framework\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\micro\cortexm3\efm32\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\CMSIS\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\Device\SiliconLabs\efr32mg21\Include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\common\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\dmadrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\gpiointerrupt\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\rtcdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\sleep\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\spidrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\tempdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\uartdrv\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emdrv\ustimer\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\emlib\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\middleware\glib\glib\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\plugin\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\common\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\base\hal\..\..\radio\rail_lib\chip\efr32\rf\rfprotocol\ieee802154\cortex\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\halconfig\inc\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\module\config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\halconfig\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\hardware\kit\common\bsp\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\hal-config\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\bootloader\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\emdrv\nvm3\inc\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\common\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\hal\efr32\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\plugin\coexistence\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\plugin\plugin-common\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\include\mbedtls\
#        -I
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\..\..\v2.6\util\third_party\mbedtls\sl_crypto\include\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\lst\asn1write.lst
#    Object file  =  
#        C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.5\z3_lite_timer_mg21_v660\build\obj\asn1write.o
#
###############################################################################

C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\v2.6\util\third_party\mbedtls\library\asn1write.c
      1          /***************************************************************************//**
      2           * # License
      3           *
      4           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      5           * software is governed by the terms of Silicon Labs Master Software License
      6           * Agreement (MSLA) available at
      7           * www.silabs.com/about-us/legal/master-software-license-agreement. This
      8           * software is Third Party Software licensed by Silicon Labs from a third party
      9           * and is governed by the sections of the MSLA applicable to Third Party
     10           * Software and the additional terms set forth below.
     11           *
     12           ******************************************************************************/
     13          /*
     14           * ASN.1 buffer writing functionality
     15           *
     16           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
     17           *  SPDX-License-Identifier: Apache-2.0
     18           *
     19           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     20           *  not use this file except in compliance with the License.
     21           *  You may obtain a copy of the License at
     22           *
     23           *  http://www.apache.org/licenses/LICENSE-2.0
     24           *
     25           *  Unless required by applicable law or agreed to in writing, software
     26           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     27           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28           *  See the License for the specific language governing permissions and
     29           *  limitations under the License.
     30           *
     31           *  This file is part of mbed TLS (https://tls.mbed.org)
     32           */
     33          
     34          #if !defined(MBEDTLS_CONFIG_FILE)
     35          #include "mbedtls/config.h"
     36          #else
     37          #include MBEDTLS_CONFIG_FILE
     38          #endif
     39          
     40          #if defined(MBEDTLS_ASN1_WRITE_C)
     41          
     42          #include "mbedtls/asn1write.h"
     43          
     44          #include <string.h>
     45          
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #include <stdlib.h>
     50          #define mbedtls_calloc    calloc
     51          #define mbedtls_free       free
     52          #endif
     53          
     54          int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
     55          {
     56              if( len < 0x80 )
     57              {
     58                  if( *p - start < 1 )
     59                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     60          
     61                  *--(*p) = (unsigned char) len;
     62                  return( 1 );
     63              }
     64          
     65              if( len <= 0xFF )
     66              {
     67                  if( *p - start < 2 )
     68                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     69          
     70                  *--(*p) = (unsigned char) len;
     71                  *--(*p) = 0x81;
     72                  return( 2 );
     73              }
     74          
     75              if( len <= 0xFFFF )
     76              {
     77                  if( *p - start < 3 )
     78                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     79          
     80                  *--(*p) = ( len       ) & 0xFF;
     81                  *--(*p) = ( len >>  8 ) & 0xFF;
     82                  *--(*p) = 0x82;
     83                  return( 3 );
     84              }
     85          
     86              if( len <= 0xFFFFFF )
     87              {
     88                  if( *p - start < 4 )
     89                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     90          
     91                  *--(*p) = ( len       ) & 0xFF;
     92                  *--(*p) = ( len >>  8 ) & 0xFF;
     93                  *--(*p) = ( len >> 16 ) & 0xFF;
     94                  *--(*p) = 0x83;
     95                  return( 4 );
     96              }
     97          
     98          #if SIZE_MAX > 0xFFFFFFFF
     99              if( len <= 0xFFFFFFFF )
    100          #endif
    101              {
    102                  if( *p - start < 5 )
    103                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    104          
    105                  *--(*p) = ( len       ) & 0xFF;
    106                  *--(*p) = ( len >>  8 ) & 0xFF;
    107                  *--(*p) = ( len >> 16 ) & 0xFF;
    108                  *--(*p) = ( len >> 24 ) & 0xFF;
    109                  *--(*p) = 0x84;
    110                  return( 5 );
    111              }
    112          
    113          #if SIZE_MAX > 0xFFFFFFFF
    114              return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    115          #endif
    116          }
    117          
    118          int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
    119          {
    120              if( *p - start < 1 )
    121                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    122          
    123              *--(*p) = tag;
    124          
    125              return( 1 );
    126          }
    127          
    128          int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
    129                                     const unsigned char *buf, size_t size )
    130          {
    131              size_t len = 0;
    132          
    133              if( *p < start || (size_t)( *p - start ) < size )
    134                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    135          
    136              len = size;
    137              (*p) -= len;
    138              memcpy( *p, buf, len );
    139          
    140              return( (int) len );
    141          }
    142          
    143          #if defined(MBEDTLS_BIGNUM_C)
    144          int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
    145          {
    146              int ret;
    147              size_t len = 0;
    148          
    149              // Write the MPI
    150              //
    151              len = mbedtls_mpi_size( X );
    152          
    153              if( *p < start || (size_t)( *p - start ) < len )
    154                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    155          
    156              (*p) -= len;
    157              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
    158          
    159              // DER format assumes 2s complement for numbers, so the leftmost bit
    160              // should be 0 for positive numbers and 1 for negative numbers.
    161              //
    162              if( X->s ==1 && **p & 0x80 )
    163              {
    164                  if( *p - start < 1 )
    165                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    166          
    167                  *--(*p) = 0x00;
    168                  len += 1;
    169              }
    170          
    171              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    172              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
    173          
    174              ret = (int) len;
    175          
    176          cleanup:
    177              return( ret );
    178          }
    179          #endif /* MBEDTLS_BIGNUM_C */
    180          
    181          int mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )
    182          {
    183              int ret;
    184              size_t len = 0;
    185          
    186              // Write NULL
    187              //
    188              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );
    189              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );
    190          
    191              return( (int) len );
    192          }
    193          
    194          int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
    195                              const char *oid, size_t oid_len )
    196          {
    197              int ret;
    198              size_t len = 0;
    199          
    200              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    201                                            (const unsigned char *) oid, oid_len ) );
    202              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
    203              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
    204          
    205              return( (int) len );
    206          }
    207          
    208          int mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,
    209                                               const char *oid, size_t oid_len,
    210                                               size_t par_len )
    211          {
    212              int ret;
    213              size_t len = 0;
    214          
    215              if( par_len == 0 )
    216                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );
    217              else
    218                  len += par_len;
    219          
    220              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
    221          
    222              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    223              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
    224                                                 MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );
    225          
    226              return( (int) len );
    227          }
    228          
    229          int mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )
    230          {
    231              int ret;
    232              size_t len = 0;
    233          
    234              if( *p - start < 1 )
    235                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    236          
    237              *--(*p) = (boolean) ? 255 : 0;
    238              len++;
    239          
    240              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    241              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );
    242          
    243              return( (int) len );
    244          }
    245          
    246          int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
    247          {
    248              int ret;
    249              size_t len = 0;
    250          
    251              // DER format assumes 2s complement for numbers, so the leftmost bit
    252              // should be 0 for positive numbers and 1 for negative numbers.
    253              //
    254              if( *p - start < 1 )
    255                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    256          
    257              len += 1;
    258              *--(*p) = val;
    259          
    260              if( val > 0 && **p & 0x80 )
    261              {
    262                  if( *p - start < 1 )
    263                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    264          
    265                  *--(*p) = 0x00;
    266                  len += 1;
    267              }
    268          
    269              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    270              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
    271          
    272              return( (int) len );
    273          }
    274          
    275          int mbedtls_asn1_write_printable_string( unsigned char **p, unsigned char *start,
    276                                           const char *text, size_t text_len )
    277          {
    278              int ret;
    279              size_t len = 0;
    280          
    281              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    282                            (const unsigned char *) text, text_len ) );
    283          
    284              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    285              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_PRINTABLE_STRING ) );
    286          
    287              return( (int) len );
    288          }
    289          
    290          int mbedtls_asn1_write_ia5_string( unsigned char **p, unsigned char *start,
    291                                     const char *text, size_t text_len )
    292          {
    293              int ret;
    294              size_t len = 0;
    295          
    296              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    297                            (const unsigned char *) text, text_len ) );
    298          
    299              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    300              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_IA5_STRING ) );
    301          
    302              return( (int) len );
    303          }
    304          
    305          int mbedtls_asn1_write_bitstring( unsigned char **p, unsigned char *start,
    306                                    const unsigned char *buf, size_t bits )
    307          {
    308              int ret;
    309              size_t len = 0;
    310              size_t unused_bits, byte_len;
    311          
    312              byte_len = ( bits + 7 ) / 8;
    313              unused_bits = ( byte_len * 8 ) - bits;
    314          
    315              if( *p < start || (size_t)( *p - start ) < byte_len + 1 )
    316                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    317          
    318              len = byte_len + 1;
    319          
    320              /* Write the bitstring. Ensure the unused bits are zeroed */
    321              if( byte_len > 0 )
    322              {
    323                  byte_len--;
    324                  *--( *p ) = buf[byte_len] & ~( ( 0x1 << unused_bits ) - 1 );
    325                  ( *p ) -= byte_len;
    326                  memcpy( *p, buf, byte_len );
    327              }
    328          
    329              /* Write unused bits */
    330              *--( *p ) = (unsigned char)unused_bits;
    331          
    332              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    333              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );
    334          
    335              return( (int) len );
    336          }
    337          
    338          int mbedtls_asn1_write_octet_string( unsigned char **p, unsigned char *start,
    339                                       const unsigned char *buf, size_t size )
    340          {
    341              int ret;
    342              size_t len = 0;
    343          
    344              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, buf, size ) );
    345          
    346              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    347              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );
    348          
    349              return( (int) len );
    350          }
    351          
    352          
    353          /* This is a copy of the ASN.1 parsing function mbedtls_asn1_find_named_data(),
    354           * which is replicated to avoid a dependency ASN1_WRITE_C on ASN1_PARSE_C. */
    355          static mbedtls_asn1_named_data *asn1_find_named_data(
    356                                                         mbedtls_asn1_named_data *list,
    357                                                         const char *oid, size_t len )
    358          {
    359              while( list != NULL )
    360              {
    361                  if( list->oid.len == len &&
    362                      memcmp( list->oid.p, oid, len ) == 0 )
    363                  {
    364                      break;
    365                  }
    366          
    367                  list = list->next;
    368              }
    369          
    370              return( list );
    371          }
    372          
    373          mbedtls_asn1_named_data *mbedtls_asn1_store_named_data(
    374                                                  mbedtls_asn1_named_data **head,
    375                                                  const char *oid, size_t oid_len,
    376                                                  const unsigned char *val,
    377                                                  size_t val_len )
    378          {
    379              mbedtls_asn1_named_data *cur;
    380          
    381              if( ( cur = asn1_find_named_data( *head, oid, oid_len ) ) == NULL )
    382              {
    383                  // Add new entry if not present yet based on OID
    384                  //
    385                  cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,
    386                                                      sizeof(mbedtls_asn1_named_data) );
    387                  if( cur == NULL )
    388                      return( NULL );
    389          
    390                  cur->oid.len = oid_len;
    391                  cur->oid.p = mbedtls_calloc( 1, oid_len );
    392                  if( cur->oid.p == NULL )
    393                  {
    394                      mbedtls_free( cur );
    395                      return( NULL );
    396                  }
    397          
    398                  memcpy( cur->oid.p, oid, oid_len );
    399          
    400                  cur->val.len = val_len;
    401                  cur->val.p = mbedtls_calloc( 1, val_len );
    402                  if( cur->val.p == NULL )
    403                  {
    404                      mbedtls_free( cur->oid.p );
    405                      mbedtls_free( cur );
    406                      return( NULL );
    407                  }
    408          
    409                  cur->next = *head;
    410                  *head = cur;
    411              }
    412              else if( cur->val.len < val_len )
    413              {
    414                  /*
    415                   * Enlarge existing value buffer if needed
    416                   * Preserve old data until the allocation succeeded, to leave list in
    417                   * a consistent state in case allocation fails.
    418                   */
    419                  void *p = mbedtls_calloc( 1, val_len );
    420                  if( p == NULL )
    421                      return( NULL );
    422          
    423                  mbedtls_free( cur->val.p );
    424                  cur->val.p = p;
    425                  cur->val.len = val_len;
    426              }
    427          
    428              if( val != NULL )
    429                  memcpy( cur->val.p, val, val_len );
    430          
    431              return( cur );
    432          }
    433          #endif /* MBEDTLS_ASN1_WRITE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
